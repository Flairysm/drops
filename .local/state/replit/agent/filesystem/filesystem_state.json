{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Drops - Trading Card Game Application\n\n## Overview\n\nDrops is a modern web application that simulates a trading card game (TCG) arcade experience. Users can play various games to earn virtual trading cards, manage their card collection, and purchase credits. The application features multiple gaming modes including Plinko, Wheel of Fortune, and virtual pack openings with different card rarities and tiers.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **Routing**: Wouter for client-side routing with authentication-based route protection\n- **UI Components**: Radix UI components with shadcn/ui styling system\n- **Styling**: Tailwind CSS with custom gaming-themed design tokens and animations\n- **State Management**: TanStack Query (React Query) for server state management\n- **Form Handling**: React Hook Form with Zod validation\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API with JSON responses\n- **Session Management**: Express sessions with PostgreSQL storage\n- **Error Handling**: Centralized error middleware with structured error responses\n\n### Data Storage Solutions\n- **Database**: PostgreSQL with Neon serverless hosting\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Schema Management**: Drizzle Kit for migrations and schema management\n- **Connection Pooling**: Neon serverless connection pooling with WebSocket support\n\n### Authentication and Authorization\n- **Provider**: Replit OpenID Connect (OIDC) integration\n- **Strategy**: Passport.js with OpenID Connect strategy\n- **Session Storage**: PostgreSQL-backed sessions with connect-pg-simple\n- **Security**: HTTP-only cookies with secure flags and CSRF protection\n\n### Gaming System Architecture\n- **Game Types**: Three distinct gaming modes (Plinko, Wheel, Pack Opening)\n- **Card Tiers**: Seven-tier rarity system (D, C, B, A, S, SS, SSS) - migrated from old 5-tier system (August 30, 2025)\n- **Probability Engine**: Weighted random selection based on configured odds\n- **Credit System**: Virtual currency with purchase and deduction mechanisms\n\n### Database Schema Design\n- **Users**: Authentication data, credits, spending tracking, and moderation flags\n- **Cards**: Card definitions with tiers, pack types, market values, and stock\n- **User Cards**: Junction table for user card ownership with acquisition tracking\n- **Game Sessions**: Historical record of all gaming activities and outcomes\n- **Transactions**: Financial transaction log for credit purchases and spending\n- **Global Feed**: Real-time activity feed for community engagement\n\n## External Dependencies\n\n### Third-Party Services\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **Replit Authentication**: OIDC provider for user authentication and authorization\n- **Replit Development Tools**: Hot reload, error overlay, and development banner integration\n\n### Key NPM Packages\n- **Database**: `@neondatabase/serverless`, `drizzle-orm`, `drizzle-zod`\n- **Authentication**: `passport`, `openid-client`, `express-session`\n- **UI Framework**: `@radix-ui/*` components, `tailwindcss`, `class-variance-authority`\n- **Validation**: `zod`, `@hookform/resolvers`\n- **State Management**: `@tanstack/react-query`\n- **Utilities**: `date-fns`, `clsx`, `memoizee`\n\n### Development Dependencies\n- **Build Tools**: Vite with React plugin and TypeScript support\n- **Code Quality**: ESBuild for production builds\n- **Development Experience**: Hot module replacement, error overlays, and source mapping\n\n## Recent Changes\n\n### August 30, 2025 - Major Tier System Overhaul\n- **Tier System Migration**: Completely migrated from 5-tier (Common, Uncommon, Rare, Super Rare, Legendary) to 7-tier system (D, C, B, A, S, SS, SSS)\n- **Database Migration**: Updated all existing cards, pull rates, and global feed entries to use new tier names\n- **Frontend Updates**: Updated all UI components including admin forms, vault filters, landing page, wheel game, pack opening animation, and card displays\n- **Pull Rate Rebalancing**: Completely rebalanced pull rates for all pack types with new 7-tier distribution\n- **CSS Styling**: Updated tier colors, glow effects, and styling to support 7 distinct tiers\n- **Vault Functionality**: Confirmed refund calculations use 100% card value and updated tier filtering to work with new system\n\n### August 31, 2025 - App Rebranding to \"Drops\"\n- **Complete Rebranding**: Updated all app name references from \"Flair TCG Arcade\" to \"Drops\"\n- **Navigation Updates**: Updated header and navigation branding across all pages\n- **Landing Page**: Updated main hero section and footer branding\n- **Documentation**: Updated replit.md to reflect new app name\n- **Toast Messages**: Updated registration welcome message to use new branding","size_bytes":4973},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        // Gaming tier colors\n        d: \"var(--tier-d)\",\n        c: \"var(--tier-c)\",\n        b: \"var(--tier-b)\",\n        a: \"var(--tier-a)\",\n        s: \"var(--tier-s)\",\n        ss: \"var(--tier-ss)\",\n        sss: \"var(--tier-sss)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        gaming: [\"var(--font-gaming)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"glow-pulse\": {\n          \"0%\": {\n            \"box-shadow\": \"0 0 5px currentColor\",\n          },\n          \"100%\": {\n            \"box-shadow\": \"0 0 20px currentColor, 0 0 30px currentColor\",\n          },\n        },\n        \"float\": {\n          \"0%, 100%\": {\n            transform: \"translateY(0px)\",\n          },\n          \"50%\": {\n            transform: \"translateY(-10px)\",\n          },\n        },\n        \"card-flip\": {\n          \"0%\": {\n            transform: \"rotateY(0)\",\n          },\n          \"50%\": {\n            transform: \"rotateY(90deg)\",\n          },\n          \"100%\": {\n            transform: \"rotateY(0)\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"glow-pulse\": \"glow-pulse 2s ease-in-out infinite alternate\",\n        \"float\": \"float 3s ease-in-out infinite\",\n        \"card-flip\": \"card-flip 0.6s ease-in-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3851},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool } from 'pg';\nimport { drizzle } from 'drizzle-orm/node-postgres';\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\n// Configure PostgreSQL connection pool for Supabase\nexport const pool = new Pool({ \n  connectionString: process.env.DATABASE_URL,\n  max: 20,\n  idleTimeoutMillis: 30000,\n  connectionTimeoutMillis: 10000,\n  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,\n});\n\nexport const db = drizzle(pool, { schema });","size_bytes":595},"server/index.ts":{"content":"import 'dotenv/config';\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport path from \"path\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Serve attached assets as static files\napp.use('/attached_assets', express.static(path.resolve(import.meta.dirname, '../attached_assets')));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  const host = '0.0.0.0'; // Bind to all interfaces for better compatibility\n  \n  server.listen(port, host, () => {\n    log(`serving on port ${port} (${host})`);\n  });\n})();\n","size_bytes":2302},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated, isAdmin } from \"./replitAuth\";\nimport { z } from \"zod\";\nimport { \n  insertCardSchema, \n  insertPackSchema,\n  insertVirtualLibrarySchema,\n  insertVirtualPackSchema,\n  insertVirtualPackCardSchema,\n  insertShippingRequestSchema,\n  type GameResult \n} from \"@shared/schema\";\n\n// Map tier to pack type for Plinko\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = req.user; // User is now attached directly by custom middleware\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Game settings routes\n  app.get('/api/games/:gameType/settings', async (req, res) => {\n    try {\n      const { gameType } = req.params;\n      const settings = await storage.getGameSetting(gameType);\n      if (!settings) {\n        return res.status(404).json({ message: \"Game settings not found\" });\n      }\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error fetching game settings:\", error);\n      res.status(500).json({ message: \"Failed to fetch game settings\" });\n    }\n  });\n\n  // Game routes\n  app.post('/api/games/play', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { gameType, betAmount, plinkoResult, wheelResult } = req.body;\n\n      // Validate input\n      if (!['plinko', 'wheel', 'pack'].includes(gameType)) {\n        return res.status(400).json({ message: \"Invalid game type\" });\n      }\n\n      // For Plinko, use fixed price from database, ignore user input\n      let actualBetAmount: string;\n      if (gameType === 'plinko') {\n        const gameSettings = await storage.getGameSetting('plinko');\n        if (!gameSettings) {\n          return res.status(500).json({ message: \"Plinko pricing not configured\" });\n        }\n        actualBetAmount = gameSettings.price;\n        console.log(`Plinko fixed price: ${actualBetAmount} (user input ignored: ${betAmount})`);\n      } else {\n        // For other games, validate user input\n        const bet = parseFloat(betAmount);\n        if (isNaN(bet) || bet <= 0) {\n          return res.status(400).json({ message: \"Invalid bet amount\" });\n        }\n        actualBetAmount = betAmount;\n      }\n\n      // Check user credits using actual bet amount\n      const canDeduct = await storage.deductUserCredits(userId, actualBetAmount);\n      if (!canDeduct) {\n        return res.status(400).json({ message: \"Insufficient credits\" });\n      }\n\n      // Create game session for crash recovery\n      const gameSession = await storage.createGameSession({\n        userId,\n        gameType,\n        gameData: { betAmount: actualBetAmount, timestamp: Date.now() },\n        status: 'in_progress',\n      });\n\n      let result: GameResult;\n      \n      if (gameType === 'plinko' && plinkoResult) {\n        // Use frontend physics result for Plinko\n        result = {\n          cardId: '',\n          tier: plinkoResult.toLowerCase(), // Convert \"Masterball\" to \"masterball\"\n          gameType,\n        };\n        console.log(`Plinko result from frontend: ${plinkoResult} → pack type=${result.tier}`);\n      } else if (gameType === 'wheel' && wheelResult) {\n        // Use frontend wheel result for Wheel\n        result = {\n          cardId: '',\n          tier: wheelResult.toLowerCase(), // Use wheel result from frontend\n          gameType,\n        };\n        console.log(`Wheel result from frontend: ${wheelResult} → pack type=${result.tier}`);\n      } else {\n        // Use backend simulation for other games\n        result = await simulateGame(gameType, parseFloat(actualBetAmount));\n      }\n      \n      // Update game session with result\n      await storage.updateGameSession(gameSession.id, result, 'completed');\n\n      if (gameType === 'plinko' || gameType === 'wheel') {\n        // For Plinko and Wheel, award packs based on outcome\n        const packType = result.tier;\n        console.log(`${gameType} pack assignment: ${packType}`);\n        \n        const packs = await storage.getActivePacks();\n        const targetPack = packs.find(p => p.type === packType);\n        \n        if (!targetPack) {\n          console.log(`Available pack types:`, packs.map(p => p.type));\n          throw new Error(`Pack type ${packType} not found`);\n        }\n\n        // Award pack to user - store the pack type as tier for display\n        await storage.addUserPack({\n          userId,\n          packId: targetPack.id,\n          tier: packType, // Store pack type directly\n          earnedFrom: gameType,\n          isOpened: false,\n        });\n\n        // No global feed for pack earning - only when opening packs\n      } else {\n        // For other games, keep the old card logic\n        const card = await storage.getCard(result.cardId);\n        if (!card) {\n          throw new Error('Card not found');\n        }\n\n        // Add card to user vault with correct pull value\n        await storage.addUserCard({\n          userId,\n          cardId: result.cardId,\n          pullValue: card.marketValue,\n        });\n\n        // Add to global feed if rare enough\n        if (['rare', 'superrare', 'legendary'].includes(result.tier)) {\n          await storage.addGlobalFeedEntry({\n            userId,\n            cardId: result.cardId,\n            tier: result.tier,\n            gameType,\n          });\n        }\n      }\n\n      // Create transaction record\n      await storage.addTransaction({\n        userId,\n        type: 'game_play',\n        amount: `-${actualBetAmount}`,\n        description: `Played ${gameType} game`,\n      });\n\n      res.json({ \n        success: true, \n        result,\n        sessionId: gameSession.id,\n      });\n\n    } catch (error) {\n      console.error(\"Error playing game:\", error);\n      res.status(500).json({ message: \"Game error occurred\" });\n    }\n  });\n\n  // Vault routes\n  app.get('/api/vault', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const userCards = await storage.getUserCards(userId);\n      res.json(userCards);\n    } catch (error) {\n      console.error(\"Error fetching vault:\", error);\n      res.status(500).json({ message: \"Failed to fetch vault\" });\n    }\n  });\n\n  app.post('/api/vault/refund', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { cardIds } = req.body;\n\n      if (!Array.isArray(cardIds) || cardIds.length === 0) {\n        return res.status(400).json({ message: \"Invalid card IDs\" });\n      }\n\n      await storage.refundCards(cardIds, userId);\n      \n      // Add notification\n      await storage.addNotification({\n        userId,\n        type: 'refund',\n        title: 'Cards Refunded',\n        message: `Successfully refunded ${cardIds.length} cards`,\n      });\n\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error refunding cards:\", error);\n      res.status(500).json({ message: \"Failed to refund cards\" });\n    }\n  });\n\n  // Global feed routes\n  app.get('/api/feed', async (req, res) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 50;\n      const minTier = req.query.minTier as string;\n      const feed = await storage.getGlobalFeed(limit, minTier);\n      res.json(feed);\n    } catch (error) {\n      console.error(\"Error fetching feed:\", error);\n      res.status(500).json({ message: \"Failed to fetch feed\" });\n    }\n  });\n\n  // Credits routes\n  app.post('/api/credits/purchase', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { amount, bundleType } = req.body;\n\n      const purchaseAmount = parseFloat(amount);\n      if (isNaN(purchaseAmount) || purchaseAmount <= 0) {\n        return res.status(400).json({ message: \"Invalid amount\" });\n      }\n\n      // Apply bundle bonuses\n      let creditAmount = purchaseAmount;\n      if (bundleType === 'bundle_50') {\n        creditAmount = purchaseAmount * 1.1; // 10% bonus\n      } else if (bundleType === 'bundle_100') {\n        creditAmount = purchaseAmount * 1.2; // 20% bonus\n      }\n\n      // In a real implementation, integrate with payment processor here\n      // For now, we'll just add the credits directly\n\n      await storage.updateUserCredits(userId, creditAmount.toFixed(2));\n      \n      await storage.addTransaction({\n        userId,\n        type: 'purchase',\n        amount: creditAmount.toFixed(2),\n        description: `Credit purchase - ${bundleType || 'custom'}`,\n      });\n\n      await storage.addNotification({\n        userId,\n        type: 'purchase',\n        title: 'Credits Added',\n        message: `Added ${creditAmount.toFixed(2)} credits to your account`,\n      });\n\n      res.json({ success: true, creditsAdded: creditAmount });\n    } catch (error) {\n      console.error(\"Error purchasing credits:\", error);\n      res.status(500).json({ message: \"Failed to purchase credits\" });\n    }\n  });\n\n  // Shipping routes\n  app.post('/api/shipping/request', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const requestData = insertShippingRequestSchema.parse({\n        ...req.body,\n        userId,\n      });\n\n      const shippingRequest = await storage.createShippingRequest(requestData);\n      \n      await storage.addNotification({\n        userId,\n        type: 'shipping',\n        title: 'Shipping Request Created',\n        message: `Your shipping request has been submitted`,\n      });\n\n      res.json(shippingRequest);\n    } catch (error) {\n      console.error(\"Error creating shipping request:\", error);\n      res.status(500).json({ message: \"Failed to create shipping request\" });\n    }\n  });\n\n  // Admin routes\n  app.get('/api/admin/stats', isAdmin, async (req: any, res) => {\n    try {\n      // Basic admin check (in real app, check user role)\n      const stats = await storage.getSystemStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching admin stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch stats\" });\n    }\n  });\n\n  app.get('/api/admin/users', isAdmin, async (req: any, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.get('/api/admin/cards', isAdmin, async (req: any, res) => {\n    try {\n      const cards = await storage.getCards();\n      res.json(cards);\n    } catch (error) {\n      console.error(\"Error fetching cards:\", error);\n      res.status(500).json({ message: \"Failed to fetch cards\" });\n    }\n  });\n\n  app.post('/api/admin/cards', isAdmin, async (req: any, res) => {\n    try {\n      const cardData = insertCardSchema.parse(req.body);\n      const card = await storage.createCard(cardData);\n      res.json(card);\n    } catch (error) {\n      console.error(\"Error creating card:\", error);\n      res.status(500).json({ message: \"Failed to create card\" });\n    }\n  });\n\n  app.patch('/api/admin/cards/:id', isAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const cardData = insertCardSchema.partial().parse(req.body);\n      const card = await storage.updateCard(id, cardData);\n      res.json(card);\n    } catch (error) {\n      console.error(\"Error updating card:\", error);\n      res.status(500).json({ message: \"Failed to update card\" });\n    }\n  });\n\n  app.patch('/api/admin/cards/:id/stock', isAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { stock } = req.body;\n      \n      if (typeof stock !== 'number' || stock < 0) {\n        return res.status(400).json({ message: \"Invalid stock amount\" });\n      }\n      \n      await storage.updateCardStock(id, stock);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error updating card stock:\", error);\n      res.status(500).json({ message: \"Failed to update card stock\" });\n    }\n  });\n\n  app.delete('/api/admin/cards/:id', isAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteCard(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting card:\", error);\n      res.status(500).json({ message: \"Failed to delete card\" });\n    }\n  });\n\n  // Pull rate management routes\n  app.get('/api/admin/pull-rates', isAdmin, async (req: any, res) => {\n    try {\n      const pullRates = await storage.getAllPullRates();\n      res.json(pullRates);\n    } catch (error) {\n      console.error(\"Error fetching pull rates:\", error);\n      res.status(500).json({ message: \"Failed to fetch pull rates\" });\n    }\n  });\n\n  app.get('/api/admin/pull-rates/:packType', isAdmin, async (req: any, res) => {\n    try {\n      const { packType } = req.params;\n      const pullRates = await storage.getPackPullRates(packType);\n      res.json(pullRates);\n    } catch (error) {\n      console.error(\"Error fetching pull rates:\", error);\n      res.status(500).json({ message: \"Failed to fetch pull rates\" });\n    }\n  });\n\n  app.post('/api/admin/pull-rates/:packType', isAdmin, async (req: any, res) => {\n    try {\n      const { packType } = req.params;\n      const { rates } = req.body;\n      const userId = req.user.id;\n\n      // Validate rates array\n      if (!Array.isArray(rates)) {\n        return res.status(400).json({ message: \"Rates must be an array\" });\n      }\n\n      // Validate each rate\n      for (const rate of rates) {\n        const probability = parseInt(rate.probability);\n        if (isNaN(probability) || probability < 0 || probability > 100) {\n          return res.status(400).json({ message: `Invalid probability for tier ${rate.cardTier}` });\n        }\n      }\n\n      // Check that probabilities sum to 100%\n      const totalProbability = rates.reduce((sum, rate) => sum + parseInt(rate.probability), 0);\n      if (totalProbability !== 100) {\n        return res.status(400).json({ \n          message: `Probabilities must sum to 100% (currently ${totalProbability}%)` \n        });\n      }\n\n      await storage.setPackPullRates(packType, rates, userId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error updating pull rates:\", error);\n      res.status(500).json({ message: \"Failed to update pull rates\" });\n    }\n  });\n\n  // Virtual library admin routes (separate card pool from mystery packs)\n  app.get('/api/admin/virtual-library', isAdmin, async (req: any, res) => {\n    try {\n      const virtualLibraryCards = await storage.getVirtualLibraryCards();\n      res.json(virtualLibraryCards);\n    } catch (error) {\n      console.error(\"Error fetching virtual library cards:\", error);\n      res.status(500).json({ message: \"Failed to fetch virtual library cards\" });\n    }\n  });\n\n  app.post('/api/admin/virtual-library', isAdmin, async (req: any, res) => {\n    try {\n      const cardData = insertVirtualLibrarySchema.parse(req.body);\n      const virtualLibraryCard = await storage.createVirtualLibraryCard(cardData);\n      res.json(virtualLibraryCard);\n    } catch (error) {\n      console.error(\"Error creating virtual library card:\", error);\n      res.status(500).json({ message: \"Failed to create virtual library card\" });\n    }\n  });\n\n  app.patch('/api/admin/virtual-library/:id', isAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const cardData = insertVirtualLibrarySchema.partial().parse(req.body);\n      const virtualLibraryCard = await storage.updateVirtualLibraryCard(id, cardData);\n      res.json(virtualLibraryCard);\n    } catch (error) {\n      console.error(\"Error updating virtual library card:\", error);\n      res.status(500).json({ message: \"Failed to update virtual library card\" });\n    }\n  });\n\n  app.delete('/api/admin/virtual-library/:id', isAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteVirtualLibraryCard(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting virtual library card:\", error);\n      res.status(500).json({ message: \"Failed to delete virtual library card\" });\n    }\n  });\n\n  // Virtual pack admin routes\n  app.get('/api/admin/virtual-packs', isAdmin, async (req: any, res) => {\n    try {\n      const virtualPacks = await storage.getVirtualPacks();\n      console.log(`Fetching virtual packs: found ${virtualPacks.length} active packs`);\n      res.json(virtualPacks);\n    } catch (error) {\n      console.error(\"Error fetching virtual packs:\", error);\n      res.status(500).json({ message: \"Failed to fetch virtual packs\" });\n    }\n  });\n\n  app.post('/api/admin/virtual-packs', isAdmin, async (req: any, res) => {\n    try {\n      const packData = insertVirtualPackSchema.parse(req.body);\n      const virtualPack = await storage.createVirtualPack(packData);\n      res.json(virtualPack);\n    } catch (error) {\n      console.error(\"Error creating virtual pack:\", error);\n      res.status(500).json({ message: \"Failed to create virtual pack\" });\n    }\n  });\n\n  app.patch('/api/admin/virtual-packs/:id', isAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const packData = insertVirtualPackSchema.partial().parse(req.body);\n      const virtualPack = await storage.updateVirtualPack(id, packData);\n      res.json(virtualPack);\n    } catch (error) {\n      console.error(\"Error updating virtual pack:\", error);\n      res.status(500).json({ message: \"Failed to update virtual pack\" });\n    }\n  });\n\n  app.delete('/api/admin/virtual-packs/:id', isAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      console.log(`Deleting virtual pack: ${id}`);\n      await storage.deleteVirtualPack(id);\n      console.log(`Virtual pack ${id} marked as inactive`);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting virtual pack:\", error);\n      res.status(500).json({ message: \"Failed to delete virtual pack\" });\n    }\n  });\n\n  app.get('/api/admin/virtual-packs/:id/cards', isAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const packCards = await storage.getVirtualPackCards(id);\n      res.json(packCards);\n    } catch (error) {\n      console.error(\"Error fetching virtual pack cards:\", error);\n      res.status(500).json({ message: \"Failed to fetch virtual pack cards\" });\n    }\n  });\n\n  app.post('/api/admin/virtual-packs/:id/cards', isAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { cardIds, weights } = req.body;\n      \n      if (!Array.isArray(cardIds) || !Array.isArray(weights)) {\n        return res.status(400).json({ message: \"cardIds and weights must be arrays\" });\n      }\n      \n      if (cardIds.length !== weights.length) {\n        return res.status(400).json({ message: \"cardIds and weights arrays must have same length\" });\n      }\n      \n      await storage.setVirtualPackCards(id, cardIds, weights);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error setting virtual pack cards:\", error);\n      res.status(500).json({ message: \"Failed to set virtual pack cards\" });\n    }\n  });\n\n  // User management routes\n  app.post('/api/admin/users/:id/ban', isAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      await storage.banUser(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error banning user:\", error);\n      res.status(500).json({ message: \"Failed to ban user\" });\n    }\n  });\n\n  app.patch('/api/admin/users/:id/credits', isAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { credits } = req.body;\n\n      // Validate credits amount\n      if (typeof credits !== 'number' || credits < 0) {\n        return res.status(400).json({ message: \"Invalid credits amount\" });\n      }\n\n      await storage.setUserCredits(id, credits);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error updating user credits:\", error);\n      res.status(500).json({ message: \"Failed to update user credits\" });\n    }\n  });\n\n  app.get('/api/admin/users/:id/transactions', isAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const transactions = await storage.getUserTransactions(id);\n      res.json(transactions);\n    } catch (error) {\n      console.error(\"Error fetching user transactions:\", error);\n      res.status(500).json({ message: \"Failed to fetch user transactions\" });\n    }\n  });\n\n  // Public route for users to view pack cards\n  app.get('/api/virtual-packs/:id/cards', async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const packCards = await storage.getVirtualPackCards(id);\n      console.log(\"Returning pack cards for pack\", id, \":\", packCards);\n      res.json(packCards);\n    } catch (error) {\n      console.error(\"Error fetching virtual pack cards:\", error);\n      res.status(500).json({ message: \"Failed to fetch virtual pack cards\" });\n    }\n  });\n\n  // Virtual pack pull rate routes\n  app.get('/api/admin/virtual-packs/:id/pull-rates', isAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const pullRates = await storage.getVirtualPackPullRates(id);\n      res.json(pullRates);\n    } catch (error) {\n      console.error(\"Error fetching virtual pack pull rates:\", error);\n      res.status(500).json({ message: \"Failed to fetch virtual pack pull rates\" });\n    }\n  });\n\n  app.post('/api/admin/virtual-packs/:id/pull-rates', isAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { rates } = req.body;\n      \n      if (!Array.isArray(rates)) {\n        return res.status(400).json({ message: \"rates must be an array\" });\n      }\n      \n      // Validate rates format\n      for (const rate of rates) {\n        if (!rate.cardTier || typeof rate.probability !== 'number') {\n          return res.status(400).json({ message: \"Each rate must have cardTier and probability\" });\n        }\n      }\n      \n      const userId = req.user.id;\n      await storage.setVirtualPackPullRates(id, rates, userId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error setting virtual pack pull rates:\", error);\n      res.status(500).json({ message: \"Failed to set virtual pack pull rates\" });\n    }\n  });\n\n  // Admin system settings routes\n  app.get('/api/admin/system-settings', isAdmin, async (req: any, res) => {\n    try {\n      const settings = await storage.getAllSystemSettings();\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error fetching system settings:\", error);\n      res.status(500).json({ message: \"Failed to fetch system settings\" });\n    }\n  });\n\n  app.post('/api/admin/system-settings/:settingKey', isAdmin, async (req: any, res) => {\n    try {\n      const { settingKey } = req.params;\n      const { settingValue } = req.body;\n      const userId = req.user.id;\n      \n      if (typeof settingValue !== 'boolean') {\n        return res.status(400).json({ message: \"settingValue must be a boolean\" });\n      }\n      \n      const setting = await storage.updateSystemSetting(settingKey, settingValue, userId);\n      res.json(setting);\n    } catch (error) {\n      console.error(\"Error updating system setting:\", error);\n      res.status(500).json({ message: \"Failed to update system setting\" });\n    }\n  });\n\n  // Cards and packs routes\n  app.get('/api/cards', async (req, res) => {\n    try {\n      const packType = req.query.packType as string;\n      const cards = await storage.getCards(packType);\n      res.json(cards);\n    } catch (error) {\n      console.error(\"Error fetching cards:\", error);\n      res.status(500).json({ message: \"Failed to fetch cards\" });\n    }\n  });\n\n\n  app.get('/api/packs/:id/odds', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const odds = await storage.getPackOdds(id);\n      res.json(odds);\n    } catch (error) {\n      console.error(\"Error fetching pack odds:\", error);\n      res.status(500).json({ message: \"Failed to fetch pack odds\" });\n    }\n  });\n\n  // Notifications routes\n  app.get('/api/notifications', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const notifications = await storage.getUserNotifications(userId);\n      res.json(notifications);\n    } catch (error) {\n      console.error(\"Error fetching notifications:\", error);\n      res.status(500).json({ message: \"Failed to fetch notifications\" });\n    }\n  });\n\n  app.patch('/api/notifications/:id/read', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.markNotificationRead(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error marking notification read:\", error);\n      res.status(500).json({ message: \"Failed to mark notification read\" });\n    }\n  });\n\n  // Pack routes\n  app.get('/api/packs', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const userPacks = await storage.getUserPacks(userId);\n      res.json(userPacks);\n    } catch (error) {\n      console.error(\"Error fetching packs:\", error);\n      res.status(500).json({ message: \"Failed to fetch packs\" });\n    }\n  });\n\n  // Virtual pack routes\n  app.get('/api/virtual-packs', async (req, res) => {\n    try {\n      const virtualPacks = await storage.getActiveVirtualPacks();\n      res.json(virtualPacks);\n    } catch (error) {\n      console.error(\"Error fetching virtual packs:\", error);\n      res.status(500).json({ message: \"Failed to fetch virtual packs\" });\n    }\n  });\n\n  app.post('/api/virtual-packs/:id/open', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { id } = req.params;\n\n      const result = await storage.openVirtualPack(id, userId);\n      \n      // Ensure market values are properly formatted\n      const formattedResult = {\n        ...result,\n        cards: result.cards.map(userCard => ({\n          id: userCard.card.id,\n          name: userCard.card.name,\n          tier: userCard.card.tier,\n          imageUrl: userCard.card.imageUrl,\n          marketValue: userCard.card.marketValue ? userCard.card.marketValue.toString() : \"0.00\",\n          packType: userCard.card.packType || 'virtual'\n        }))\n      };\n      \n      res.json({ \n        success: true,\n        ...formattedResult\n      });\n    } catch (error) {\n      console.error(\"Error opening virtual pack:\", error);\n      if (error instanceof Error) {\n        res.status(400).json({ message: error.message });\n      } else {\n        res.status(500).json({ message: \"Failed to open virtual pack\" });\n      }\n    }\n  });\n\n  app.post('/api/packs/open/:packId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { packId } = req.params;\n\n      const packResult = await storage.openUserPack(packId, userId);\n      \n      res.json({ \n        success: true,\n        ...packResult\n      });\n\n    } catch (error: any) {\n      console.error(\"Error opening pack:\", error);\n      res.status(500).json({ message: error.message || \"Failed to open pack\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\n// Simplified game simulation logic\nasync function simulateGame(gameType: string, betAmount: number): Promise<GameResult> {\n  if (gameType === 'plinko') {\n    // For Plinko, simulate the bucket the ball would land in\n    // This matches the visual Plinko layout: [Masterball, Ultraball, Greatball, Pokeball, Pokeball, Pokeball, Greatball, Ultraball, Masterball]\n    const plinkoOutcomes = [\"masterball\", \"ultraball\", \"greatball\", \"pokeball\", \"pokeball\", \"pokeball\", \"greatball\", \"ultraball\", \"masterball\"];\n    \n    // Realistic physics-based distribution (center buckets more likely)\n    const weights = [0.5, 4.5, 10, 20, 30, 20, 10, 4.5, 0.5]; // Matches bell curve distribution\n    const totalWeight = weights.reduce((sum, weight) => sum + weight, 0);\n    \n    let random = Math.random() * totalWeight;\n    let selectedIndex = 0;\n    \n    for (let i = 0; i < weights.length; i++) {\n      random -= weights[i];\n      if (random <= 0) {\n        selectedIndex = i;\n        break;\n      }\n    }\n    \n    const packType = plinkoOutcomes[selectedIndex];\n    \n    return {\n      cardId: '', // Not needed for Plinko\n      tier: packType, // This is now the pack type directly\n      gameType,\n    };\n  }\n\n  if (gameType === 'wheel') {\n    // For wheel game, use pokeball pack system like plinko\n    // Wheel odds: Pokeball 61%, Greatball 22%, Ultraball 14%, Masterball 2.8%\n    const random = Math.random();\n    let tier: string;\n    \n    if (random < 0.028) tier = 'masterball';\n    else if (random < 0.168) tier = 'ultraball'; // 0.028 + 0.14\n    else if (random < 0.388) tier = 'greatball'; // 0.168 + 0.22\n    else tier = 'pokeball'; // remaining 61.2%\n    \n    return {\n      cardId: '', // Not needed for wheel\n      tier: tier, // Pack type\n      gameType,\n    };\n  }\n\n  // For other games, use the old card-based logic\n  const cards = await storage.getCards('BNW');\n  \n  if (cards.length === 0) {\n    throw new Error('No cards available');\n  }\n\n  // Simple tier selection for non-Plinko games using new 7-tier system\n  const random = Math.random();\n  let tier: string;\n  \n  if (random < 0.0001) tier = 'SSS';\n  else if (random < 0.0015) tier = 'SS';\n  else if (random < 0.0030) tier = 'S';\n  else if (random < 0.0210) tier = 'A';\n  else if (random < 0.1010) tier = 'B';\n  else if (random < 0.2510) tier = 'C';\n  else tier = 'D';\n  \n  const tierCards = cards.filter(card => card.tier === tier && (card.stock || 0) > 0);\n  \n  if (tierCards.length === 0) {\n    const commonCards = cards.filter(card => card.tier === 'D' && (card.stock || 0) > 0);\n    if (commonCards.length === 0) {\n      throw new Error('No cards in stock');\n    }\n    const selectedCard = commonCards[Math.floor(Math.random() * commonCards.length)];\n    return {\n      cardId: selectedCard.id,\n      tier: 'D',\n      gameType,\n    };\n  }\n\n  const selectedCard = tierCards[Math.floor(Math.random() * tierCards.length)];\n  await storage.updateCardStock(selectedCard.id, (selectedCard.stock || 0) - 1);\n\n  return {\n    cardId: selectedCard.id,\n    tier: selectedCard.tier,\n    gameType,\n  };\n}\n","size_bytes":30571},"server/storage.ts":{"content":"import {\n  users,\n  cards,\n  packs,\n  packOdds,\n  virtualLibrary,\n  virtualPacks,\n  virtualPackCards,\n  virtualPackPullRates,\n  userCards,\n  userPacks,\n  globalFeed,\n  transactions,\n  gameSessions,\n  notifications,\n  shippingRequests,\n  gameSettings,\n  systemSettings,\n  pullRates,\n  type User,\n  type UpsertUser,\n  type Card,\n  type Pack,\n  type PackOdds,\n  type VirtualLibraryCard,\n  type VirtualPack,\n  type VirtualPackCard,\n  type VirtualPackPullRate,\n  type UserCard,\n  type UserPack,\n  type GlobalFeed,\n  type Transaction,\n  type GameSession,\n  type Notification,\n  type ShippingRequest,\n  type GameSetting,\n  type InsertCard,\n  type InsertPack,\n  type InsertVirtualLibraryCard,\n  type InsertVirtualPack,\n  type InsertVirtualPackCard,\n  type InsertVirtualPackPullRate,\n  type InsertUserCard,\n  type InsertUserPack,\n  type InsertTransaction,\n  type InsertGameSession,\n  type InsertNotification,\n  type InsertShippingRequest,\n  type InsertGameSetting,\n  type SystemSetting,\n  type InsertSystemSetting,\n  type UserCardWithCard,\n  type GlobalFeedWithDetails,\n  type GameResult,\n  type VirtualPackOpenResult,\n  type PullRate,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, sql, inArray } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: Omit<UpsertUser, 'id'>): Promise<User>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Card operations\n  getCards(packType?: string): Promise<Card[]>;\n  getCard(id: string): Promise<Card | undefined>;\n  createCard(card: InsertCard): Promise<Card>;\n  updateCard(id: string, card: Partial<InsertCard>): Promise<Card>;\n  updateCardStock(id: string, stock: number): Promise<void>;\n  deleteCard(id: string): Promise<void>;\n  \n  // Pack operations\n  getPacks(): Promise<Pack[]>;\n  getActivePacks(): Promise<Pack[]>;\n  createPack(pack: InsertPack): Promise<Pack>;\n  \n  // Pack odds operations\n  getPackOdds(packId: string): Promise<PackOdds[]>;\n  setPackOdds(packId: string, odds: { tier: string; probability: string }[]): Promise<void>;\n  \n  // Virtual library operations (separate from mystery pack cards)\n  getVirtualLibraryCards(): Promise<VirtualLibraryCard[]>;\n  createVirtualLibraryCard(card: InsertVirtualLibraryCard): Promise<VirtualLibraryCard>;\n  updateVirtualLibraryCard(id: string, card: Partial<InsertVirtualLibraryCard>): Promise<VirtualLibraryCard>;\n  deleteVirtualLibraryCard(id: string): Promise<void>;\n  \n  // Virtual pack operations\n  getVirtualPacks(): Promise<VirtualPack[]>;\n  getActiveVirtualPacks(): Promise<VirtualPack[]>;\n  createVirtualPack(pack: InsertVirtualPack): Promise<VirtualPack>;\n  updateVirtualPack(id: string, pack: Partial<InsertVirtualPack>): Promise<VirtualPack>;\n  deleteVirtualPack(id: string): Promise<void>;\n  \n  // Virtual pack card pool operations (using virtual library cards)\n  getVirtualPackCards(virtualPackId: string): Promise<VirtualPackCard[]>;\n  setVirtualPackCards(virtualPackId: string, cardIds: string[], weights: number[]): Promise<void>;\n  \n  // Virtual pack pull rate operations (tier-based probabilities)\n  getVirtualPackPullRates(virtualPackId: string): Promise<VirtualPackPullRate[]>;\n  setVirtualPackPullRates(virtualPackId: string, rates: { cardTier: string; probability: number }[], updatedBy?: string): Promise<void>;\n  \n  openVirtualPack(virtualPackId: string, userId: string): Promise<VirtualPackOpenResult>;\n  \n  // Vault operations\n  getUserCards(userId: string): Promise<UserCardWithCard[]>;\n  addUserCard(userCard: InsertUserCard): Promise<UserCard>;\n  refundCards(cardIds: string[], userId: string): Promise<void>;\n  \n  // User pack operations\n  getUserPacks(userId: string): Promise<UserPack[]>;\n  addUserPack(userPack: InsertUserPack): Promise<UserPack>;\n  openUserPack(packId: string, userId: string): Promise<PackOpenResult>;\n  \n  // Global feed operations\n  getGlobalFeed(limit?: number): Promise<GlobalFeedWithDetails[]>;\n  addGlobalFeedEntry(entry: { userId: string; cardId: string; tier: string; gameType: string }): Promise<void>;\n  \n  // Transaction operations\n  addTransaction(transaction: InsertTransaction): Promise<Transaction>;\n  getUserTransactions(userId: string): Promise<Transaction[]>;\n  \n  // Game session operations (for crash recovery)\n  createGameSession(session: InsertGameSession): Promise<GameSession>;\n  getGameSession(id: string): Promise<GameSession | undefined>;\n  updateGameSession(id: string, result: GameResult, status: string): Promise<void>;\n  \n  // Credit operations\n  updateUserCredits(userId: string, amount: string): Promise<void>;\n  deductUserCredits(userId: string, amount: string): Promise<boolean>;\n  \n  // Notification operations\n  getUserNotifications(userId: string): Promise<Notification[]>;\n  addNotification(notification: InsertNotification): Promise<Notification>;\n  markNotificationRead(id: string): Promise<void>;\n  \n  // Shipping operations\n  createShippingRequest(request: InsertShippingRequest): Promise<ShippingRequest>;\n  getUserShippingRequests(userId: string): Promise<ShippingRequest[]>;\n  updateShippingStatus(id: string, status: string, trackingNumber?: string): Promise<void>;\n  \n  // Admin operations\n  getAllUsers(): Promise<User[]>;\n  banUser(userId: string): Promise<void>;\n  suspendUser(userId: string): Promise<void>;\n  setUserCredits(userId: string, credits: number): Promise<void>;\n  getSystemStats(): Promise<{ totalUsers: number; totalRevenue: string; totalCards: number }>;\n  \n  // Game settings operations\n  getGameSetting(gameType: string): Promise<GameSetting | undefined>;\n  updateGameSetting(gameType: string, price: string, updatedBy?: string): Promise<GameSetting>;\n  \n  // System settings operations\n  getSystemSetting(settingKey: string): Promise<SystemSetting | undefined>;\n  updateSystemSetting(settingKey: string, settingValue: boolean, updatedBy?: string): Promise<SystemSetting>;\n  getAllSystemSettings(): Promise<SystemSetting[]>;\n  \n  // Pull rate operations\n  getPackPullRates(packType: string): Promise<PullRate[]>;\n  setPackPullRates(packType: string, rates: { cardTier: string; probability: number }[], updatedBy?: string): Promise<void>;\n  getAllPullRates(): Promise<PullRate[]>;\n}\n\ninterface PackOpenResult {\n  userCard: UserCard;\n  packCards: Array<{\n    id: string;\n    name: string;\n    tier: string;\n    imageUrl?: string;\n    marketValue: string;\n    isHit: boolean;\n    position: number;\n  }>;\n  hitCardPosition: number;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user;\n  }\n\n  async createUser(userData: Omit<UpsertUser, 'id'>): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values({\n        ...userData,\n        credits: \"50.00\", // Give new users 50 credits\n      })\n      .returning();\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values({\n        ...userData,\n        credits: \"50.00\", // Give new users 50 credits for testing\n      })\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Card operations\n  async getCards(packType?: string): Promise<Card[]> {\n    if (packType) {\n      return await db.select().from(cards).where(and(eq(cards.packType, packType), eq(cards.isActive, true)));\n    }\n    return await db.select().from(cards).where(eq(cards.isActive, true));\n  }\n\n  async getCard(id: string): Promise<Card | undefined> {\n    const [card] = await db.select().from(cards).where(eq(cards.id, id));\n    return card;\n  }\n\n  async createCard(card: InsertCard): Promise<Card> {\n    const [newCard] = await db.insert(cards).values(card).returning();\n    return newCard;\n  }\n\n  async updateCard(id: string, cardData: Partial<InsertCard>): Promise<Card> {\n    const [updatedCard] = await db.update(cards)\n      .set({ ...cardData })\n      .where(eq(cards.id, id))\n      .returning();\n    return updatedCard;\n  }\n\n  async updateCardStock(id: string, stock: number): Promise<void> {\n    await db.update(cards).set({ stock }).where(eq(cards.id, id));\n  }\n\n  async deleteCard(id: string): Promise<void> {\n    await db.update(cards).set({ isActive: false }).where(eq(cards.id, id));\n  }\n\n  // Pack operations\n  async getPacks(): Promise<Pack[]> {\n    return await db.select().from(packs);\n  }\n\n  async getActivePacks(): Promise<Pack[]> {\n    return await db.select().from(packs).where(eq(packs.isActive, true));\n  }\n\n  async createPack(pack: InsertPack): Promise<Pack> {\n    const [newPack] = await db.insert(packs).values(pack).returning();\n    return newPack;\n  }\n\n  // Pack odds operations\n  async getPackOdds(packId: string): Promise<PackOdds[]> {\n    return await db.select().from(packOdds).where(eq(packOdds.packId, packId));\n  }\n\n  async setPackOdds(packId: string, odds: { tier: string; probability: string }[]): Promise<void> {\n    // Delete existing odds\n    await db.delete(packOdds).where(eq(packOdds.packId, packId));\n    \n    // Insert new odds\n    await db.insert(packOdds).values(\n      odds.map(odd => ({\n        packId,\n        tier: odd.tier,\n        probability: odd.probability,\n      }))\n    );\n  }\n\n  // Virtual pack operations\n  // Virtual library methods\n  async getVirtualLibraryCards(): Promise<VirtualLibraryCard[]> {\n    return await db.select().from(virtualLibrary).where(eq(virtualLibrary.isActive, true));\n  }\n\n  async createVirtualLibraryCard(card: InsertVirtualLibraryCard): Promise<VirtualLibraryCard> {\n    const [newCard] = await db.insert(virtualLibrary).values(card).returning();\n    return newCard;\n  }\n\n  async updateVirtualLibraryCard(id: string, card: Partial<InsertVirtualLibraryCard>): Promise<VirtualLibraryCard> {\n    const [updatedCard] = await db.update(virtualLibrary)\n      .set(card)\n      .where(eq(virtualLibrary.id, id))\n      .returning();\n    return updatedCard;\n  }\n\n  async deleteVirtualLibraryCard(id: string): Promise<void> {\n    await db.update(virtualLibrary)\n      .set({ isActive: false })\n      .where(eq(virtualLibrary.id, id));\n  }\n\n  async getVirtualPacks(): Promise<VirtualPack[]> {\n    return await db.select().from(virtualPacks).where(eq(virtualPacks.isActive, true));\n  }\n\n  async getActiveVirtualPacks(): Promise<VirtualPack[]> {\n    return await db.select().from(virtualPacks).where(eq(virtualPacks.isActive, true));\n  }\n\n  async createVirtualPack(pack: InsertVirtualPack): Promise<VirtualPack> {\n    const [newPack] = await db.insert(virtualPacks).values(pack).returning();\n    return newPack;\n  }\n\n  async updateVirtualPack(id: string, pack: Partial<InsertVirtualPack>): Promise<VirtualPack> {\n    const [updatedPack] = await db.update(virtualPacks).set(pack).where(eq(virtualPacks.id, id)).returning();\n    return updatedPack;\n  }\n\n  async deleteVirtualPack(id: string): Promise<void> {\n    await db.update(virtualPacks).set({ isActive: false }).where(eq(virtualPacks.id, id));\n  }\n\n  // Virtual pack card pool operations\n  async getVirtualPackCards(virtualPackId: string): Promise<VirtualPackCard[]> {\n    return await db.select().from(virtualPackCards).where(and(eq(virtualPackCards.virtualPackId, virtualPackId), eq(virtualPackCards.isActive, true)));\n  }\n\n  async setVirtualPackCards(virtualPackId: string, cardIds: string[], weights: number[]): Promise<void> {\n    await db.transaction(async (tx) => {\n      // Remove existing card pool\n      await tx.update(virtualPackCards).set({ isActive: false }).where(eq(virtualPackCards.virtualPackId, virtualPackId));\n      \n      // Add new card pool using regular cards\n      const newCards = cardIds.map((cardId, index) => ({\n        virtualPackId,\n        cardId: cardId,\n        weight: weights[index] || 1,\n      }));\n      \n      if (newCards.length > 0) {\n        await tx.insert(virtualPackCards).values(newCards);\n      }\n    });\n  }\n\n  async getVirtualPackPullRates(virtualPackId: string): Promise<VirtualPackPullRate[]> {\n    return await db.select()\n      .from(virtualPackPullRates)\n      .where(eq(virtualPackPullRates.virtualPackId, virtualPackId));\n  }\n\n  async setVirtualPackPullRates(virtualPackId: string, rates: { cardTier: string; probability: number }[], updatedBy?: string): Promise<void> {\n    await db.transaction(async (tx) => {\n      // Remove existing pull rates for this pack\n      await tx.delete(virtualPackPullRates).where(eq(virtualPackPullRates.virtualPackId, virtualPackId));\n      \n      // Add new pull rates\n      const newRates = rates.map(rate => ({\n        virtualPackId,\n        cardTier: rate.cardTier,\n        probability: rate.probability,\n        updatedBy: updatedBy || 'system',\n      }));\n      \n      if (newRates.length > 0) {\n        await tx.insert(virtualPackPullRates).values(newRates);\n      }\n    });\n  }\n\n  async openVirtualPack(virtualPackId: string, userId: string): Promise<VirtualPackOpenResult> {\n    return await db.transaction(async (tx) => {\n      // Get virtual pack info\n      const [virtualPack] = await tx.select().from(virtualPacks).where(eq(virtualPacks.id, virtualPackId));\n      if (!virtualPack) {\n        throw new Error('Virtual pack not found');\n      }\n\n      // Get virtual pack pull rates (tier-based probabilities)\n      const pullRates = await tx.select()\n        .from(virtualPackPullRates)\n        .where(eq(virtualPackPullRates.virtualPackId, virtualPackId));\n\n      if (pullRates.length === 0) {\n        throw new Error('No pull rates configured for this virtual pack');\n      }\n\n      // Get pack-specific cards assigned through manage content\n      const packCards = await tx\n        .select({\n          card: cards,\n          weight: virtualPackCards.weight,\n        })\n        .from(virtualPackCards)\n        .innerJoin(cards, eq(virtualPackCards.cardId, cards.id))\n        .where(and(\n          eq(virtualPackCards.virtualPackId, virtualPackId),\n          eq(virtualPackCards.isActive, true),\n          eq(cards.isActive, true)\n        ));\n\n      if (packCards.length === 0) {\n        throw new Error('No cards assigned to this virtual pack. Please use Manage Content to assign cards.');\n      }\n\n      // Group pack-specific cards by tier\n      const cardsByTier = packCards.reduce((acc, packCard) => {\n        const card = packCard.card;\n        if (card.tier) {\n          if (!acc[card.tier]) acc[card.tier] = [];\n          acc[card.tier].push(card);\n        }\n        return acc;\n      }, {} as Record<string, any[]>);\n\n      // Deduct credits\n      const creditCost = parseFloat(virtualPack.price);\n      const user = await tx.select().from(users).where(eq(users.id, userId));\n      if (!user[0] || parseFloat(user[0].credits || '0') < creditCost) {\n        throw new Error('Insufficient credits');\n      }\n\n      await tx.update(users).set({\n        credits: sql`${users.credits} - ${creditCost}`,\n        totalSpent: sql`${users.totalSpent} + ${creditCost}`,\n      }).where(eq(users.id, userId));\n\n      // Generate cards using tier-based probabilities\n      const pulledCards: UserCardWithCard[] = [];\n      \n      // First, add 7 guaranteed D-tier \"Random Commons\" cards\n      const dTierCards = cardsByTier['D'] || [];\n      if (dTierCards.length > 0) {\n        for (let i = 0; i < 7; i++) {\n          const randomCard = dTierCards[Math.floor(Math.random() * dTierCards.length)];\n          if (randomCard) {\n            // Check if user already has this card (non-refunded)\n            const existingCard = await tx.select().from(userCards)\n              .where(and(\n                eq(userCards.userId, userId), \n                eq(userCards.cardId, randomCard.id),\n                eq(userCards.isRefunded, false)\n              ));\n            \n            let newUserCard;\n            if (existingCard.length > 0) {\n              // Update existing card quantity\n              [newUserCard] = await tx.update(userCards)\n                .set({ quantity: sql`${userCards.quantity} + 1` })\n                .where(and(\n                  eq(userCards.userId, userId), \n                  eq(userCards.cardId, randomCard.id),\n                  eq(userCards.isRefunded, false)\n                ))\n                .returning();\n            } else {\n              // Insert new card\n              [newUserCard] = await tx.insert(userCards).values({\n                userId,\n                cardId: randomCard.id,\n                pullValue: randomCard.marketValue,\n                quantity: 1,\n              }).returning();\n            }\n\n            // Decrease card stock when added to vault\n            await tx\n              .update(virtualLibrary)\n              .set({ stock: sql`${virtualLibrary.stock} - 1` })\n              .where(eq(virtualLibrary.id, randomCard.id));\n\n            pulledCards.push({\n              ...newUserCard,\n              card: randomCard,\n            });\n          }\n        }\n      }\n\n      // Then, generate 1 hit card based on pull rates\n      const selectedTier = this.selectTierByProbability(pullRates);\n      const tierCards = cardsByTier[selectedTier];\n      \n      if (tierCards && tierCards.length > 0) {\n        const randomCard = tierCards[Math.floor(Math.random() * tierCards.length)];\n        if (randomCard) {\n          // Check if user already has this card (non-refunded)\n          const existingCard = await tx.select().from(userCards)\n            .where(and(\n              eq(userCards.userId, userId), \n              eq(userCards.cardId, randomCard.id),\n              eq(userCards.isRefunded, false)\n            ));\n          \n          let newUserCard;\n          if (existingCard.length > 0) {\n            // Update existing card quantity\n            [newUserCard] = await tx.update(userCards)\n              .set({ quantity: sql`${userCards.quantity} + 1` })\n              .where(and(\n                eq(userCards.userId, userId), \n                eq(userCards.cardId, randomCard.id),\n                eq(userCards.isRefunded, false)\n              ))\n              .returning();\n          } else {\n            // Insert new card\n            [newUserCard] = await tx.insert(userCards).values({\n              userId,\n              cardId: randomCard.id,\n              pullValue: randomCard.marketValue,\n              quantity: 1,\n            }).returning();\n          }\n\n          // Decrease card stock when added to vault\n          await tx\n            .update(cards)\n            .set({ stock: sql`${cards.stock} - 1` })\n            .where(eq(cards.id, randomCard.id));\n\n          pulledCards.push({\n            ...newUserCard,\n            card: randomCard,\n          });\n\n          // Add to global feed for rare pulls (A tier and above)\n          if (['A', 'S', 'SS', 'SSS'].includes(selectedTier)) {\n            await tx.insert(globalFeed).values({\n              userId,\n              cardId: randomCard.id,\n              tier: selectedTier,\n              gameType: 'virtual-pack',\n            });\n          }\n        }\n      }\n\n      // Add transaction record\n      await tx.insert(transactions).values({\n        userId,\n        type: 'debit',\n        amount: virtualPack.price,\n        description: `Opened virtual pack: ${virtualPack.name}`,\n      });\n\n      return {\n        cards: pulledCards,\n        packName: virtualPack.name,\n      };\n    });\n  }\n\n  private selectCardByWeight(weightedCards: { card: Card | null; weight: number }[]): { card: Card; weight: number } | null {\n    const validCards = weightedCards.filter(item => item.card !== null) as { card: Card; weight: number }[];\n    if (validCards.length === 0) return null;\n\n    const totalWeight = validCards.reduce((sum, item) => sum + item.weight, 0);\n    const random = Math.random() * totalWeight;\n    \n    let currentWeight = 0;\n    for (const item of validCards) {\n      currentWeight += item.weight;\n      if (random <= currentWeight) {\n        return item;\n      }\n    }\n    \n    return validCards[validCards.length - 1];\n  }\n\n  private selectVirtualCardByWeight(weightedCards: { card: VirtualLibraryCard | null; weight: number }[]): { card: VirtualLibraryCard; weight: number } | null {\n    const validCards = weightedCards.filter(item => item.card !== null) as { card: VirtualLibraryCard; weight: number }[];\n    if (validCards.length === 0) return null;\n\n    const totalWeight = validCards.reduce((sum, item) => sum + item.weight, 0);\n    const random = Math.random() * totalWeight;\n    \n    let currentWeight = 0;\n    for (const item of validCards) {\n      currentWeight += item.weight;\n      if (random <= currentWeight) {\n        return item;\n      }\n    }\n    \n    return validCards[validCards.length - 1];\n  }\n\n  private selectTierByProbability(pullRates: VirtualPackPullRate[]): string {\n    const totalProbability = pullRates.reduce((sum, rate) => sum + rate.probability, 0);\n    const random = Math.random() * totalProbability;\n    \n    let currentProbability = 0;\n    for (const rate of pullRates) {\n      currentProbability += rate.probability;\n      if (random <= currentProbability) {\n        return rate.cardTier;\n      }\n    }\n    \n    // Fallback to D tier if something goes wrong\n    return 'D';\n  }\n\n  // Vault operations\n  async getUserCards(userId: string): Promise<UserCardWithCard[]> {\n    const result = await db\n      .select()\n      .from(userCards)\n      .leftJoin(cards, eq(userCards.cardId, cards.id))\n      .where(and(eq(userCards.userId, userId), eq(userCards.isRefunded, false), eq(userCards.isShipped, false)))\n      .orderBy(desc(userCards.pulledAt));\n\n    return result.map(row => ({\n      ...row.user_cards,\n      card: row.cards!,\n    }));\n  }\n\n  async addUserCard(userCard: InsertUserCard): Promise<UserCard> {\n    return await db.transaction(async (tx) => {\n      try {\n        // Insert user card into vault\n        await tx.insert(userCards).values({\n          ...userCard,\n          isRefunded: userCard.isRefunded ?? false,\n          isShipped: userCard.isShipped ?? false,\n        });\n        \n        // Decrease card stock when added to vault\n        if (userCard.cardId) {\n          await tx\n            .update(cards)\n            .set({ stock: sql`${cards.stock} - ${userCard.quantity || 1}` })\n            .where(eq(cards.id, userCard.cardId));\n        }\n        \n        // Fetch the most recent card for this user  \n        const [newUserCard] = await tx\n          .select()\n          .from(userCards)\n          .where(eq(userCards.userId, userCard.userId!))\n          .orderBy(desc(userCards.pulledAt))\n          .limit(1);\n        \n        if (!newUserCard) {\n          throw new Error('Failed to fetch inserted user card');\n        }\n        \n        return newUserCard;\n      } catch (error) {\n        console.error('Error adding user card:', error);\n        throw error;\n      }\n    });\n  }\n\n  async refundCards(cardIds: string[], userId: string): Promise<void> {\n    await db.transaction(async (tx) => {\n      // Get cards to refund with card details including current market value\n      const cardsToRefund = await tx\n        .select({\n          id: userCards.id,\n          cardId: userCards.cardId,\n          pullValue: userCards.pullValue,\n          quantity: userCards.quantity,\n          marketValue: cards.marketValue,\n        })\n        .from(userCards)\n        .leftJoin(cards, eq(userCards.cardId, cards.id))\n        .where(and(inArray(userCards.id, cardIds), eq(userCards.userId, userId)));\n\n      let totalRefund = 0;\n      for (const card of cardsToRefund) {\n        // Use 100% of current market value for refund (as per documentation)\n        const refundAmount = card.marketValue ? parseFloat(card.marketValue.toString()) : parseFloat(card.pullValue);\n        totalRefund += refundAmount;\n        \n        // Restore card stock when refunded\n        if (card.cardId) {\n          await tx\n            .update(cards)\n            .set({ stock: sql`${cards.stock} + ${card.quantity}` })\n            .where(eq(cards.id, card.cardId));\n        }\n      }\n\n      // Mark cards as refunded\n      await tx\n        .update(userCards)\n        .set({ isRefunded: true })\n        .where(and(inArray(userCards.id, cardIds), eq(userCards.userId, userId)));\n\n      // Add credits to user\n      await tx\n        .update(users)\n        .set({ \n          credits: sql`${users.credits} + ${totalRefund.toFixed(2)}` \n        })\n        .where(eq(users.id, userId));\n\n      // Create transaction record\n      await tx.insert(transactions).values({\n        userId,\n        type: 'refund',\n        amount: totalRefund.toFixed(2),\n        description: `Refunded ${cardsToRefund.length} cards`,\n      });\n    });\n  }\n\n  // User pack operations\n  async getUserPacks(userId: string): Promise<UserPack[]> {\n    return await db\n      .select()\n      .from(userPacks)\n      .where(and(eq(userPacks.userId, userId), eq(userPacks.isOpened, false)))\n      .orderBy(desc(userPacks.earnedAt));\n  }\n\n  async addUserPack(userPack: InsertUserPack): Promise<UserPack> {\n    const [newUserPack] = await db.insert(userPacks).values(userPack).returning();\n    return newUserPack;\n  }\n\n  async openUserPack(packId: string, userId: string): Promise<PackOpenResult> {\n    return await db.transaction(async (tx) => {\n      try {\n        // Get the pack to open with row locking\n        const [userPack] = await tx\n          .select()\n          .from(userPacks)\n          .where(and(\n            eq(userPacks.id, packId),\n            eq(userPacks.userId, userId),\n            eq(userPacks.isOpened, false)\n          ))\n          .for('update');\n\n        if (!userPack) {\n          throw new Error('Pack not found or already opened');\n        }\n\n      // Get pack pull rates for this pack type\n      const rates = await tx\n        .select()\n        .from(pullRates)\n        .where(and(eq(pullRates.packType, userPack.tier), eq(pullRates.isActive, true)))\n        .orderBy(pullRates.cardTier);\n\n      if (rates.length === 0) {\n        throw new Error('No pull rates configured for this pack type');\n      }\n\n      // Weighted random selection based on percentages\n      const random = Math.random() * 100; // 0-100\n      let cumulative = 0;\n      let selectedTier = rates[0].cardTier;\n\n      for (const rate of rates) {\n        cumulative += rate.probability;\n        if (random <= cumulative) {\n          selectedTier = rate.cardTier;\n          break;\n        }\n      }\n\n      const fullTierName = selectedTier;\n\n      // Get cards of the selected tier\n      const availableCards = await tx\n        .select()\n        .from(cards)\n        .where(and(\n          eq(cards.tier, fullTierName),\n          eq(cards.isActive, true),\n          sql`${cards.stock} > 0`\n        ));\n\n      if (availableCards.length === 0) {\n        throw new Error(`No available cards in tier ${fullTierName}`);\n      }\n\n      // Generate 8 D-tier cards + 1 hit card = 9 total cards\n      const packCards = [];\n      \n      // Get 8 random D-tier cards (guaranteed base cards)\n      const commonCards = await tx\n        .select()\n        .from(cards)\n        .where(and(\n          eq(cards.tier, 'D'),\n          eq(cards.isActive, true),\n          sql`${cards.stock} > 0`\n        ));\n      \n      if (commonCards.length === 0) {\n        throw new Error('No D-tier cards available');\n      }\n      \n      for (let i = 0; i < 8; i++) {\n        const randomCommon = commonCards[Math.floor(Math.random() * commonCards.length)];\n        packCards.push({\n          id: randomCommon.id,\n          name: randomCommon.name,\n          tier: randomCommon.tier,\n          imageUrl: randomCommon.imageUrl || undefined,\n          marketValue: randomCommon.marketValue,\n          isHit: false,\n          position: i\n        });\n      }\n      \n      // Select the hit card from available cards of selected tier\n      const hitCard = availableCards[Math.floor(Math.random() * availableCards.length)];\n      packCards.push({\n        id: hitCard.id,\n        name: hitCard.name,\n        tier: hitCard.tier,\n        imageUrl: hitCard.imageUrl || undefined,\n        marketValue: hitCard.marketValue,\n        isHit: true,\n        position: 8\n      });\n      \n      // Group common cards by cardId and count quantities\n      const cardQuantities = new Map<string, { card: any, count: number }>();\n      \n      // Count common cards by type\n      packCards.filter(c => !c.isHit).forEach(card => {\n        const key = card.id;\n        if (cardQuantities.has(key)) {\n          cardQuantities.get(key)!.count++;\n        } else {\n          cardQuantities.set(key, { card, count: 1 });\n        }\n      });\n      \n      // Add all cards to user vault\n      const userCardInserts = [];\n      \n      // Insert common cards with quantities\n      for (const { card, count } of Array.from(cardQuantities.values())) {\n        // Check if user already has this card with row-level locking\n        const [existingCard] = await tx\n          .select()\n          .from(userCards)\n          .where(and(\n            eq(userCards.userId, userId),\n            eq(userCards.cardId, card.id),\n            eq(userCards.isRefunded, false),\n            eq(userCards.isShipped, false)\n          ))\n          .for('update');\n        \n        if (existingCard) {\n          // Update quantity if card already exists\n          await tx\n            .update(userCards)\n            .set({ \n              quantity: sql`${userCards.quantity} + ${count}`,\n              pulledAt: sql`NOW()` // Update pulled time to latest\n            })\n            .where(eq(userCards.id, existingCard.id));\n          \n          // Reduce stock for existing card quantity update\n          await tx\n            .update(cards)\n            .set({ stock: sql`${cards.stock} - ${count}` })\n            .where(eq(cards.id, card.id));\n        } else {\n          // Insert new card with quantity\n          userCardInserts.push({\n            userId,\n            cardId: card.id,\n            pullValue: card.marketValue,\n            quantity: count,\n            isRefunded: false,\n            isShipped: false,\n          });\n        }\n      }\n      \n      // Add hit card with row-level locking\n      const [existingHitCard] = await tx\n        .select()\n        .from(userCards)\n        .where(and(\n          eq(userCards.userId, userId),\n          eq(userCards.cardId, hitCard.id),\n          eq(userCards.isRefunded, false),\n          eq(userCards.isShipped, false)\n        ))\n        .for('update');\n      \n      let newUserCard;\n      if (existingHitCard) {\n        // Update quantity if hit card already exists\n        const updatedCards = await tx\n          .update(userCards)\n          .set({ \n            quantity: sql`${userCards.quantity} + 1`,\n            pulledAt: sql`NOW()` // Update pulled time to latest\n          })\n          .where(eq(userCards.id, existingHitCard.id))\n          .returning();\n        newUserCard = updatedCards[0];\n        \n        // Reduce stock for existing hit card quantity update\n        await tx\n          .update(cards)\n          .set({ stock: sql`${cards.stock} - 1` })\n          .where(eq(cards.id, hitCard.id));\n      } else {\n        // Insert new hit card\n        userCardInserts.push({\n          userId,\n          cardId: hitCard.id,\n          pullValue: hitCard.marketValue,\n          quantity: 1,\n          isRefunded: false,\n          isShipped: false,\n        });\n      }\n      \n      // Insert all new cards at once\n      if (userCardInserts.length > 0) {\n        try {\n          const insertedCards = await tx.insert(userCards).values(userCardInserts).returning();\n          if (!newUserCard) {\n            newUserCard = insertedCards.find(c => c.cardId === hitCard.id) || insertedCards[0];\n          }\n          \n          // Reduce stock for all newly inserted cards\n          for (const userCardInsert of userCardInserts) {\n            await tx\n              .update(cards)\n              .set({ stock: sql`${cards.stock} - ${userCardInsert.quantity}` })\n              .where(eq(cards.id, userCardInsert.cardId!));\n          }\n        } catch (error) {\n          console.error('Failed to insert user cards:', error);\n          throw new Error('Failed to add cards to vault - please try again');\n        }\n      }\n\n      // Mark pack as opened\n      await tx\n        .update(userPacks)\n        .set({ isOpened: true, openedAt: new Date() })\n        .where(eq(userPacks.id, packId));\n\n      // Stock reduction is now handled above for all cards\n\n      // Add to global feed for all hit cards (C-tier and above)\n      if (['C', 'B', 'A', 'S', 'SS', 'SSS'].includes(hitCard.tier)) {\n        await tx.insert(globalFeed).values({\n          userId,\n          cardId: hitCard.id,\n          tier: hitCard.tier,\n          gameType: 'pack',\n        });\n      }\n\n      console.log(`Pack opened: Generated ${packCards.length} total cards (${packCards.filter(c => !c.isHit).length} commons + ${packCards.filter(c => c.isHit).length} hit)`);\n      \n      // Log stock changes for debugging\n      console.log(`Stock reduction summary:`);\n      \n      if (!newUserCard) {\n        throw new Error('Failed to create or retrieve user card');\n      }\n      \n      return {\n        userCard: newUserCard,\n        packCards: packCards,\n        hitCardPosition: 8\n      };\n      } catch (error) {\n        console.error('Pack opening transaction failed:', error);\n        // Re-throw the error to rollback the transaction\n        throw error;\n      }\n    });\n  }\n\n  // Global feed operations\n  async getGlobalFeed(limit = 500, minTier?: string): Promise<GlobalFeedWithDetails[]> {\n    // Define tier hierarchy for filtering (higher index = rarer tier)\n    const tierHierarchy = ['D', 'C', 'B', 'A', 'S', 'SS', 'SSS'];\n    \n    let tierFilter: string[];\n    if (minTier) {\n      const minIndex = tierHierarchy.indexOf(minTier);\n      if (minIndex >= 0) {\n        // Include all tiers from minTier and above\n        tierFilter = tierHierarchy.slice(minIndex);\n      } else {\n        // Invalid minTier, default to all non-D tiers\n        tierFilter = ['C', 'B', 'A', 'S', 'SS', 'SSS'];\n      }\n    } else {\n      // No filter, show all non-D tiers\n      tierFilter = ['C', 'B', 'A', 'S', 'SS', 'SSS'];\n    }\n\n    const result = await db\n      .select({\n        id: globalFeed.id,\n        userId: globalFeed.userId,\n        cardId: globalFeed.cardId,\n        tier: globalFeed.tier,\n        gameType: globalFeed.gameType,\n        createdAt: globalFeed.createdAt,\n        username: users.username,\n        email: users.email,\n        cardName: cards.name,\n        cardImageUrl: cards.imageUrl,\n      })\n      .from(globalFeed)\n      .leftJoin(users, eq(globalFeed.userId, users.id))\n      .leftJoin(cards, eq(globalFeed.cardId, cards.id))\n      .where(inArray(globalFeed.tier, tierFilter))\n      .orderBy(desc(globalFeed.createdAt))\n      .limit(limit);\n\n    return result.map(row => {\n      // Create a display name from username or email prefix\n      let displayName = row.username;\n      if (!displayName && row.email) {\n        // Extract username from email (everything before @)\n        displayName = row.email.split('@')[0];\n      }\n      displayName = displayName || 'Unknown';\n\n      return {\n        id: row.id,\n        userId: row.userId,\n        cardId: row.cardId,\n        tier: row.tier,\n        gameType: row.gameType,\n        createdAt: row.createdAt,\n        user: { username: displayName },\n        card: {\n          id: row.cardId,\n          name: row.cardName || 'Unknown Card',\n          imageUrl: row.cardImageUrl,\n        } as Card,\n      };\n    });\n  }\n\n  async addGlobalFeedEntry(entry: { userId: string; cardId: string; tier: string; gameType: string }): Promise<void> {\n    await db.insert(globalFeed).values(entry);\n  }\n\n  // Transaction operations\n  async addTransaction(transaction: InsertTransaction): Promise<Transaction> {\n    const [newTransaction] = await db.insert(transactions).values(transaction).returning();\n    return newTransaction;\n  }\n\n  async getUserTransactions(userId: string): Promise<Transaction[]> {\n    return await db\n      .select()\n      .from(transactions)\n      .where(eq(transactions.userId, userId))\n      .orderBy(desc(transactions.createdAt));\n  }\n\n  // Game session operations\n  async createGameSession(session: InsertGameSession): Promise<GameSession> {\n    const [newSession] = await db.insert(gameSessions).values(session).returning();\n    return newSession;\n  }\n\n  async getGameSession(id: string): Promise<GameSession | undefined> {\n    const [session] = await db.select().from(gameSessions).where(eq(gameSessions.id, id));\n    return session;\n  }\n\n  async updateGameSession(id: string, result: GameResult, status: string): Promise<void> {\n    await db\n      .update(gameSessions)\n      .set({ \n        result,\n        status,\n        completedAt: new Date(),\n      })\n      .where(eq(gameSessions.id, id));\n  }\n\n  // Credit operations\n  async updateUserCredits(userId: string, amount: string): Promise<void> {\n    await db\n      .update(users)\n      .set({ \n        credits: sql`${users.credits} + ${amount}`,\n        totalSpent: sql`${users.totalSpent} + ${amount}`,\n      })\n      .where(eq(users.id, userId));\n  }\n\n  async deductUserCredits(userId: string, amount: string): Promise<boolean> {\n    const result = await db\n      .update(users)\n      .set({ \n        credits: sql`${users.credits} - ${amount}` \n      })\n      .where(and(eq(users.id, userId), sql`${users.credits} >= ${amount}`))\n      .returning();\n\n    return result.length > 0;\n  }\n\n  // Notification operations\n  async getUserNotifications(userId: string): Promise<Notification[]> {\n    return await db\n      .select()\n      .from(notifications)\n      .where(eq(notifications.userId, userId))\n      .orderBy(desc(notifications.createdAt));\n  }\n\n  async addNotification(notification: InsertNotification): Promise<Notification> {\n    const [newNotification] = await db.insert(notifications).values(notification).returning();\n    return newNotification;\n  }\n\n  async markNotificationRead(id: string): Promise<void> {\n    await db.update(notifications).set({ isRead: true }).where(eq(notifications.id, id));\n  }\n\n  // Shipping operations\n  async createShippingRequest(request: InsertShippingRequest): Promise<ShippingRequest> {\n    const [newRequest] = await db.insert(shippingRequests).values(request).returning();\n    return newRequest;\n  }\n\n  async getUserShippingRequests(userId: string): Promise<ShippingRequest[]> {\n    return await db\n      .select()\n      .from(shippingRequests)\n      .where(eq(shippingRequests.userId, userId))\n      .orderBy(desc(shippingRequests.createdAt));\n  }\n\n  async updateShippingStatus(id: string, status: string, trackingNumber?: string): Promise<void> {\n    const updateData: any = { status };\n    if (trackingNumber) {\n      updateData.trackingNumber = trackingNumber;\n    }\n    if (status === 'shipped') {\n      updateData.shippedAt = new Date();\n    }\n    \n    await db.update(shippingRequests).set(updateData).where(eq(shippingRequests.id, id));\n  }\n\n  // Admin operations\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(desc(users.createdAt));\n  }\n\n  async banUser(userId: string): Promise<void> {\n    await db.update(users).set({ isBanned: true }).where(eq(users.id, userId));\n  }\n\n  async suspendUser(userId: string): Promise<void> {\n    await db.update(users).set({ isSuspended: true }).where(eq(users.id, userId));\n  }\n\n  async setUserCredits(userId: string, credits: number): Promise<void> {\n    await db.update(users).set({ credits: credits.toString() }).where(eq(users.id, userId));\n  }\n\n  async getSystemStats(): Promise<{ totalUsers: number; totalRevenue: string; totalCards: number }> {\n    const [userCount] = await db.select({ count: sql<number>`count(*)` }).from(users);\n    \n    // Only count actual payments (purchase transactions), not game spending\n    const [revenueSum] = await db.select({ \n      sum: sql<string>`coalesce(sum(${transactions.amount}), 0)` \n    }).from(transactions).where(eq(transactions.type, 'purchase'));\n    \n    const [cardCount] = await db.select({ count: sql<number>`count(*)` }).from(cards);\n\n    return {\n      totalUsers: userCount.count,\n      totalRevenue: revenueSum.sum || \"0\",\n      totalCards: cardCount.count,\n    };\n  }\n\n  // Game settings operations\n  async getGameSetting(gameType: string): Promise<GameSetting | undefined> {\n    const [setting] = await db.select().from(gameSettings).where(eq(gameSettings.gameType, gameType));\n    return setting;\n  }\n\n  async updateGameSetting(gameType: string, price: string, updatedBy?: string): Promise<GameSetting> {\n    const [updated] = await db\n      .update(gameSettings)\n      .set({ \n        price: price,\n        updatedAt: new Date(),\n        updatedBy: updatedBy\n      })\n      .where(eq(gameSettings.gameType, gameType))\n      .returning();\n    return updated;\n  }\n\n  // Pull rate operations\n  async getPackPullRates(packType: string): Promise<PullRate[]> {\n    return await db\n      .select()\n      .from(pullRates)\n      .where(and(eq(pullRates.packType, packType), eq(pullRates.isActive, true)))\n      .orderBy(pullRates.cardTier);\n  }\n\n  async getAllPullRates(): Promise<PullRate[]> {\n    return await db\n      .select()\n      .from(pullRates)\n      .where(eq(pullRates.isActive, true))\n      .orderBy(pullRates.packType, pullRates.cardTier);\n  }\n\n  async setPackPullRates(packType: string, rates: { cardTier: string; probability: number }[], updatedBy?: string): Promise<void> {\n    await db.transaction(async (tx) => {\n      // Deactivate existing rates for this pack type\n      await tx\n        .update(pullRates)\n        .set({ isActive: false })\n        .where(eq(pullRates.packType, packType));\n\n      // Insert new rates\n      if (rates.length > 0) {\n        await tx.insert(pullRates).values(\n          rates.map(rate => ({\n            packType,\n            cardTier: rate.cardTier,\n            probability: rate.probability,\n            isActive: true,\n            updatedBy: updatedBy\n          }))\n        );\n      }\n    });\n  }\n\n  // System settings operations\n  async getSystemSetting(settingKey: string): Promise<SystemSetting | undefined> {\n    const [setting] = await db.select().from(systemSettings).where(eq(systemSettings.settingKey, settingKey));\n    return setting;\n  }\n\n  async updateSystemSetting(settingKey: string, settingValue: boolean, updatedBy?: string): Promise<SystemSetting> {\n    const [updated] = await db\n      .insert(systemSettings)\n      .values({\n        settingKey,\n        settingValue,\n        updatedBy: updatedBy,\n        description: this.getSettingDescription(settingKey),\n      })\n      .onConflictDoUpdate({\n        target: systemSettings.settingKey,\n        set: {\n          settingValue: settingValue,\n          updatedAt: new Date(),\n          updatedBy: updatedBy,\n        },\n      })\n      .returning();\n    return updated;\n  }\n\n  async getAllSystemSettings(): Promise<SystemSetting[]> {\n    return await db.select().from(systemSettings).orderBy(systemSettings.settingKey);\n  }\n\n  private getSettingDescription(settingKey: string): string {\n    const descriptions: Record<string, string> = {\n      'maintenance_mode': 'When enabled, displays maintenance message to users and restricts access',\n      'new_registrations': 'Allow new users to register accounts',\n      'pack_openings': 'Allow users to open packs and earn cards',\n      'credit_purchases': 'Allow users to purchase credits',\n      'global_feed': 'Display the global activity feed to users',\n    };\n    return descriptions[settingKey] || 'Administrative setting';\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":44085},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport { relations } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  decimal,\n  integer,\n  boolean,\n  uuid,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (required for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: varchar(\"username\").unique(),\n  email: varchar(\"email\").unique(),\n  password: varchar(\"password\"), // Hashed password\n  phoneNumber: varchar(\"phone_number\"),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: varchar(\"role\", { length: 20 }).default(\"user\").notNull(), // user, admin\n  credits: decimal(\"credits\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  totalSpent: decimal(\"total_spent\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  isBanned: boolean(\"is_banned\").default(false),\n  isSuspended: boolean(\"is_suspended\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Card definitions\nexport const cards = pgTable(\"cards\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  tier: varchar(\"tier\", { length: 10 }).notNull(), // D, C, B, A, S, SS, SSS\n  packType: varchar(\"pack_type\", { length: 50 }).default(\"BNW\").notNull(), // BNW, XY, etc.\n  imageUrl: varchar(\"image_url\"),\n  marketValue: decimal(\"market_value\", { precision: 10, scale: 2 }).notNull(),\n  stock: integer(\"stock\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Pack definitions\nexport const packs = pgTable(\"packs\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  type: varchar(\"type\", { length: 50 }).notNull(), // BNW, XY, etc.\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Pack odds configuration\nexport const packOdds = pgTable(\"pack_odds\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  packId: uuid(\"pack_id\").references(() => packs.id),\n  tier: varchar(\"tier\", { length: 10 }).notNull(),\n  probability: decimal(\"probability\", { precision: 5, scale: 4 }).notNull(), // e.g., 0.6500 for 65%\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Virtual library - separate card inventory for virtual packs only\nexport const virtualLibrary = pgTable(\"virtual_library\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  tier: varchar(\"tier\", { length: 10 }).notNull(),\n  imageUrl: varchar(\"image_url\"),\n  marketValue: decimal(\"market_value\", { precision: 10, scale: 2 }).notNull(),\n  description: text(\"description\"),\n  stock: integer(\"stock\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Virtual themed pack definitions (separate from mystery tier packs)\nexport const virtualPacks = pgTable(\"virtual_packs\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  name: varchar(\"name\", { length: 255 }).notNull(), // \"Black Bolt\", \"Destined Rivals\"\n  description: text(\"description\"),\n  imageUrl: varchar(\"image_url\"),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  cardCount: integer(\"card_count\").default(10).notNull(), // Number of cards per pack\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Virtual pack card pools - defines which cards can appear in each themed pack\nexport const virtualPackCards = pgTable(\"virtual_pack_cards\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  virtualPackId: uuid(\"virtual_pack_id\").references(() => virtualPacks.id),\n  cardId: uuid(\"card_id\").references(() => cards.id),\n  weight: integer(\"weight\").default(1).notNull(), // Relative probability weight\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Game settings for configurable prices and options\nexport const gameSettings = pgTable(\"game_settings\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  gameType: varchar(\"game_type\", { length: 50 }).notNull().unique(), // 'plinko', 'wheel', 'pack'\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  updatedBy: varchar(\"updated_by\").references(() => users.id),\n});\n\n// System settings for administrative controls\nexport const systemSettings = pgTable(\"system_settings\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  settingKey: varchar(\"setting_key\", { length: 100 }).notNull().unique(), // 'maintenance_mode', 'new_registrations', etc\n  settingValue: boolean(\"setting_value\").notNull(),\n  description: text(\"description\"),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  updatedBy: varchar(\"updated_by\").references(() => users.id),\n});\n\n// Pull rate configuration for pack tiers\nexport const pullRates = pgTable(\"pull_rates\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  packType: varchar(\"pack_type\", { length: 50 }).notNull(), // 'pokeball', 'greatball', 'ultraball', 'masterball'\n  cardTier: varchar(\"card_tier\", { length: 20 }).notNull(), // 'common', 'uncommon', 'rare', 'superrare', 'legendary'\n  probability: integer(\"probability\").notNull(), // percentage 0-100 (e.g., 60 for 60%)\n  isActive: boolean(\"is_active\").default(true),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  updatedBy: varchar(\"updated_by\").references(() => users.id),\n});\n\n// Virtual pack pull rates (tier-based odds for themed packs)\nexport const virtualPackPullRates = pgTable(\"virtual_pack_pull_rates\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  virtualPackId: uuid(\"virtual_pack_id\").references(() => virtualPacks.id),\n  cardTier: varchar(\"card_tier\", { length: 20 }).notNull(), // 'D', 'C', 'B', 'A', 'S', 'SS', 'SSS'\n  probability: integer(\"probability\").notNull(), // percentage 0-100 (e.g., 60 for 60%)\n  isActive: boolean(\"is_active\").default(true),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  updatedBy: varchar(\"updated_by\").references(() => users.id),\n});\n\n// User card vault\nexport const userCards = pgTable(\"user_cards\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: varchar(\"user_id\").references(() => users.id),\n  cardId: uuid(\"card_id\").references(() => cards.id),\n  pullValue: decimal(\"pull_value\", { precision: 10, scale: 2 }).notNull(), // Locked market value at pull time\n  quantity: integer(\"quantity\").default(1).notNull(), // Number of copies of this card\n  pulledAt: timestamp(\"pulled_at\").defaultNow(),\n  isRefunded: boolean(\"is_refunded\").default(false),\n  isShipped: boolean(\"is_shipped\").default(false),\n});\n\n// User packs earned from games (unopened)\nexport const userPacks = pgTable(\"user_packs\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: varchar(\"user_id\").references(() => users.id),\n  packId: uuid(\"pack_id\").references(() => packs.id),\n  tier: varchar(\"tier\", { length: 10 }).notNull(), // The tier earned from Plinko\n  earnedFrom: varchar(\"earned_from\", { length: 50 }).notNull(), // plinko, wheel, etc.\n  isOpened: boolean(\"is_opened\").default(false),\n  earnedAt: timestamp(\"earned_at\").defaultNow(),\n  openedAt: timestamp(\"opened_at\"),\n});\n\n// Global feed entries\nexport const globalFeed = pgTable(\"global_feed\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: varchar(\"user_id\").references(() => users.id),\n  cardId: uuid(\"card_id\").references(() => cards.id),\n  tier: varchar(\"tier\", { length: 10 }).notNull(),\n  gameType: varchar(\"game_type\", { length: 50 }).notNull(), // plinko, wheel, pack\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Transaction history\nexport const transactions = pgTable(\"transactions\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: varchar(\"user_id\").references(() => users.id),\n  type: varchar(\"type\", { length: 50 }).notNull(), // purchase, refund, game_play, etc.\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  description: text(\"description\"),\n  status: varchar(\"status\", { length: 20 }).default(\"completed\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Gameplay sessions (for crash recovery)\nexport const gameSessions = pgTable(\"game_sessions\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: varchar(\"user_id\").references(() => users.id),\n  gameType: varchar(\"game_type\", { length: 50 }).notNull(),\n  gameData: jsonb(\"game_data\"), // Store game state\n  result: jsonb(\"result\"), // Store final result when completed\n  status: varchar(\"status\", { length: 20 }).default(\"in_progress\"), // in_progress, completed, failed\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  completedAt: timestamp(\"completed_at\"),\n});\n\n// Notifications\nexport const notifications = pgTable(\"notifications\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: varchar(\"user_id\").references(() => users.id),\n  type: varchar(\"type\", { length: 50 }).notNull(),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  message: text(\"message\").notNull(),\n  isRead: boolean(\"is_read\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Shipping requests\nexport const shippingRequests = pgTable(\"shipping_requests\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: varchar(\"user_id\").references(() => users.id),\n  cardIds: jsonb(\"card_ids\").notNull(), // Array of user_card IDs\n  shippingCost: decimal(\"shipping_cost\", { precision: 10, scale: 2 }).notNull(),\n  region: varchar(\"region\", { length: 20 }).notNull(), // west, east\n  address: text(\"address\").notNull(),\n  status: varchar(\"status\", { length: 20 }).default(\"pending\"),\n  trackingNumber: varchar(\"tracking_number\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  shippedAt: timestamp(\"shipped_at\"),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  userCards: many(userCards),\n  userPacks: many(userPacks),\n  transactions: many(transactions),\n  gameSessions: many(gameSessions),\n  notifications: many(notifications),\n  globalFeedEntries: many(globalFeed),\n  shippingRequests: many(shippingRequests),\n}));\n\nexport const cardsRelations = relations(cards, ({ many }) => ({\n  userCards: many(userCards),\n  globalFeedEntries: many(globalFeed),\n}));\n\nexport const packsRelations = relations(packs, ({ many }) => ({\n  packOdds: many(packOdds),\n  userPacks: many(userPacks),\n}));\n\nexport const userCardsRelations = relations(userCards, ({ one }) => ({\n  user: one(users, {\n    fields: [userCards.userId],\n    references: [users.id],\n  }),\n  card: one(cards, {\n    fields: [userCards.cardId],\n    references: [cards.id],\n  }),\n}));\n\nexport const globalFeedRelations = relations(globalFeed, ({ one }) => ({\n  user: one(users, {\n    fields: [globalFeed.userId],\n    references: [users.id],\n  }),\n  card: one(cards, {\n    fields: [globalFeed.cardId],\n    references: [cards.id],\n  }),\n}));\n\nexport const userPacksRelations = relations(userPacks, ({ one }) => ({\n  user: one(users, {\n    fields: [userPacks.userId],\n    references: [users.id],\n  }),\n  pack: one(packs, {\n    fields: [userPacks.packId],\n    references: [packs.id],\n  }),\n}));\n\nexport const packOddsRelations = relations(packOdds, ({ one }) => ({\n  pack: one(packs, {\n    fields: [packOdds.packId],\n    references: [packs.id],\n  }),\n}));\n\nexport const virtualLibraryRelations = relations(virtualLibrary, ({ many }) => ({\n  virtualPackCards: many(virtualPackCards),\n}));\n\nexport const virtualPacksRelations = relations(virtualPacks, ({ many }) => ({\n  virtualPackCards: many(virtualPackCards),\n  virtualPackPullRates: many(virtualPackPullRates),\n}));\n\nexport const virtualPackCardsRelations = relations(virtualPackCards, ({ one }) => ({\n  virtualPack: one(virtualPacks, {\n    fields: [virtualPackCards.virtualPackId],\n    references: [virtualPacks.id],\n  }),\n  card: one(cards, {\n    fields: [virtualPackCards.cardId],\n    references: [cards.id],\n  }),\n}));\n\nexport const virtualPackPullRatesRelations = relations(virtualPackPullRates, ({ one }) => ({\n  virtualPack: one(virtualPacks, {\n    fields: [virtualPackPullRates.virtualPackId],\n    references: [virtualPacks.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Registration schema with validation\nexport const registrationSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\").max(20, \"Username must be at most 20 characters\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  phoneNumber: z.string().optional(),\n});\n\n// Login schema\nexport const loginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport const insertCardSchema = createInsertSchema(cards).omit({\n  id: true,\n  createdAt: true,\n}).partial({\n  packType: true,  // Make packType optional since it has a default value\n});\n\nexport const insertPackSchema = createInsertSchema(packs).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserCardSchema = createInsertSchema(userCards).omit({\n  id: true,\n  pulledAt: true,\n});\n\nexport const insertUserPackSchema = createInsertSchema(userPacks).omit({\n  id: true,\n  earnedAt: true,\n  openedAt: true,\n});\n\nexport const insertTransactionSchema = createInsertSchema(transactions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertGameSessionSchema = createInsertSchema(gameSessions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertShippingRequestSchema = createInsertSchema(shippingRequests).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertGameSettingSchema = createInsertSchema(gameSettings).omit({\n  id: true,\n});\n\nexport const insertPullRateSchema = createInsertSchema(pullRates).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertSystemSettingSchema = createInsertSchema(systemSettings).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertVirtualPackSchema = createInsertSchema(virtualPacks).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertVirtualPackCardSchema = createInsertSchema(virtualPackCards).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertVirtualPackPullRateSchema = createInsertSchema(virtualPackPullRates).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertVirtualLibrarySchema = createInsertSchema(virtualLibrary).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type UpsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type Card = typeof cards.$inferSelect;\nexport type Pack = typeof packs.$inferSelect;\nexport type PackOdds = typeof packOdds.$inferSelect;\nexport type VirtualPack = typeof virtualPacks.$inferSelect;\nexport type VirtualPackCard = typeof virtualPackCards.$inferSelect;\nexport type VirtualPackPullRate = typeof virtualPackPullRates.$inferSelect;\nexport type VirtualLibraryCard = typeof virtualLibrary.$inferSelect;\nexport type UserCard = typeof userCards.$inferSelect;\nexport type UserPack = typeof userPacks.$inferSelect;\nexport type GlobalFeed = typeof globalFeed.$inferSelect;\nexport type Transaction = typeof transactions.$inferSelect;\nexport type GameSession = typeof gameSessions.$inferSelect;\nexport type Notification = typeof notifications.$inferSelect;\nexport type ShippingRequest = typeof shippingRequests.$inferSelect;\nexport type PullRate = typeof pullRates.$inferSelect;\n\nexport type InsertCard = z.infer<typeof insertCardSchema>;\nexport type InsertPack = z.infer<typeof insertPackSchema>;\nexport type InsertVirtualPack = z.infer<typeof insertVirtualPackSchema>;\nexport type InsertVirtualPackCard = z.infer<typeof insertVirtualPackCardSchema>;\nexport type InsertVirtualPackPullRate = z.infer<typeof insertVirtualPackPullRateSchema>;\nexport type InsertVirtualLibraryCard = z.infer<typeof insertVirtualLibrarySchema>;\nexport type InsertUserCard = z.infer<typeof insertUserCardSchema>;\nexport type InsertUserPack = z.infer<typeof insertUserPackSchema>;\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\nexport type InsertGameSession = z.infer<typeof insertGameSessionSchema>;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type InsertShippingRequest = z.infer<typeof insertShippingRequestSchema>;\n\n// Game settings types\nexport type GameSetting = typeof gameSettings.$inferSelect;\nexport type InsertGameSetting = typeof gameSettings.$inferInsert;\n\n// System settings types\nexport type SystemSetting = typeof systemSettings.$inferSelect;\nexport type InsertSystemSetting = z.infer<typeof insertSystemSettingSchema>;\n\n// Extended types for API responses\nexport type UserCardWithCard = UserCard & { card: Card };\nexport type GlobalFeedWithDetails = GlobalFeed & { user: Pick<User, 'username'>, card: Card };\nexport type GameResult = {\n  cardId: string;\n  tier: string;\n  gameType: string;\n};\n\nexport type VirtualPackOpenResult = {\n  cards: UserCardWithCard[];\n  packName: string;\n};\n","size_bytes":17820},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Home from \"@/pages/home\";\nimport Login from \"@/pages/login\";\nimport Register from \"@/pages/register\";\nimport Play from \"@/pages/games\";\nimport Plinko from \"@/pages/plinko\";\nimport Wheel from \"@/pages/wheel\";\nimport MysteryPacks from \"@/pages/mystery-packs\";\nimport ThemedPacks from \"@/pages/themed-packs\";\nimport MyPacks from \"@/pages/my-packs\";\nimport Vault from \"@/pages/vault\";\nimport Admin from \"@/pages/admin\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      {isAuthenticated && (\n        <>\n          <Route path=\"/play\" component={Play} />\n          <Route path=\"/play/plinko\" component={Plinko} />\n          <Route path=\"/play/wheel\" component={Wheel} />\n          <Route path=\"/play/mystery-packs\" component={MysteryPacks} />\n          <Route path=\"/play/themed-packs\" component={ThemedPacks} />\n          <Route path=\"/my-packs\" component={MyPacks} />\n          <Route path=\"/vault\" component={Vault} />\n          <Route path=\"/admin\" component={Admin} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2048},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Base colors */\n  --background: hsl(240, 3%, 6%);\n  --foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 4%, 9%);\n  --card-foreground: hsl(0, 0%, 95%);\n  --popover: hsl(240, 4%, 9%);\n  --popover-foreground: hsl(0, 0%, 95%);\n  --primary: hsl(194, 100%, 50%);\n  --primary-foreground: hsl(240, 6%, 10%);\n  --secondary: hsl(240, 4%, 15%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 5%, 25%);\n  --muted-foreground: hsl(240, 4%, 65%);\n  --accent: hsl(262, 83%, 70%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 6%, 20%);\n  --input: hsl(240, 4%, 15%);\n  --ring: hsl(194, 100%, 50%);\n  \n  /* Chart colors */\n  --chart-1: hsl(194, 100%, 50%);\n  --chart-2: hsl(159, 100%, 36%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  \n  /* Sidebar colors */\n  --sidebar: hsl(240, 4%, 9%);\n  --sidebar-foreground: hsl(0, 0%, 95%);\n  --sidebar-primary: hsl(194, 100%, 50%);\n  --sidebar-primary-foreground: hsl(0, 0%, 98%);\n  --sidebar-accent: hsl(262, 83%, 70%);\n  --sidebar-accent-foreground: hsl(0, 0%, 98%);\n  --sidebar-border: hsl(240, 6%, 20%);\n  --sidebar-ring: hsl(194, 100%, 50%);\n  \n  /* Gaming tier colors - 7-tier system */\n  --tier-d: hsl(120, 10%, 50%);\n  --tier-c: hsl(142, 76%, 56%);\n  --tier-b: hsl(217, 91%, 60%);\n  --tier-a: hsl(262, 83%, 70%);\n  --tier-s: hsl(45, 100%, 50%);\n  --tier-ss: hsl(320, 100%, 70%);\n  --tier-sss: hsl(0, 100%, 50%);\n  \n  /* Pokemon ball colors for wheel */\n  --blue: hsl(217, 91%, 60%);\n  --red: hsl(0, 84%, 60%);\n  --yellow: hsl(45, 100%, 50%);\n  --purple: hsl(262, 83%, 70%);\n  \n  /* Fonts */\n  --font-sans: \"Inter\", system-ui, sans-serif;\n  --font-gaming: \"Orbitron\", monospace;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  \n  /* Border radius */\n  --radius: 0.75rem;\n  \n  /* Shadows */\n  --shadow-2xs: 0px 2px 0px 0px hsl(194, 100%, 50%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(194, 100%, 50%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(194, 100%, 50%, 0.00), 0px 1px 2px -1px hsl(194, 100%, 50%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(194, 100%, 50%, 0.00), 0px 1px 2px -1px hsl(194, 100%, 50%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(194, 100%, 50%, 0.00), 0px 2px 4px -1px hsl(194, 100%, 50%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(194, 100%, 50%, 0.00), 0px 4px 6px -1px hsl(194, 100%, 50%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(194, 100%, 50%, 0.00), 0px 8px 10px -1px hsl(194, 100%, 50%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(194, 100%, 50%, 0.00);\n  \n  /* Spacing */\n  --spacing: 0.25rem;\n}\n\n.light {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(240, 10%, 4%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(240, 10%, 4%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(240, 10%, 4%);\n  --primary: hsl(194, 100%, 40%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(240, 5%, 96%);\n  --secondary-foreground: hsl(240, 6%, 10%);\n  --muted: hsl(240, 5%, 96%);\n  --muted-foreground: hsl(240, 4%, 46%);\n  --accent: hsl(262, 83%, 58%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 6%, 90%);\n  --input: hsl(240, 6%, 90%);\n  --ring: hsl(194, 100%, 40%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    background: radial-gradient(ellipse at center, hsl(240, 6%, 10%) 0%, hsl(240, 3%, 6%) 100%);\n    min-height: 100vh;\n  }\n\n  .light body {\n    background: linear-gradient(135deg, hsl(240, 100%, 99%) 0%, hsl(194, 100%, 97%) 100%);\n  }\n}\n\n@layer components {\n  .gaming-card {\n    @apply bg-gradient-to-br backdrop-blur-md border border-white/10;\n    background: linear-gradient(135deg, hsl(var(--primary) / 0.1) 0%, hsl(var(--accent) / 0.1) 100%);\n  }\n\n  .glow-effect {\n    box-shadow: 0 0 20px rgba(0, 212, 255, 0.3);\n  }\n\n  .tier-glow-d {\n    box-shadow: 0 0 15px rgba(128, 128, 128, 0.5);\n  }\n\n  .tier-glow-c {\n    box-shadow: 0 0 15px rgba(34, 197, 94, 0.5);\n  }\n\n  .tier-glow-b {\n    box-shadow: 0 0 15px rgba(59, 130, 246, 0.5);\n  }\n\n  .tier-glow-a {\n    box-shadow: 0 0 15px rgba(139, 92, 246, 0.5);\n  }\n\n  .tier-glow-s {\n    box-shadow: 0 0 18px rgba(255, 215, 0, 0.6);\n  }\n\n  .tier-glow-ss {\n    box-shadow: 0 0 20px rgba(255, 64, 191, 0.7);\n  }\n\n  .tier-glow-sss {\n    box-shadow: 0 0 25px rgba(255, 0, 0, 0.8);\n  }\n\n  .nav-blur {\n    @apply backdrop-blur-xl;\n    background-color: hsl(var(--background) / 0.8);\n  }\n\n  .pulse-glow {\n    animation: glow-pulse 2s ease-in-out infinite alternate;\n  }\n\n  .tier-d {\n    @apply text-[hsl(var(--tier-d))];\n  }\n\n  .tier-c {\n    @apply text-[hsl(var(--tier-c))];\n  }\n\n  .tier-b {\n    @apply text-[hsl(var(--tier-b))];\n  }\n\n  .tier-a {\n    @apply text-[hsl(var(--tier-a))];\n  }\n\n  .tier-s {\n    @apply text-[hsl(var(--tier-s))];\n  }\n\n  .tier-ss {\n    @apply text-[hsl(var(--tier-ss))];\n  }\n\n  .tier-sss {\n    @apply text-[hsl(var(--tier-sss))];\n  }\n}\n\n@layer utilities {\n  .animate-glow-pulse {\n    animation: glow-pulse 2s ease-in-out infinite alternate;\n  }\n\n  .animate-float {\n    animation: float 3s ease-in-out infinite;\n  }\n\n  .animate-card-flip {\n    animation: card-flip 0.6s ease-in-out;\n  }\n\n  @keyframes glow-pulse {\n    0% {\n      box-shadow: 0 0 5px currentColor;\n    }\n    100% {\n      box-shadow: 0 0 20px currentColor, 0 0 30px currentColor;\n    }\n  }\n\n  @keyframes float {\n    0%, 100% {\n      transform: translateY(0px);\n    }\n    50% {\n      transform: translateY(-10px);\n    }\n  }\n\n  @keyframes card-flip {\n    0% {\n      transform: rotateY(0);\n    }\n    50% {\n      transform: rotateY(90deg);\n    }\n    100% {\n      transform: rotateY(0);\n    }\n  }\n}\n","size_bytes":5977},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/CardDisplay.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport type { Card as CardType, UserCard } from \"@shared/schema\";\n\ninterface CardDisplayProps {\n  card: CardType;\n  userCard?: UserCard;\n  viewMode?: \"grid\" | \"list\";\n  isSelected?: boolean;\n  onClick?: () => void;\n}\n\nexport function CardDisplay({ \n  card, \n  userCard, \n  viewMode = \"grid\", \n  isSelected = false,\n  onClick \n}: CardDisplayProps) {\n  const tierColors = {\n    D: \"d\",\n    C: \"c\",\n    B: \"b\", \n    A: \"a\",\n    S: \"s\",\n    SS: \"ss\",\n    SSS: \"sss\"\n  };\n\n  const tierColor = tierColors[card.tier as keyof typeof tierColors] || \"d\";\n\n  if (viewMode === \"list\") {\n    return (\n      <Card \n        className={`gaming-card hover:glow-effect transition-all cursor-pointer ${\n          isSelected ? `tier-glow-${tierColor}` : \"\"\n        }`}\n        onClick={onClick}\n        data-testid={`card-${card.id}`}\n      >\n        <CardContent className=\"p-3 sm:p-4\">\n          <div className=\"flex items-center space-x-3 sm:space-x-4\">\n            <div className=\"w-12 h-16 sm:w-16 sm:h-20 rounded-lg overflow-hidden bg-gradient-to-br from-primary/20 to-accent/20 flex items-center justify-center\">\n              {card.imageUrl ? (\n                <img\n                  src={card.imageUrl}\n                  alt={card.name}\n                  className=\"w-full h-full object-cover\"\n                />\n              ) : (\n                <div className={`w-8 h-8 rounded-full bg-${tierColor}/20 flex items-center justify-center`}>\n                  <span className={`font-bold tier-${tierColor}`}>{card.tier}</span>\n                </div>\n              )}\n            </div>\n            \n            <div className=\"flex-1\">\n              <div className=\"flex items-center space-x-2 mb-1\">\n                <h3 className=\"font-semibold\" data-testid={`text-card-name-${card.id}`}>\n                  {card.name}\n                </h3>\n                <Badge className={`bg-${tierColor}/20 tier-${tierColor} border-${tierColor}/30`}>\n                  {card.tier}\n                </Badge>\n              </div>\n              <p className=\"text-sm text-muted-foreground mb-2\">{card.packType} Pack</p>\n              <div className=\"flex items-center space-x-4 text-sm\">\n                <span className=\"text-muted-foreground\">\n                  Credit Value: <span className=\"font-semibold text-accent\">{card.marketValue} CR</span>\n                </span>\n                {userCard && (\n                  <>\n                    <span className=\"text-muted-foreground\">\n                      Pull Value: <span className=\"font-semibold text-legendary\">{userCard.pullValue} CR</span>\n                    </span>\n                    {userCard.quantity && userCard.quantity > 1 && (\n                      <span className=\"text-muted-foreground\">\n                        Quantity: <span className=\"font-semibold text-primary\">{userCard.quantity}x</span>\n                      </span>\n                    )}\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div \n      className={`relative group cursor-pointer transform hover:scale-105 transition-transform ${\n        isSelected ? \"scale-105\" : \"\"\n      }`}\n      onClick={onClick}\n      data-testid={`card-${card.id}`}\n    >\n      <div className={`tier-glow-${tierColor} rounded-lg overflow-hidden gaming-card ${\n        isSelected ? `tier-glow-${tierColor}` : \"\"\n      }`}>\n        <div className=\"aspect-[5/7] bg-gradient-to-br from-primary/20 to-accent/20 relative\">\n          {card.imageUrl ? (\n            <img\n              src={card.imageUrl}\n              alt={card.name}\n              className=\"w-full h-full object-cover\"\n            />\n          ) : (\n            <div className=\"w-full h-full flex items-center justify-center\">\n              <div className={`w-12 h-12 sm:w-16 sm:h-16 rounded-full bg-${tierColor}/30 flex items-center justify-center`}>\n                <span className={`text-lg sm:text-2xl font-bold tier-${tierColor}`}>{card.tier}</span>\n              </div>\n            </div>\n          )}\n          \n          <div className=\"absolute top-1 right-1 sm:top-2 sm:right-2\">\n            <Badge className={`bg-${tierColor}/90 tier-${tierColor} text-white text-xs`}>\n              {card.tier}\n            </Badge>\n          </div>\n          \n          <div className=\"absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 to-transparent p-2 sm:p-3\">\n            <div className=\"text-white\">\n              <div className=\"text-xs sm:text-sm font-semibold truncate\" data-testid={`text-card-name-${card.id}`}>\n                {card.name}\n              </div>\n              <div className=\"text-xs text-gray-300\">\n                <span className=\"hidden sm:inline\">Credit Value: </span>\n                <span className=\"sm:hidden\">CR: </span>\n                {userCard?.pullValue || card.marketValue}\n                {userCard?.quantity && userCard.quantity > 1 && (\n                  <span className=\"ml-1 sm:ml-2 text-primary font-bold\">\n                    {userCard.quantity}x\n                  </span>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5317},"client/src/components/CreditPurchase.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { CreditCard, Coins, Zap, Star, Lock } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\ninterface PurchaseResult {\n  success: boolean;\n  creditsAdded: number;\n}\n\nexport function CreditPurchase() {\n  const [customAmount, setCustomAmount] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { isAuthenticated } = useAuth();\n\n  const purchaseMutation = useMutation({\n    mutationFn: async (data: { amount: string; bundleType?: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/credits/purchase\", data);\n      return response.json() as Promise<PurchaseResult>;\n    },\n    onSuccess: (result) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Credits Added!\",\n        description: `Successfully added ${result.creditsAdded.toFixed(2)} credits to your account`,\n        duration: 5000,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Purchase Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleBundlePurchase = (amount: string, bundleType: string) => {\n    purchaseMutation.mutate({ amount, bundleType });\n  };\n\n  const handleCustomPurchase = () => {\n    const amount = parseFloat(customAmount);\n    if (isNaN(amount) || amount <= 0) {\n      toast({\n        title: \"Invalid Amount\",\n        description: \"Please enter a valid amount\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (amount < 1) {\n      toast({\n        title: \"Minimum Purchase\",\n        description: \"Minimum purchase amount is RM 1.00\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    purchaseMutation.mutate({ amount: customAmount });\n  };\n\n  const bundles = [\n    {\n      credits: 10,\n      price: \"10.00\",\n      bonus: 0,\n      popular: false,\n      icon: <Coins className=\"w-6 h-6\" />,\n      color: \"from-blue-500 to-blue-600\",\n    },\n    {\n      credits: 50,\n      price: \"50.00\", \n      bonus: 5,\n      popular: true,\n      icon: <Star className=\"w-6 h-6\" />,\n      color: \"from-purple-500 to-purple-600\",\n    },\n    {\n      credits: 100,\n      price: \"100.00\",\n      bonus: 20,\n      popular: false,\n      icon: <Zap className=\"w-6 h-6\" />,\n      color: \"from-yellow-500 to-yellow-600\",\n    },\n  ];\n\n  // Show login prompt if not authenticated\n  if (!isAuthenticated) {\n    return (\n      <Card className=\"gaming-card border-2 border-primary/50\">\n        <CardContent className=\"p-8 text-center\">\n          <Lock className=\"w-16 h-16 mx-auto mb-4 text-primary/50\" />\n          <h3 className=\"font-gaming font-bold text-xl mb-2\">Account Required</h3>\n          <p className=\"text-muted-foreground mb-6\">\n            Create an account to purchase credits and start playing!\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n            <Link href=\"/register\">\n              <Button className=\"bg-gradient-to-r from-primary to-accent hover:glow-effect\" data-testid=\"button-register-prompt\">\n                Create Account\n              </Button>\n            </Link>\n            <Link href=\"/login\">\n              <Button variant=\"outline\" className=\"border-primary text-primary hover:bg-primary hover:text-primary-foreground\" data-testid=\"button-login-prompt\">\n                Sign In\n              </Button>\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Bundle Options */}\n      <div className=\"grid gap-4\">\n        {bundles.map((bundle, index) => (\n          <Card \n            key={index} \n            className={`gaming-card hover:glow-effect transition-all relative ${\n              bundle.popular ? \"border-2 border-accent\" : \"\"\n            }`}\n          >\n            {bundle.popular && (\n              <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                <Badge className=\"bg-accent text-accent-foreground\">\n                  Most Popular\n                </Badge>\n              </div>\n            )}\n            \n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className={`w-12 h-12 rounded-full bg-gradient-to-r ${bundle.color} flex items-center justify-center text-white`}>\n                    {bundle.icon}\n                  </div>\n                  <div>\n                    <div className=\"font-semibold\">\n                      {bundle.credits} {bundle.bonus > 0 && `+ ${bundle.bonus}`} Credits\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      RM {bundle.price} {bundle.bonus > 0 && `(${Math.round((bundle.bonus / bundle.credits) * 100)}% bonus!)`}\n                    </div>\n                  </div>\n                </div>\n                \n                <Button\n                  onClick={() => handleBundlePurchase(bundle.price, `bundle_${bundle.credits}`)}\n                  disabled={purchaseMutation.isPending}\n                  className={`bg-gradient-to-r ${bundle.color} hover:glow-effect transition-all`}\n                  data-testid={`button-purchase-bundle-${bundle.credits}`}\n                >\n                  {purchaseMutation.isPending ? (\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                  ) : (\n                    <>\n                      <CreditCard className=\"w-4 h-4 mr-2\" />\n                      Buy Now\n                    </>\n                  )}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Custom Amount */}\n      <Card className=\"gaming-card\">\n        <CardContent className=\"p-6\">\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"custom-amount\">Custom Amount (RM)</Label>\n              <p className=\"text-sm text-muted-foreground mb-2\">\n                1 RM = 1 Credit • Credits never expire\n              </p>\n              <div className=\"flex space-x-2\">\n                <Input\n                  id=\"custom-amount\"\n                  type=\"number\"\n                  min=\"1\"\n                  step=\"0.01\"\n                  value={customAmount}\n                  onChange={(e) => setCustomAmount(e.target.value)}\n                  placeholder=\"25.00\"\n                  data-testid=\"input-custom-amount\"\n                />\n                <Button\n                  onClick={handleCustomPurchase}\n                  disabled={!customAmount || purchaseMutation.isPending}\n                  className=\"bg-gradient-to-r from-primary to-accent hover:glow-effect\"\n                  data-testid=\"button-purchase-custom\"\n                >\n                  {purchaseMutation.isPending ? (\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                  ) : (\n                    <>\n                      <CreditCard className=\"w-4 h-4 mr-2\" />\n                      Top Up\n                    </>\n                  )}\n                </Button>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Payment Info */}\n      <Card className=\"gaming-card\">\n        <CardContent className=\"p-6\">\n          <h4 className=\"font-semibold mb-4\">Payment Information</h4>\n          <div className=\"space-y-3 text-sm text-muted-foreground\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n              <span>Secure payment processing</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n              <span>Credits added instantly</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n              <span>Credits never expire</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-2 h-2 bg-yellow-500 rounded-full\"></div>\n              <span>No cash refunds - all sales final</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8945},"client/src/components/GameCard.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface GameCardProps {\n  name: string;\n  description: string;\n  cost: string;\n  maxPayout: string;\n  color: string;\n  icon: React.ReactNode;\n  onPlay: () => void;\n  isPlaying?: boolean;\n}\n\nexport function GameCard({\n  name,\n  description,\n  cost,\n  maxPayout,\n  color,\n  icon,\n  onPlay,\n  isPlaying = false,\n}: GameCardProps) {\n  return (\n    <Card className=\"gaming-card hover:glow-effect transition-all transform hover:scale-105 group\">\n      <CardContent className=\"p-6\">\n        <div className=\"text-center\">\n          <div className=\"w-full h-48 rounded-lg mb-6 overflow-hidden bg-gradient-to-br from-blue-600/20 to-purple-600/20 relative flex items-center justify-center\">\n            <div className={`w-16 h-16 rounded-full bg-gradient-to-r ${color} flex items-center justify-center`}>\n              {icon}\n            </div>\n            <div className=\"absolute bottom-4 left-4 right-4\">\n              <div className=\"flex justify-center\">\n                <Badge className={`bg-gradient-to-r ${color} text-white`}>\n                  Ready to Play\n                </Badge>\n              </div>\n            </div>\n          </div>\n          \n          <h3 className=\"font-gaming font-bold text-xl mb-3 text-primary\">{name}</h3>\n          <p className=\"text-muted-foreground mb-6\">{description}</p>\n          \n          <div className=\"space-y-3 mb-6\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm\">Cost per play:</span>\n              <span className=\"font-semibold text-accent\">{cost} Credits</span>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm\">Max payout:</span>\n              <span className=\"font-semibold text-legendary\">{maxPayout}</span>\n            </div>\n          </div>\n          \n          <Button\n            className={`w-full bg-gradient-to-r ${color} text-white hover:glow-effect transition-all`}\n            onClick={onPlay}\n            disabled={isPlaying}\n            data-testid={`button-play-${name.toLowerCase().replace(/\\s+/g, '-')}`}\n          >\n            {isPlaying ? (\n              <>\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                Playing...\n              </>\n            ) : (\n              <>\n                {icon}\n                <span className=\"ml-2\">Play {name.split(' ')[0]}</span>\n              </>\n            )}\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2699},"client/src/components/GlobalFeed.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { RefreshCw, ChevronDown } from \"lucide-react\";\nimport type { GlobalFeedWithDetails } from \"@shared/schema\";\n\ninterface GlobalFeedProps {\n  limit?: number;\n}\n\nexport function GlobalFeed({ limit = 50 }: GlobalFeedProps) {\n  const [showCount, setShowCount] = useState(limit);\n  const [showAllTiers, setShowAllTiers] = useState(false);\n\n  const { data: feedData, isLoading, refetch } = useQuery<GlobalFeedWithDetails[]>({\n    queryKey: [`/api/feed?limit=${showCount}${showAllTiers ? '' : '&minTier=A'}`],\n    refetchInterval: 10000, // Refresh every 10 seconds\n  });\n\n  const tierColors = {\n    D: \"d\",\n    C: \"c\",\n    B: \"b\",\n    A: \"a\", \n    S: \"s\",\n    SS: \"ss\",\n    SSS: \"sss\"\n  };\n\n  const getTimeAgo = (date: string | Date) => {\n    const now = new Date();\n    const pullTime = new Date(date);\n    const diffMs = now.getTime() - pullTime.getTime();\n    const diffMins = Math.floor(diffMs / 60000);\n    const diffHours = Math.floor(diffMs / 3600000);\n    const diffDays = Math.floor(diffMs / 86400000);\n\n    if (diffDays > 0) return `${diffDays}d ago`;\n    if (diffHours > 0) return `${diffHours}h ago`;\n    if (diffMins > 0) return `${diffMins}m ago`;\n    return \"Just now\";\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"text-center py-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n        <p className=\"text-muted-foreground\">Loading recent pulls...</p>\n      </div>\n    );\n  }\n\n  if (!feedData || feedData.length === 0) {\n    return (\n      <div className=\"text-center py-8\">\n        <div className=\"w-16 h-16 bg-muted/20 rounded-full mx-auto mb-4 flex items-center justify-center\">\n          <RefreshCw className=\"w-8 h-8 text-muted-foreground\" />\n        </div>\n        <h3 className=\"text-lg font-semibold mb-2\">No Recent Pulls</h3>\n        <p className=\"text-muted-foreground\">Be the first to pull a rare card!</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"w-2 h-2 bg-primary rounded-full animate-pulse\"></div>\n          <span className=\"font-semibold\" data-testid=\"text-live-feed\">\n            Live Feed {!showAllTiers && \"(A+ Tier Only)\"}\n          </span>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant={showAllTiers ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => setShowAllTiers(!showAllTiers)}\n            data-testid=\"button-toggle-tiers\"\n          >\n            {showAllTiers ? \"A+ Only\" : \"See All\"}\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => refetch()}\n            data-testid=\"button-refresh-feed\"\n          >\n            <RefreshCw className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n\n      {/* Feed Items */}\n      <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n        {feedData.slice(0, showCount).map((pull) => {\n          const tierColor = tierColors[pull.tier as keyof typeof tierColors] || \"d\";\n          \n          return (\n            <div\n              key={pull.id}\n              className=\"flex items-center space-x-3 p-3 rounded-lg bg-secondary/30 hover:bg-secondary/50 transition-colors\"\n              data-testid={`feed-item-${pull.id}`}\n            >\n              <div className={`tier-glow-${tierColor} w-12 h-12 rounded-lg bg-gradient-to-br from-${tierColor}/30 to-${tierColor}/10 flex items-center justify-center flex-shrink-0`}>\n                {pull.card.imageUrl ? (\n                  <img\n                    src={pull.card.imageUrl}\n                    alt={pull.card.name}\n                    className=\"w-10 h-10 rounded object-cover\"\n                  />\n                ) : (\n                  <span className={`font-bold tier-${tierColor}`}>{pull.tier}</span>\n                )}\n              </div>\n              \n              <div className=\"flex-1 min-w-0\">\n                <div className=\"flex items-center space-x-2 mb-1\">\n                  <span className=\"font-semibold truncate\" data-testid={`text-username-${pull.id}`}>\n                    {pull.user?.username || 'Unknown'}\n                  </span>\n                  <span className=\"text-muted-foreground text-sm\">pulled</span>\n                  <Badge className={`bg-${tierColor}/90 tier-${tierColor} text-white text-xs`}>\n                    {pull.tier}\n                  </Badge>\n                </div>\n                <div className=\"text-sm text-muted-foreground truncate\" data-testid={`text-card-name-${pull.id}`}>\n                  {pull.card.name}\n                </div>\n                <div className=\"text-xs text-muted-foreground\">\n                  from {pull.gameType} game\n                </div>\n              </div>\n              \n              <div className=\"text-xs text-muted-foreground text-right flex-shrink-0\" data-testid={`text-timestamp-${pull.id}`}>\n                {getTimeAgo(pull.createdAt || new Date())}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      {/* Load More */}\n      {feedData.length > showCount && (\n        <div className=\"text-center\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setShowCount(prev => prev + 20)}\n            data-testid=\"button-load-more-feed\"\n          >\n            Load More <ChevronDown className=\"w-4 h-4 ml-1\" />\n          </Button>\n        </div>\n      )}\n\n      {feedData.length === 0 && (\n        <div className=\"text-center text-muted-foreground text-sm\">\n          No more pulls to show\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":5933},"client/src/components/Navigation.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useTheme } from \"@/components/ThemeProvider\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Moon, Sun, Zap, Menu, X } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function Navigation() {\n  const { user, isAuthenticated, isAdmin } = useAuth();\n  const { theme, toggleTheme } = useTheme();\n  const [location] = useLocation();\n  const [, setLocation] = useLocation();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const { toast } = useToast();\n\n  const { data: userData } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    enabled: isAuthenticated,\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/auth/logout\");\n    },\n    onSuccess: () => {\n      queryClient.clear(); // Clear all cached data\n      toast({\n        title: \"Logged out\",\n        description: \"You've been logged out successfully.\",\n      });\n      setLocation(\"/\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message || \"Something went wrong.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  const navItems = [\n    { path: \"/\", label: \"Home\" },\n    { path: \"/play\", label: \"Play\" },\n    { path: \"/my-packs\", label: \"My Packs\" },\n    { path: \"/vault\", label: \"Vault\" },\n    ...(isAdmin ? [{ path: \"/admin\", label: \"Admin\" }] : []),\n  ];\n\n  return (\n    <nav className=\"fixed top-0 left-0 right-0 z-50 nav-blur border-b border-border\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-16\">\n          {/* Logo */}\n          <Link href=\"/\">\n            <div className=\"flex items-center space-x-2 sm:space-x-3 cursor-pointer\" data-testid=\"link-home\">\n              <div className=\"w-8 h-8 sm:w-10 sm:h-10 bg-gradient-to-br from-primary to-accent rounded-lg flex items-center justify-center glow-effect\">\n                <Zap className=\"text-primary-foreground text-lg sm:text-xl\" />\n              </div>\n              <span className=\"font-gaming font-bold text-lg sm:text-xl bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n                Drops\n              </span>\n            </div>\n          </Link>\n\n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex items-center space-x-6\">\n            {isAuthenticated && navItems.map((item) => (\n              <Link key={item.path} href={item.path}>\n                <span \n                  className={`hover:text-primary transition-colors cursor-pointer ${\n                    location === item.path ? \"text-primary\" : \"\"\n                  }`}\n                  data-testid={`link-${item.label.toLowerCase()}`}\n                >\n                  {item.label}\n                </span>\n              </Link>\n            ))}\n\n            {/* Theme Toggle */}\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={toggleTheme}\n              data-testid=\"button-theme-toggle\"\n            >\n              {theme === \"dark\" ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n\n            {isAuthenticated ? (\n              <>\n                {/* Credits Display */}\n                <div className=\"gaming-card px-2 sm:px-4 py-1 sm:py-2 rounded-lg\" data-testid=\"display-credits\">\n                  <span className=\"text-xs sm:text-sm text-muted-foreground\">Credits:</span>\n                  <span className=\"font-bold text-accent ml-1 sm:ml-2 text-sm sm:text-base\">\n                    {(userData as any)?.credits || \"0.00\"}\n                  </span>\n                </div>\n\n                {/* User Menu */}\n                <div className=\"flex items-center space-x-1 sm:space-x-2 gaming-card px-2 sm:px-3 py-1 sm:py-2 rounded-lg\">\n                  <img\n                    src={(user as any)?.profileImageUrl || \"https://via.placeholder.com/32\"}\n                    alt=\"User avatar\"\n                    className=\"w-6 h-6 sm:w-8 sm:h-8 rounded-full border-2 border-primary\"\n                    data-testid=\"img-avatar\"\n                  />\n                  <span className=\"text-sm sm:text-base truncate max-w-20 sm:max-w-none\" data-testid=\"text-username\">{(user as any)?.username || (userData as any)?.username || \"Player\"}</span>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={handleLogout}\n                    disabled={logoutMutation.isPending}\n                    data-testid=\"button-logout\"\n                  >\n                    {logoutMutation.isPending ? \"Logging out...\" : \"Logout\"}\n                  </Button>\n                </div>\n              </>\n            ) : (\n              <>\n                {/* Login/Signup buttons for non-authenticated users */}\n                <Link href=\"/login\">\n                  <Button\n                    variant=\"outline\"\n                    className=\"border-primary text-primary hover:bg-primary hover:text-primary-foreground\"\n                    data-testid=\"button-login\"\n                  >\n                    Sign In\n                  </Button>\n                </Link>\n                \n                <Link href=\"/register\">\n                  <Button\n                    className=\"bg-gradient-to-r from-primary to-accent hover:glow-effect\"\n                    data-testid=\"button-register\"\n                  >\n                    Create Account\n                  </Button>\n                </Link>\n              </>\n            )}\n          </div>\n\n          {/* Mobile Menu Button */}\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"md:hidden\"\n            onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n            data-testid=\"button-mobile-menu\"\n          >\n            {isMobileMenuOpen ? <X className=\"h-5 w-5\" /> : <Menu className=\"h-5 w-5\" />}\n          </Button>\n        </div>\n\n        {/* Mobile Menu */}\n        {isMobileMenuOpen && (\n          <div className=\"md:hidden py-4 border-t border-border\">\n            <div className=\"space-y-4\">\n              {isAuthenticated && navItems.map((item) => (\n                <Link key={item.path} href={item.path}>\n                  <span \n                    className={`block hover:text-primary transition-colors cursor-pointer ${\n                      location === item.path ? \"text-primary\" : \"\"\n                    }`}\n                    onClick={() => setIsMobileMenuOpen(false)}\n                    data-testid={`link-mobile-${item.label.toLowerCase()}`}\n                  >\n                    {item.label}\n                  </span>\n                </Link>\n              ))}\n              \n              {isAuthenticated && (\n                <div className=\"gaming-card px-4 py-2 rounded-lg\">\n                  <span className=\"text-sm text-muted-foreground\">Credits:</span>\n                  <span className=\"font-bold text-accent ml-2\">\n                    {(userData as any)?.credits || \"0.00\"}\n                  </span>\n                </div>\n              )}\n\n              <div className=\"flex items-center justify-between\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={toggleTheme}\n                  data-testid=\"button-mobile-theme-toggle\"\n                >\n                  {theme === \"dark\" ? \"Light Mode\" : \"Dark Mode\"}\n                </Button>\n                \n                {isAuthenticated ? (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={handleLogout}\n                    disabled={logoutMutation.isPending}\n                    data-testid=\"button-mobile-logout\"\n                  >\n                    {logoutMutation.isPending ? \"Logging out...\" : \"Logout\"}\n                  </Button>\n                ) : (\n                  <div className=\"space-x-2\">\n                    <Link href=\"/login\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setIsMobileMenuOpen(false)}\n                        data-testid=\"button-mobile-login\"\n                      >\n                        Sign In\n                      </Button>\n                    </Link>\n                    <Link href=\"/register\">\n                      <Button\n                        size=\"sm\"\n                        className=\"bg-gradient-to-r from-primary to-accent\"\n                        onClick={() => setIsMobileMenuOpen(false)}\n                        data-testid=\"button-mobile-register\"\n                      >\n                        Create Account\n                      </Button>\n                    </Link>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":9270},"client/src/components/PackOpening.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Package, Sparkles, Coins } from \"lucide-react\";\nimport type { Pack } from \"@shared/schema\";\n\ninterface PackOpeningProps {\n  packs: Pack[];\n}\n\ninterface GameResult {\n  success: boolean;\n  result: {\n    cardId: string;\n    tier: string;\n    gameType: string;\n  };\n  sessionId: string;\n}\n\nexport function PackOpening({ packs }: PackOpeningProps) {\n  const [selectedPack, setSelectedPack] = useState<Pack | null>(null);\n  const [isOpening, setIsOpening] = useState(false);\n  const [lastResult, setLastResult] = useState<GameResult | null>(null);\n  const [animationPhase, setAnimationPhase] = useState<\"closed\" | \"opening\" | \"opened\">(\"closed\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: user } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n  });\n\n  const activePacks = packs.filter(pack => pack.isActive);\n  const bnwPacks = activePacks.filter(pack => pack.type === \"BNW\");\n\n  const playGameMutation = useMutation({\n    mutationFn: async (data: { gameType: string; betAmount: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/games/play\", data);\n      return response.json() as Promise<GameResult>;\n    },\n    onSuccess: (result) => {\n      // Start opening animation\n      setAnimationPhase(\"opening\");\n      \n      setTimeout(() => {\n        setAnimationPhase(\"opened\");\n        setLastResult(result);\n        \n        queryClient.invalidateQueries([\"/api/auth/user\"]);\n        queryClient.invalidateQueries([\"/api/vault\"]);\n        \n        const tierNames = {\n          C: \"Common\",\n          UC: \"Uncommon\",\n          R: \"Rare\",\n          SR: \"Super Rare\", \n          SSS: \"Legendary\"\n        };\n\n        toast({\n          title: \"Pack Opened!\",\n          description: `You got a ${tierNames[result.result.tier as keyof typeof tierNames]} card!`,\n          duration: 5000,\n        });\n      }, 2000);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Pack Opening Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n      setAnimationPhase(\"closed\");\n    },\n    onSettled: () => {\n      setIsOpening(false);\n    },\n  });\n\n  const handleOpenPack = (pack: Pack) => {\n    setSelectedPack(pack);\n    setIsOpening(true);\n    setLastResult(null);\n    setAnimationPhase(\"closed\");\n    \n    playGameMutation.mutate({\n      gameType: \"pack\",\n      betAmount: pack.price,\n    });\n  };\n\n  const resetPack = () => {\n    setAnimationPhase(\"closed\");\n    setLastResult(null);\n    setSelectedPack(null);\n  };\n\n  const tierColors = {\n    C: \"common\",\n    UC: \"uncommon\",\n    R: \"rare\",\n    SR: \"superrare\",\n    SSS: \"legendary\"\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Pack Selection */}\n      {!selectedPack && (\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          {bnwPacks.length > 0 ? (\n            bnwPacks.map((pack) => (\n              <Card key={pack.id} className=\"gaming-card hover:glow-effect transition-all transform hover:scale-105\">\n                <CardContent className=\"p-6\">\n                  <div className=\"text-center\">\n                    <div className=\"w-full h-48 rounded-lg mb-6 overflow-hidden bg-gradient-to-br from-purple-600/20 to-pink-600/20 relative flex items-center justify-center\">\n                      <div className=\"w-20 h-20 bg-gradient-to-br from-superrare to-legendary rounded-lg flex items-center justify-center\">\n                        <Package className=\"w-10 h-10 text-white\" />\n                      </div>\n                      <div className=\"absolute bottom-4 left-4 right-4\">\n                        <Badge className=\"bg-primary text-primary-foreground\">\n                          {pack.type} Pack\n                        </Badge>\n                      </div>\n                    </div>\n                    \n                    <h3 className=\"font-gaming font-bold text-xl mb-3 text-superrare\">\n                      {pack.name}\n                    </h3>\n                    <p className=\"text-muted-foreground mb-6\">\n                      10 cards total: 9 bulk cards + 1 special guaranteed!\n                    </p>\n                    \n                    <div className=\"space-y-3 mb-6\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm\">Pack price:</span>\n                        <span className=\"font-semibold text-accent\">{pack.price} Credits</span>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm\">Cards per pack:</span>\n                        <span className=\"font-semibold text-legendary\">10 Total</span>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm\">Special guarantee:</span>\n                        <span className=\"font-semibold text-superrare\">1 Rare+</span>\n                      </div>\n                    </div>\n                    \n                    <Button\n                      onClick={() => handleOpenPack(pack)}\n                      disabled={isOpening}\n                      className=\"w-full bg-gradient-to-r from-superrare to-legendary hover:glow-effect transition-all\"\n                      data-testid={`button-open-pack-${pack.id}`}\n                    >\n                      <Package className=\"w-4 h-4 mr-2\" />\n                      Open Pack ({pack.price} Credits)\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          ) : (\n            <Card className=\"gaming-card col-span-2\">\n              <CardContent className=\"p-12 text-center\">\n                <Package className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground\" />\n                <h3 className=\"text-xl font-semibold mb-2\">No Packs Available</h3>\n                <p className=\"text-muted-foreground\">\n                  BNW packs are currently out of stock. Check back later!\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      )}\n\n      {/* Pack Opening Animation */}\n      {selectedPack && (\n        <Card className=\"gaming-card\">\n          <CardContent className=\"p-8\">\n            <div className=\"text-center\">\n              <h3 className=\"font-gaming font-bold text-2xl mb-6\">\n                Opening {selectedPack.name}...\n              </h3>\n              \n              <div className=\"relative mb-8\">\n                {animationPhase === \"closed\" && (\n                  <div className=\"w-48 h-64 mx-auto bg-gradient-to-br from-purple-600 to-pink-600 rounded-lg flex items-center justify-center transform hover:scale-105 transition-transform\">\n                    <Package className=\"w-24 h-24 text-white\" />\n                  </div>\n                )}\n                \n                {animationPhase === \"opening\" && (\n                  <div className=\"w-48 h-64 mx-auto bg-gradient-to-br from-purple-600 to-pink-600 rounded-lg flex items-center justify-center animate-pulse\">\n                    <div className=\"relative\">\n                      <Package className=\"w-24 h-24 text-white animate-bounce\" />\n                      <div className=\"absolute inset-0 flex items-center justify-center\">\n                        <Sparkles className=\"w-8 h-8 text-yellow-300 animate-spin\" />\n                      </div>\n                    </div>\n                  </div>\n                )}\n                \n                {animationPhase === \"opened\" && lastResult && (\n                  <div className=\"space-y-4\">\n                    <div className={`w-48 h-64 mx-auto rounded-lg flex items-center justify-center tier-glow-${tierColors[lastResult.result.tier as keyof typeof tierColors]} animate-card-flip`}>\n                      <div className={`w-32 h-32 rounded-full bg-${tierColors[lastResult.result.tier as keyof typeof tierColors]}/30 flex items-center justify-center`}>\n                        <span className={`text-4xl font-bold tier-${tierColors[lastResult.result.tier as keyof typeof tierColors]}`}>\n                          {lastResult.result.tier}\n                        </span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"text-center\">\n                      <Badge className={`bg-${tierColors[lastResult.result.tier as keyof typeof tierColors]}/90 text-white text-lg px-4 py-2`}>\n                        {lastResult.result.tier} Tier Card\n                      </Badge>\n                    </div>\n                  </div>\n                )}\n              </div>\n              \n              {animationPhase === \"opening\" && (\n                <div className=\"space-y-2\">\n                  <div className=\"text-lg font-semibold text-accent\">\n                    Opening pack...\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">\n                    Revealing your cards...\n                  </div>\n                </div>\n              )}\n              \n              {animationPhase === \"opened\" && (\n                <div className=\"space-y-4\">\n                  <Button\n                    onClick={resetPack}\n                    className=\"bg-gradient-to-r from-primary to-accent\"\n                    data-testid=\"button-open-another-pack\"\n                  >\n                    <Package className=\"w-4 h-4 mr-2\" />\n                    Open Another Pack\n                  </Button>\n                  \n                  <div className=\"text-sm text-muted-foreground\">\n                    Card has been added to your vault!\n                  </div>\n\n                  {/* Available Credits Bar */}\n                  <Card className=\"gaming-card bg-gradient-to-r from-accent/10 to-primary/10 border-accent/20\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-center gap-3\">\n                        <Coins className=\"w-5 h-5 text-accent\" />\n                        <div className=\"text-center\">\n                          <div className=\"text-sm text-muted-foreground\">Available Credits</div>\n                          <div className=\"text-xl font-bold text-accent\" data-testid=\"text-available-credits\">\n                            {(user as any)?.credits || \"0.00\"}\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Pack Info */}\n      <Card className=\"gaming-card\">\n        <CardContent className=\"p-6\">\n          <h4 className=\"font-semibold mb-4\">About Virtual Packs</h4>\n          <div className=\"space-y-2 text-sm text-muted-foreground\">\n            <p>• Each pack contains 10 cards total</p>\n            <p>• 9 bulk cards are automatically refunded at 0.01 credits each</p>\n            <p>• 1 special card (Common to Legendary) goes to your vault</p>\n            <p>• Currently only Black & White (BNW) packs available</p>\n            <p>• More pack types coming soon!</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":11642},"client/src/components/PlinkoGame.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Play, Package, DollarSign } from \"lucide-react\";\nimport masterballPack from \"@assets/ChatGPT Image Aug 30, 2025, 11_21_42 PM_1756567318737.png\";\nimport ultraballPack from \"@assets/ChatGPT Image Aug 30, 2025, 11_21_45 PM_1756567324980.png\";\nimport greatballPack from \"@assets/ChatGPT Image Aug 30, 2025, 11_22_18 PM_1756567342025.png\";\nimport pokeballPack from \"@assets/ChatGPT Image Aug 30, 2025, 11_22_50 PM_1756567373572.png\";\n\ninterface GameResult {\n  success: boolean;\n  result: {\n    cardId: string;\n    tier: string;\n    gameType: string;\n  };\n  sessionId: string;\n}\n\ninterface Ball {\n  x: number;\n  y: number;\n  vx: number;\n  vy: number;\n  radius: number;\n  color: string;\n}\n\nconst BOARD_WIDTH = 600;\nconst BOARD_HEIGHT = 500;\nconst PIN_RADIUS = 6;\nconst BALL_RADIUS = 14; // Made bigger\nconst LAYERS = 8;\nconst OUTCOMES = [\n  \"Masterball\",\n  \"Ultraball\",\n  \"Greatball\",\n  \"Pokeball\",\n  \"Pokeball\",\n  \"Pokeball\",\n  \"Greatball\",\n  \"Ultraball\",\n  \"Masterball\",\n];\n\nconst PackImage = ({\n  packType,\n  size = \"small\",\n}: {\n  packType: string;\n  size?: \"small\" | \"large\";\n}) => {\n  const getPackImage = (type: string) => {\n    switch (type.toLowerCase()) {\n      case \"masterball\":\n        return masterballPack;\n      case \"ultraball\":\n        return ultraballPack;\n      case \"greatball\":\n        return greatballPack;\n      case \"pokeball\":\n        return pokeballPack;\n      default:\n        return pokeballPack;\n    }\n  };\n\n  const imageSize = size === \"small\" ? \"w-8 h-10\" : \"w-16 h-20\";\n\n  return (\n    <div className={`${imageSize} mx-auto`}>\n      <img\n        src={getPackImage(packType)}\n        alt={`${packType} pack`}\n        className=\"w-full h-full object-contain pixel-crisp\"\n        style={{ imageRendering: \"pixelated\" }}\n      />\n    </div>\n  );\n};\n\nexport function PlinkoGame() {\n  const [fixedPrice, setFixedPrice] = useState(\"5.00\");\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [lastResult, setLastResult] = useState<GameResult | null>(null);\n  const [animationComplete, setAnimationComplete] = useState(false);\n  const [finalOutcome, setFinalOutcome] = useState<string | null>(null);\n  const [showPackAssigned, setShowPackAssigned] = useState(false);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const animationRef = useRef<number>();\n  const ballRef = useRef<Ball | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch fixed price for Plinko\n  const { data: gameSettings } = useQuery({\n    queryKey: [\"/api/games/plinko/settings\"],\n  });\n\n  useEffect(() => {\n    if (\n      gameSettings &&\n      typeof gameSettings === \"object\" &&\n      gameSettings !== null &&\n      \"price\" in gameSettings\n    ) {\n      setFixedPrice(String(gameSettings.price));\n    }\n  }, [gameSettings]);\n\n  const playGameMutation = useMutation({\n    mutationFn: async (data: {\n      gameType: string;\n      betAmount: string;\n      plinkoResult?: string;\n    }) => {\n      const response = await apiRequest(\"POST\", \"/api/games/play\", data);\n      return response.json() as Promise<GameResult>;\n    },\n    onSuccess: (result) => {\n      setLastResult(result);\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/vault\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/packs\"] });\n\n      // This mutation is no longer needed for Plinko - physics handles everything\n      console.log(\"Plinko mutation result (not used):\", result);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Game Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n      setIsPlaying(false);\n    },\n  });\n\n  const getPins = () => {\n    const pins = [];\n\n    // Exact Stake.us Plinko pyramid layout\n    // Row 1: 3 pins, Row 2: 4 pins, ..., Row 8: 10 pins\n    const rows = 8;\n    const startY = 140;\n    const rowSpacing = 40; // Vertical spacing between rows\n    const edgePadding = 10; // Distance from board edges for last row\n\n    for (let row = 0; row < rows; row++) {\n      const pinsInRow = row + 3; // Row 0: 3 pins, Row 1: 4 pins, etc.\n      const y = startY + row * rowSpacing;\n\n      // For the last row (10 pins), make it span nearly edge to edge\n      if (row === rows - 1) {\n        const availableWidth = BOARD_WIDTH - edgePadding * 2;\n        const pinSpacing = availableWidth / (pinsInRow - 1);\n        const startX = edgePadding;\n\n        for (let pin = 0; pin < pinsInRow; pin++) {\n          const x = startX + pin * pinSpacing;\n          pins.push({ x, y });\n        }\n      } else {\n        // For other rows, maintain proportional spacing based on last row\n        const lastRowWidth = BOARD_WIDTH - edgePadding * 2;\n        const maxPinSpacing = lastRowWidth / 9; // 9 spaces between 10 pins\n        const pinSpacing = maxPinSpacing;\n        const rowWidth = (pinsInRow - 1) * pinSpacing;\n        const startX = (BOARD_WIDTH - rowWidth) / 2;\n\n        for (let pin = 0; pin < pinsInRow; pin++) {\n          const x = startX + pin * pinSpacing;\n          pins.push({ x, y });\n        }\n      }\n    }\n\n    return pins;\n  };\n\n  const getOutcomePositions = () => {\n    const positions = [];\n    const bucketWidth = BOARD_WIDTH / OUTCOMES.length;\n    const y = BOARD_HEIGHT - 40;\n\n    for (let i = 0; i < OUTCOMES.length; i++) {\n      positions.push({\n        x: bucketWidth * i + bucketWidth / 2,\n        y,\n        outcome: OUTCOMES[i],\n      });\n    }\n    return positions;\n  };\n\n  const startPlinkoAnimation = (betAmount: string) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    // No predetermined target - let physics determine the outcome naturally\n    const bucketWidth = BOARD_WIDTH / OUTCOMES.length;\n\n    // Initialize ball to drop randomly between pins 1-2 or 2-3\n    const firstLayerPins = getPins().filter((_, index) => index < 3); // First 3 pins\n    const dropChoice = Math.random() < 0.5 ? 0 : 1; // Choose between first two gaps\n    const dropX =\n      (firstLayerPins[dropChoice].x + firstLayerPins[dropChoice + 1].x) / 2; // Drop between chosen pins\n\n    const ball: Ball = {\n      x: dropX + (Math.random() - 0.5) * 12, // More natural drop variation\n      y: 20,\n      vx: (Math.random() - 0.5) * 0.8, // Slightly more horizontal variance\n      vy: 0.5, // Small initial downward velocity\n      radius: BALL_RADIUS,\n      color: \"#00d4ff\",\n    };\n\n    ballRef.current = ball;\n    const pins = getPins();\n    const outcomePositions = getOutcomePositions();\n\n    const animate = () => {\n      ctx.clearRect(0, 0, BOARD_WIDTH, BOARD_HEIGHT);\n\n      // Draw background\n      const gradient = ctx.createLinearGradient(0, 0, 0, BOARD_HEIGHT);\n      gradient.addColorStop(0, \"rgba(59, 130, 246, 0.1)\");\n      gradient.addColorStop(1, \"rgba(147, 51, 234, 0.1)\");\n      ctx.fillStyle = gradient;\n      ctx.fillRect(0, 0, BOARD_WIDTH, BOARD_HEIGHT);\n\n      // Draw pins\n      pins.forEach((pin) => {\n        ctx.beginPath();\n        ctx.arc(pin.x, pin.y, PIN_RADIUS, 0, Math.PI * 2);\n        ctx.fillStyle = \"#64748b\";\n        ctx.fill();\n        ctx.strokeStyle = \"#94a3b8\";\n        ctx.lineWidth = 1;\n        ctx.stroke();\n      });\n\n      // Draw outcome buckets\n      outcomePositions.forEach((pos, index) => {\n        const bucketWidth = BOARD_WIDTH / OUTCOMES.length;\n        const bucketX = index * bucketWidth;\n\n        // Bucket background\n        ctx.fillStyle =\n          pos.outcome === \"Masterball\"\n            ? \"rgba(139, 92, 246, 0.2)\"\n            : pos.outcome === \"Ultraball\"\n              ? \"rgba(255, 215, 0, 0.2)\"\n              : pos.outcome === \"Greatball\"\n                ? \"rgba(59, 130, 246, 0.2)\"\n                : \"rgba(148, 163, 184, 0.2)\";\n        ctx.fillRect(bucketX, BOARD_HEIGHT - 60, bucketWidth, 60);\n\n        // Bucket border\n        ctx.strokeStyle =\n          pos.outcome === \"Masterball\"\n            ? \"#8b5cf6\"\n            : pos.outcome === \"Ultraball\"\n              ? \"#ffd700\"\n              : pos.outcome === \"Greatball\"\n                ? \"#3b82f6\"\n                : \"#94a3b8\";\n        ctx.lineWidth = 2;\n        ctx.strokeRect(bucketX, BOARD_HEIGHT - 60, bucketWidth, 60);\n\n        // Bucket label - properly centered\n        ctx.fillStyle =\n          pos.outcome === \"Masterball\"\n            ? \"#8b5cf6\"\n            : pos.outcome === \"Ultraball\"\n              ? \"#ffd700\"\n              : pos.outcome === \"Greatball\"\n                ? \"#3b82f6\"\n                : \"#64748b\";\n        ctx.font = \"bold 11px Inter\";\n        ctx.textAlign = \"center\";\n        ctx.fillText(pos.outcome, bucketX + bucketWidth / 2, BOARD_HEIGHT - 25);\n      });\n\n      // Physics for ball\n      if (ball.y < BOARD_HEIGHT - 70) {\n        // More realistic gravity (similar to real world)\n        ball.vy += 0.18;\n\n        // Natural air resistance\n        ball.vx *= 0.995; // Very light horizontal air resistance\n        ball.vy *= 0.998; // Minimal vertical air resistance\n\n        // Apply movement\n        ball.x += ball.vx;\n        ball.y += ball.vy;\n\n        // Add slight random wind effect for more natural movement\n        ball.vx += (Math.random() - 0.5) * 0.02;\n\n        // Natural collision detection - let physics handle the bouncing\n        pins.forEach((pin) => {\n          const dx = ball.x - pin.x;\n          const dy = ball.y - pin.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          const minDistance = ball.radius + PIN_RADIUS;\n\n          if (distance < minDistance && distance > 0) {\n            // Calculate collision normal\n            const nx = dx / distance;\n            const ny = dy / distance;\n\n            // Separate ball from pin\n            const separation = minDistance - distance;\n            ball.x += nx * separation;\n            ball.y += ny * separation;\n\n            // More realistic collision physics\n            const dotProduct = ball.vx * nx + ball.vy * ny;\n\n            // Natural bounce with slight energy loss\n            const restitution = 0.75 + Math.random() * 0.15; // Natural bounce coefficient\n            ball.vx -= 1.5 * dotProduct * nx * restitution;\n            ball.vy -= 1.5 * dotProduct * ny * restitution;\n\n            // Realistic surface friction\n            const friction = 0.82 + Math.random() * 0.08; // Natural friction variation\n            ball.vx *= friction;\n            ball.vy *= 0.95; // Slight vertical energy loss\n\n            // Natural deflection based on collision angle\n            const deflectionStrength = Math.abs(nx) * 0.15; // Stronger deflection on side hits\n            ball.vx += (Math.random() - 0.5) * deflectionStrength;\n          }\n        });\n\n        // Keep ball in bounds with natural wall bounces\n        if (ball.x < ball.radius) {\n          ball.x = ball.radius;\n          ball.vx = Math.abs(ball.vx) * 0.6; // Natural wall bounce\n        }\n        if (ball.x > BOARD_WIDTH - ball.radius) {\n          ball.x = BOARD_WIDTH - ball.radius;\n          ball.vx = -Math.abs(ball.vx) * 0.6; // Natural wall bounce\n        }\n\n        // Natural physics - no guidance needed\n      } else {\n        // Ball has reached the bottom - determine final outcome\n        // Make sure ball is fully inside a bucket, not just touching\n        const bucketWidth = BOARD_WIDTH / OUTCOMES.length;\n\n        // Clamp ball position to ensure it's within bounds\n        ball.x = Math.max(\n          ball.radius,\n          Math.min(BOARD_WIDTH - ball.radius, ball.x),\n        );\n\n        // Find which bucket the ball center is in\n        const bucketIndex = Math.floor(ball.x / bucketWidth);\n        const clampedIndex = Math.max(\n          0,\n          Math.min(OUTCOMES.length - 1, bucketIndex),\n        );\n\n        // Move ball to center of the bucket it landed in\n        const bucketCenter = clampedIndex * bucketWidth + bucketWidth / 2;\n        ball.x = bucketCenter;\n        ball.y = BOARD_HEIGHT - 30; // Position ball inside the bucket\n\n        if (!animationComplete) {\n          setAnimationComplete(true);\n\n          // Trust the physics simulation - use the visual outcome\n          const actualOutcome = OUTCOMES[clampedIndex];\n          setFinalOutcome(actualOutcome);\n\n          // Send the actual physics result to backend for pack assignment\n          console.log(\n            `Frontend physics result: ${actualOutcome} (bucket ${clampedIndex})`,\n          );\n\n          // Call backend with physics result\n          playGameMutation.mutate({\n            gameType: \"plinko\",\n            betAmount: fixedPrice,\n            plinkoResult: actualOutcome, // Send the visual result\n          });\n\n          setTimeout(() => {\n            setShowPackAssigned(true);\n          }, 1000);\n        }\n      }\n\n      // Draw ball\n      ctx.beginPath();\n      ctx.arc(ball.x, ball.y, ball.radius, 0, Math.PI * 2);\n\n      // Ball gradient\n      const ballGradient = ctx.createRadialGradient(\n        ball.x - 3,\n        ball.y - 3,\n        0,\n        ball.x,\n        ball.y,\n        ball.radius,\n      );\n      ballGradient.addColorStop(0, \"#ffffff\");\n      ballGradient.addColorStop(1, ball.color);\n      ctx.fillStyle = ballGradient;\n      ctx.fill();\n      ctx.strokeStyle = \"#0ea5e9\";\n      ctx.lineWidth = 2;\n      ctx.stroke();\n\n      if (ball.y < BOARD_HEIGHT - 60) {\n        animationRef.current = requestAnimationFrame(animate);\n      }\n    };\n\n    animate();\n  };\n\n  const handlePlay = () => {\n    if (!fixedPrice || parseFloat(fixedPrice) <= 0) {\n      toast({\n        title: \"Pricing Error\",\n        description: \"Game pricing not available. Please try again later.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsPlaying(true);\n    setAnimationComplete(false);\n    setFinalOutcome(null);\n    setLastResult(null);\n\n    // Clear the canvas and redraw static board immediately\n    drawStaticBoard();\n\n    // Start physics simulation immediately - pass fixed price\n    startPlinkoAnimation(fixedPrice);\n  };\n\n  const drawStaticBoard = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    ctx.clearRect(0, 0, BOARD_WIDTH, BOARD_HEIGHT);\n\n    // Draw background\n    const gradient = ctx.createLinearGradient(0, 0, 0, BOARD_HEIGHT);\n    gradient.addColorStop(0, \"rgba(59, 130, 246, 0.1)\");\n    gradient.addColorStop(1, \"rgba(147, 51, 234, 0.1)\");\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, BOARD_WIDTH, BOARD_HEIGHT);\n\n    const pins = getPins();\n    const outcomePositions = getOutcomePositions();\n\n    // Draw pins\n    pins.forEach((pin) => {\n      ctx.beginPath();\n      ctx.arc(pin.x, pin.y, PIN_RADIUS, 0, Math.PI * 2);\n      ctx.fillStyle = \"#64748b\";\n      ctx.fill();\n      ctx.strokeStyle = \"#94a3b8\";\n      ctx.lineWidth = 1;\n      ctx.stroke();\n    });\n\n    // Draw outcome buckets\n    outcomePositions.forEach((pos, index) => {\n      const bucketWidth = BOARD_WIDTH / OUTCOMES.length;\n      const bucketX = index * bucketWidth;\n\n      ctx.fillStyle =\n        pos.outcome === \"Masterball\"\n          ? \"rgba(139, 92, 246, 0.2)\"\n          : pos.outcome === \"Ultraball\"\n            ? \"rgba(255, 215, 0, 0.2)\"\n            : pos.outcome === \"Greatball\"\n              ? \"rgba(59, 130, 246, 0.2)\"\n              : \"rgba(148, 163, 184, 0.2)\";\n      ctx.fillRect(bucketX, BOARD_HEIGHT - 60, bucketWidth, 60);\n\n      ctx.strokeStyle =\n        pos.outcome === \"Masterball\"\n          ? \"#8b5cf6\"\n          : pos.outcome === \"Ultraball\"\n            ? \"#ffd700\"\n            : pos.outcome === \"Greatball\"\n              ? \"#3b82f6\"\n              : \"#94a3b8\";\n      ctx.lineWidth = 2;\n      ctx.strokeRect(bucketX, BOARD_HEIGHT - 60, bucketWidth, 60);\n\n      ctx.fillStyle =\n        pos.outcome === \"Masterball\"\n          ? \"#8b5cf6\"\n          : pos.outcome === \"Ultraball\"\n            ? \"#ffd700\"\n            : pos.outcome === \"Greatball\"\n              ? \"#3b82f6\"\n              : \"#64748b\";\n      ctx.font = \"bold 11px Inter\";\n      ctx.textAlign = \"center\";\n      ctx.fillText(pos.outcome, bucketX + bucketWidth / 2, BOARD_HEIGHT - 25);\n    });\n  };\n\n  useEffect(() => {\n    drawStaticBoard();\n\n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, []);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Game Board */}\n      <Card className=\"gaming-card\">\n        <CardContent className=\"p-6\">\n          <div className=\"text-center mb-6\">\n            <h3 className=\"font-gaming font-bold text-xl mb-2\">Plinko Board</h3>\n            <p className=\"text-muted-foreground\">\n              Drop your ball through 9 layers of pins!\n            </p>\n          </div>\n\n          <div className=\"flex justify-center\">\n            <div className=\"relative w-full max-w-[600px]\">\n              <canvas\n                ref={canvasRef}\n                width={BOARD_WIDTH}\n                height={BOARD_HEIGHT}\n                className=\"border border-border rounded-lg bg-background/50 w-full h-auto max-w-full\"\n                style={{ maxWidth: \"100%\", height: \"auto\" }}\n              />\n\n              {/* Result Overlay with Pack Design */}\n              {animationComplete && finalOutcome && !showPackAssigned && (\n                <div className=\"absolute inset-0 flex items-center justify-center bg-black/50 rounded-lg\">\n                  <div className=\"text-center space-y-2 p-3\">\n                    <div\n                      className={`w-16 h-20 mx-auto rounded-lg overflow-hidden border-2 ${\n                        finalOutcome === \"Masterball\"\n                          ? \"border-purple-500 shadow-lg shadow-purple-500/50\"\n                          : finalOutcome === \"Ultraball\"\n                            ? \"border-yellow-500 shadow-lg shadow-yellow-500/50\"\n                            : finalOutcome === \"Greatball\"\n                              ? \"border-blue-500 shadow-lg shadow-blue-500/50\"\n                              : \"border-red-500 shadow-lg shadow-red-500/50\"\n                      }`}\n                    >\n                      <PackImage\n                        packType={finalOutcome.toLowerCase()}\n                        size=\"small\"\n                      />\n                    </div>\n                    <div className=\"text-white\">\n                      <h4 className=\"font-bold text-lg\">\n                        {finalOutcome} Pack!\n                      </h4>\n                      <p className=\"text-xs opacity-80\">\n                        Ball landed in the {finalOutcome} bucket\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* Pack Assignment Overlay with Pack Design */}\n              {showPackAssigned && (\n                <div className=\"absolute inset-0 flex items-center justify-center bg-black/70 rounded-lg\">\n                  <div className=\"text-center space-y-4 p-4 bg-background/90 rounded-lg border border-border max-w-xs mx-2\">\n                    <div className=\"space-y-2\">\n                      <div\n                        className={`w-16 h-20 mx-auto rounded-lg overflow-hidden border-2 ${\n                          finalOutcome === \"Masterball\"\n                            ? \"border-purple-500 shadow-lg shadow-purple-500/50\"\n                            : finalOutcome === \"Ultraball\"\n                              ? \"border-yellow-500 shadow-lg shadow-yellow-500/50\"\n                              : finalOutcome === \"Greatball\"\n                                ? \"border-blue-500 shadow-lg shadow-blue-500/50\"\n                                : \"border-red-500 shadow-lg shadow-red-500/50\"\n                        }`}\n                      >\n                        <PackImage\n                          packType={finalOutcome?.toLowerCase() || \"pokeball\"}\n                          size=\"large\"\n                        />\n                      </div>\n                      <h4 className=\"font-bold text-xl text-white\">\n                        Pack Assigned!\n                      </h4>\n                      <p className=\"text-green-400 font-medium\">\n                        {finalOutcome} Pack added to \"My Packs\"\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Your {finalOutcome} pack is ready to open!\n                      </p>\n                    </div>\n                    <Button\n                      onClick={() => {\n                        setShowPackAssigned(false);\n                        setIsPlaying(false);\n                        setFinalOutcome(null);\n                        setAnimationComplete(false);\n                      }}\n                      className=\"w-full bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700\"\n                      data-testid=\"button-pack-assigned-ok\"\n                    >\n                      OK\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Game Controls */}\n      <Card className=\"gaming-card\">\n        <CardContent className=\"p-6\">\n          <div className=\"space-y-4\">\n            <div className=\"bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/30 dark:to-purple-900/30 rounded-lg p-2 border border-blue-200 dark:border-blue-700\">\n              <div className=\"flex items-center justify-center space-x-1\">\n                <DollarSign className=\"h-4 w-4 text-blue-600 dark:text-blue-400\" />\n                <span\n                  className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\"\n                  data-testid=\"text-game-cost\"\n                >\n                  Cost: {fixedPrice} credits per play\n                </span>\n              </div>\n            </div>\n\n            <Button\n              onClick={handlePlay}\n              disabled={isPlaying || playGameMutation.isPending}\n              className=\"w-full bg-gradient-to-r from-primary to-accent hover:glow-effect transition-all text-lg py-6\"\n              data-testid=\"button-play-plinko\"\n            >\n              {isPlaying || playGameMutation.isPending ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2\"></div>\n                  Ball Dropping...\n                </>\n              ) : (\n                <>\n                  <Play className=\"w-5 h-5 mr-2\" />\n                  Drop Ball ({fixedPrice} Credits)\n                </>\n              )}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Pack Tiers Display */}\n      <Card className=\"gaming-card\">\n        <CardContent className=\"p-6\">\n          <h4 className=\"font-semibold mb-4\">Pack Tiers</h4>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n            <div className=\"text-center space-y-2\">\n              <div className=\"w-16 h-20 mx-auto rounded-lg overflow-hidden border-2 border-red-500 shadow-lg shadow-red-500/50\">\n                <PackImage packType=\"pokeball\" size=\"large\" />\n              </div>\n              <div>\n                <p className=\"font-semibold text-red-400\">Pokeball</p>\n                <p className=\"text-xs text-muted-foreground\">Most Common</p>\n              </div>\n            </div>\n            <div className=\"text-center space-y-2\">\n              <div className=\"w-16 h-20 mx-auto rounded-lg overflow-hidden border-2 border-blue-500 shadow-lg shadow-blue-500/50\">\n                <PackImage packType=\"greatball\" size=\"large\" />\n              </div>\n              <div>\n                <p className=\"font-semibold text-blue-400\">Great Ball</p>\n                <p className=\"text-xs text-muted-foreground\">Uncommon</p>\n              </div>\n            </div>\n            <div className=\"text-center space-y-2\">\n              <div className=\"w-16 h-20 mx-auto rounded-lg overflow-hidden border-2 border-yellow-500 shadow-lg shadow-yellow-500/50\">\n                <PackImage packType=\"ultraball\" size=\"large\" />\n              </div>\n              <div>\n                <p className=\"font-semibold text-yellow-400\">Ultra Ball</p>\n                <p className=\"text-xs text-muted-foreground\">Rare</p>\n              </div>\n            </div>\n            <div className=\"text-center space-y-2\">\n              <div className=\"w-16 h-20 mx-auto rounded-lg overflow-hidden border-2 border-purple-500 shadow-lg shadow-purple-500/50\">\n                <PackImage packType=\"masterball\" size=\"large\" />\n              </div>\n              <div>\n                <p className=\"font-semibold text-purple-400\">Master Ball</p>\n                <p className=\"text-xs text-muted-foreground\">Legendary</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":25204},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType>({\n  theme: \"dark\",\n  toggleTheme: () => {},\n});\n\nexport function useTheme() {\n  return useContext(ThemeContext);\n}\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(\"dark\");\n\n  useEffect(() => {\n    // Load theme from localStorage or default to dark\n    const savedTheme = localStorage.getItem(\"flair-tcg-theme\") as Theme;\n    if (savedTheme) {\n      setTheme(savedTheme);\n    }\n  }, []);\n\n  useEffect(() => {\n    // Apply theme to document\n    const root = document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    \n    // Save to localStorage\n    localStorage.setItem(\"flair-tcg-theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prev => prev === \"dark\" ? \"light\" : \"dark\");\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n","size_bytes":1182},"client/src/components/WheelGame.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { RotateCcw, Coins } from \"lucide-react\";\nimport masterballPack from '@assets/ChatGPT Image Aug 30, 2025, 11_21_42 PM_1756651828049.png';\nimport ultraballPack from '@assets/ChatGPT Image Aug 30, 2025, 11_21_45 PM_1756651828049.png';\nimport greatballPack from '@assets/ChatGPT Image Aug 30, 2025, 11_22_18 PM_1756651828048.png';\nimport pokeballPack from '@assets/ChatGPT Image Aug 30, 2025, 11_22_50 PM_1756651828048.png';\n\ninterface GameResult {\n  success: boolean;\n  result: {\n    cardId: string;\n    tier: string;\n    gameType: string;\n  };\n  sessionId: string;\n}\n\nconst PackImage = ({ packType, size = 'small' }: { packType: string; size?: 'small' | 'large' }) => {\n  const getPackImage = (type: string) => {\n    switch (type.toLowerCase()) {\n      case 'masterball':\n        return masterballPack;\n      case 'ultraball':\n        return ultraballPack;\n      case 'greatball':\n        return greatballPack;\n      case 'pokeball':\n        return pokeballPack;\n      default:\n        return pokeballPack;\n    }\n  };\n  \n  const imageSize = size === 'small' ? 'w-8 h-10' : 'w-full h-full';\n  \n  return (\n    <div className={`${imageSize} mx-auto`}>\n      <img \n        src={getPackImage(packType)} \n        alt={`${packType} pack`}\n        className=\"w-full h-full object-contain pixel-crisp\"\n        style={{ imageRendering: 'pixelated' }}\n      />\n    </div>\n  );\n};\n\nexport function WheelGame() {\n  const [betAmount, setBetAmount] = useState(\"20\");\n  const [isSpinning, setIsSpinning] = useState(false);\n  const [rotation, setRotation] = useState(0);\n  const [lastResult, setLastResult] = useState<GameResult | null>(null);\n  const [showPackDialog, setShowPackDialog] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const wheelSegments = [\n    { tier: \"pokeball\", color: \"red\", label: \"Poké Ball\", odds: \"61%\", slices: 22 },\n    { tier: \"greatball\", color: \"blue\", label: \"Great Ball\", odds: \"22%\", slices: 8 },\n    { tier: \"ultraball\", color: \"yellow\", label: \"Ultra Ball\", odds: \"14%\", slices: 5 },\n    { tier: \"masterball\", color: \"purple\", label: \"Master Ball\", odds: \"2.8%\", slices: 1 },\n  ];\n\n  // Generate wheel slice positions for 36 total slices with red pokeballs as separators\n  const generateWheelSlices = () => {\n    const slices: Array<{\n      tier: string;\n      color: string;\n      label: string;\n      odds: string;\n      slices: number;\n      startAngle: number;\n      endAngle: number;\n      midAngle: number;\n    }> = [];\n    let currentAngle = 0;\n    const anglePerSlice = 360 / 36;\n    \n    // Create evenly distributed pattern with red pokeballs as separators\n    const pattern = new Array(36);\n    \n    // Place non-red balls first in evenly spaced positions\n    // Place the 1 masterball\n    pattern[0] = 'masterball';\n    \n    // Place 5 ultraballs evenly (every ~7 positions)\n    for (let i = 0; i < 5; i++) {\n      const pos = 5 + (i * 7); // positions 5, 12, 19, 26, 33\n      if (pos < 36) pattern[pos] = 'ultraball';\n    }\n    \n    // Place 8 greatballs in remaining good positions\n    const greatballPositions = [2, 8, 11, 15, 18, 22, 28, 31];\n    greatballPositions.forEach((pos, i) => {\n      if (pos < 36 && !pattern[pos]) {\n        pattern[pos] = 'greatball';\n      }\n    });\n    \n    // Fill all remaining positions with pokeballs (red separators)\n    for (let i = 0; i < 36; i++) {\n      if (!pattern[i]) {\n        pattern[i] = 'pokeball';\n      }\n    }\n    \n    pattern.forEach((tier, index) => {\n      const segment = wheelSegments.find(s => s.tier === tier) || wheelSegments[0];\n      slices.push({\n        ...segment,\n        startAngle: currentAngle,\n        endAngle: currentAngle + anglePerSlice,\n        midAngle: currentAngle + anglePerSlice / 2\n      });\n      currentAngle += anglePerSlice;\n    });\n    \n    return slices;\n  };\n\n  const wheelSlices = generateWheelSlices();\n\n  const playGameMutation = useMutation({\n    mutationFn: async (data: { gameType: string; betAmount: string; wheelResult?: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/games/play\", data);\n      return response.json() as Promise<GameResult>;\n    },\n    onSuccess: (result) => {\n      // Server result received, show popup immediately (animation is already complete)\n      setLastResult(result);\n      setShowPackDialog(true);\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/vault\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Game Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n    onSettled: () => {\n      // Stop spinning state immediately when server responds\n      setIsSpinning(false);\n    },\n  });\n\n  const handleSpin = () => {\n    const bet = parseFloat(betAmount);\n    if (isNaN(bet) || bet <= 0) {\n      toast({\n        title: \"Invalid Bet\",\n        description: \"Please enter a valid bet amount\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (bet !== 20) {\n      toast({\n        title: \"Fixed Entry Cost\",\n        description: \"Wheel Spin requires exactly 20 credits\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Start spinning animation\n    setIsSpinning(true);\n    setLastResult(null);\n    setShowPackDialog(false);\n    \n    // Generate random final rotation (multiple spins + random final position)\n    const spins = 5 + Math.random() * 3; // 5-8 full rotations\n    const finalAngle = Math.random() * 360; // Random final position\n    const finalRotation = rotation + (spins * 360) + finalAngle;\n    \n    setRotation(finalRotation);\n    \n    // After animation completes, determine what the needle landed on\n    setTimeout(() => {\n      // The needle is fixed at top (0°) pointing down into the wheel\n      // We need to find what slice is at the top after rotation\n      const wheelFinalPosition = (finalRotation % 360 + 360) % 360;\n      \n      // Since the wheel rotated, we need to find what slice is now at position 0° (top)\n      // This means we need to look at the original slice positions offset by the wheel rotation\n      const needlePointsAt = (360 - wheelFinalPosition) % 360;\n      \n      // Find which slice the needle is pointing to\n      const targetSlice = wheelSlices.find(slice => {\n        // Handle wrap-around cases\n        if (slice.startAngle <= slice.endAngle) {\n          return needlePointsAt >= slice.startAngle && needlePointsAt < slice.endAngle;\n        } else {\n          // Case where slice crosses 0° boundary\n          return needlePointsAt >= slice.startAngle || needlePointsAt < slice.endAngle;\n        }\n      }) || wheelSlices[0]; // fallback to first slice\n      \n      const wheelResult = targetSlice.tier;\n      \n      playGameMutation.mutate({\n        gameType: \"wheel\",\n        betAmount: betAmount,\n        wheelResult: wheelResult,\n      });\n    }, 3500); // Wait for animation to complete\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Wheel Visualization */}\n      <Card className=\"gaming-card\">\n        <CardContent className=\"p-6\">\n          <div className=\"text-center mb-6\">\n            <h3 className=\"font-gaming font-bold text-xl mb-2\">Fortune Wheel</h3>\n            <p className=\"text-muted-foreground\">Spin the wheel and test your luck!</p>\n          </div>\n          \n          <div className=\"flex justify-center\">\n            <div className=\"relative\">\n              {/* Wheel */}\n              <div \n                className=\"w-80 h-80 rounded-full border-4 border-primary relative overflow-hidden shadow-2xl\"\n                style={{\n                  background: `conic-gradient(\n                    from 0deg,\n                    ${wheelSlices.map((slice, index) => {\n                      // Use the slice's actual pokeball color\n                      return `var(--${slice.color}) ${slice.startAngle}deg ${slice.endAngle}deg`;\n                    }).join(', ')}\n                  )`,\n                  transform: `rotate(${rotation}deg)`,\n                  transition: isSpinning ? \"transform 3.5s cubic-bezier(0.25, 0.1, 0.25, 1)\" : \"none\",\n                }}\n              >\n                {/* Slice Separators */}\n                {wheelSlices.map((slice, index) => (\n                  <div\n                    key={index}\n                    className=\"absolute w-full h-full\"\n                    style={{\n                      transform: `rotate(${slice.startAngle}deg)`,\n                      transformOrigin: \"center\",\n                    }}\n                  >\n                    <div className=\"absolute top-0 left-1/2 w-0.5 h-1/2 bg-white/20 transform -translate-x-1/2\"></div>\n                  </div>\n                ))}\n                \n                {/* No labels - colors only */}\n              </div>\n              \n              {/* Pointer - pointing down into the wheel */}\n              <div className=\"absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-2\">\n                <div className=\"w-0 h-0 border-l-4 border-r-4 border-t-8 border-l-transparent border-r-transparent border-t-white\"></div>\n              </div>\n              \n              {/* Center Circle */}\n              <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-12 h-12 bg-gradient-to-br from-primary to-accent rounded-full flex items-center justify-center shadow-lg border-2 border-white\">\n                <RotateCcw className=\"w-6 h-6 text-white\" />\n              </div>\n\n              {/* Pack Assignment Dialog - Same as Plinko */}\n              {showPackDialog && lastResult && (\n                <div className=\"absolute inset-0 flex items-center justify-center bg-black/70 rounded-lg\">\n                  <div className=\"text-center space-y-6 p-6 bg-background/90 rounded-lg border border-border max-w-sm\">\n                    <div className=\"space-y-3\">\n                      <div className={`w-20 h-28 mx-auto rounded-lg overflow-hidden border-2 ${\n                        lastResult.result.tier === 'masterball' ? 'border-purple-500 shadow-lg shadow-purple-500/50' :\n                        lastResult.result.tier === 'ultraball' ? 'border-yellow-500 shadow-lg shadow-yellow-500/50' :\n                        lastResult.result.tier === 'greatball' ? 'border-blue-500 shadow-lg shadow-blue-500/50' :\n                        'border-red-500 shadow-lg shadow-red-500/50'\n                      }`}>\n                        <PackImage packType={lastResult.result.tier} size=\"large\" />\n                      </div>\n                      <h4 className=\"font-bold text-xl text-white\">Pack Won!</h4>\n                      <p className=\"text-green-400 font-medium\">\n                        {lastResult.result.tier === 'pokeball' ? 'Poké Ball' :\n                         lastResult.result.tier === 'greatball' ? 'Great Ball' :\n                         lastResult.result.tier === 'ultraball' ? 'Ultra Ball' :\n                         'Master Ball'} Pack added to \"My Packs\"\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Your {lastResult.result.tier === 'pokeball' ? 'Poké Ball' :\n                              lastResult.result.tier === 'greatball' ? 'Great Ball' :\n                              lastResult.result.tier === 'ultraball' ? 'Ultra Ball' :\n                              'Master Ball'} pack is ready to open!\n                      </p>\n                    </div>\n                    <Button\n                      onClick={() => setShowPackDialog(false)}\n                      className=\"w-full bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700\"\n                      data-testid=\"button-pack-dialog-ok\"\n                    >\n                      OK\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n\n        </CardContent>\n      </Card>\n\n      {/* Game Controls */}\n      <Card className=\"gaming-card\">\n        <CardContent className=\"p-6\">\n          <Button\n            onClick={handleSpin}\n            disabled={isSpinning || playGameMutation.isPending}\n            className=\"w-full bg-gradient-to-r from-uncommon to-rare hover:glow-effect transition-all text-lg py-6\"\n            data-testid=\"button-spin-wheel\"\n          >\n            {isSpinning || playGameMutation.isPending ? (\n              <>\n                <RotateCcw className=\"w-5 h-5 mr-2 animate-spin\" />\n                Spinning...\n              </>\n            ) : (\n              <>\n                <RotateCcw className=\"w-5 h-5 mr-2\" />\n                Spin Wheel (20 Credits)\n              </>\n            )}\n          </Button>\n          <div className=\"flex justify-center mt-4\">\n            <Badge className=\"bg-purple-600 text-white\">\n              Win Mystery Packs\n            </Badge>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Pack Odds Display */}\n      <Card className=\"gaming-card\">\n        <CardContent className=\"p-6\">\n          <h4 className=\"font-semibold mb-6 text-center\">Pack Rewards & Odds</h4>\n          <div className=\"space-y-3\">\n            {wheelSegments.map((segment) => (\n              <div key={segment.tier} className=\"flex items-center gap-4 p-3 rounded-lg bg-gradient-to-r from-muted/20 to-muted/10 border border-muted/30 hover:border-primary/40 transition-all\">\n                {/* Pack Image */}\n                <div className=\"w-24 h-32 flex-shrink-0\">\n                  <PackImage packType={segment.tier} size=\"large\" />\n                </div>\n                \n                {/* Pack Info */}\n                <div className=\"flex-1\">\n                  <div className=\"font-bold text-lg\">{segment.label}</div>\n                  <div className=\"text-sm text-muted-foreground\">{segment.slices} slices on wheel</div>\n                </div>\n                \n                {/* Odds */}\n                <div className=\"text-right flex-shrink-0\">\n                  <div className=\"text-2xl font-bold text-primary\">{segment.odds}</div>\n                  <div className=\"text-xs text-muted-foreground\">chance</div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n    </div>\n  );\n}\n","size_bytes":14758},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { getQueryFn } from \"@/lib/queryClient\";\n\nexport function useAuth() {\n  const { data: user, isLoading, error } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n    retry: false,\n    refetchOnWindowFocus: false,\n    refetchOnMount: true,\n    refetchOnReconnect: false,\n    staleTime: 30000, // 30 seconds\n    gcTime: 60000, // 1 minute\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user && !error,\n    isAdmin: !!user && (user as any).role === 'admin',\n  };\n}\n","size_bytes":584},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Navigation } from \"@/components/Navigation\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogDescription } from \"@/components/ui/dialog\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { \n  Users, \n  Package, \n  Settings, \n  TrendingUp, \n  Ban,\n  Plus,\n  Edit,\n  Trash2,\n  Eye,\n  ChevronDown,\n  ChevronUp,\n  X,\n  ToggleLeft,\n  ToggleRight,\n  Coins,\n  History,\n  DollarSign\n} from \"lucide-react\";\nimport type { User, VirtualLibraryCard } from \"@shared/schema\";\n\nconst virtualLibrarySchema = z.object({\n  name: z.string().min(1, \"Card name is required\"),\n  tier: z.enum([\"D\", \"C\", \"B\", \"A\", \"S\", \"SS\", \"SSS\"]),\n  imageUrl: z.string().optional(),\n  marketValue: z.string().min(1, \"Market value is required\"),\n  stock: z.number().min(0, \"Stock must be 0 or greater\").optional(),\n});\n\nconst virtualPackSchema = z.object({\n  name: z.string().min(1, \"Pack name is required\"),\n  price: z.string().min(1, \"Price is required\"),\n  imageUrl: z.string().optional(),\n  category: z.enum([\"Special\", \"Classic\"]),\n});\n\nconst userEditSchema = z.object({\n  credits: z.number().min(0, \"Credits must be 0 or greater\"),\n});\n\ntype VirtualLibraryFormData = z.infer<typeof virtualLibrarySchema>;\ntype VirtualPackFormData = z.infer<typeof virtualPackSchema>;\ntype UserEditFormData = z.infer<typeof userEditSchema>;\n\nconst tierColors = {\n  D: \"gray\",\n  C: \"green\",\n  B: \"blue\", \n  A: \"purple\",\n  S: \"yellow\",\n  SS: \"orange\",\n  SSS: \"red\"\n};\n\n// Card Gallery Component for displaying cards by tier\nconst CardGalleryContent = ({ packId }: { packId: string }) => {\n  const [galleryCards, setGalleryCards] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const { toast } = useToast();\n\n  const handleRemoveCard = async (cardId: string) => {\n    try {\n      // Remove the card from the pack by filtering it out and resaving\n      const currentPackCards = galleryCards.filter(card => card.id !== cardId);\n      const cardIds = currentPackCards.map(card => card.id);\n      const weights = currentPackCards.map(() => 1);\n      \n      const response = await apiRequest(\"POST\", `/api/admin/virtual-packs/${packId}/cards`, {\n        cardIds,\n        weights\n      });\n      \n      if (response.ok) {\n        // Update local state immediately\n        setGalleryCards(currentPackCards);\n        toast({\n          title: \"Success\",\n          description: \"Card removed from pack\",\n        });\n      }\n    } catch (error) {\n      console.error(\"Failed to remove card:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to remove card from pack\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    const loadGalleryCards = async () => {\n      if (!packId) return;\n      \n      setLoading(true);\n      try {\n        const packCardsResponse = await apiRequest(\"GET\", `/api/admin/virtual-packs/${packId}/cards`);\n        const allCardsResponse = await apiRequest(\"GET\", \"/api/admin/cards\");\n        \n        const packCards = await packCardsResponse.json();\n        const allCards = await allCardsResponse.json();\n        \n        console.log(\"Pack cards:\", packCards);\n        console.log(\"All cards:\", allCards);\n        \n        if (!Array.isArray(packCards) || !Array.isArray(allCards)) {\n          console.error(\"Invalid data structure - expected arrays\");\n          setGalleryCards([]);\n          return;\n        }\n        \n        const cardDetails = packCards.map((pc: any) => {\n          const card = allCards.find((c: any) => c.id === pc.cardId);\n          return card ? { ...card, weight: pc.weight } : null;\n        }).filter(Boolean);\n        \n        console.log(\"Gallery loaded:\", cardDetails.length, \"cards for pack\", packId);\n        setGalleryCards(cardDetails);\n      } catch (error) {\n        console.error(\"Failed to load gallery cards:\", error);\n        setGalleryCards([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadGalleryCards();\n  }, [packId]);\n\n  if (loading) {\n    return <div className=\"flex items-center justify-center h-32\">Loading cards...</div>;\n  }\n\n  if (galleryCards.length === 0) {\n    return <div className=\"text-center text-muted-foreground py-8\">No cards in this pack</div>;\n  }\n\n  // Group cards by tier\n  const cardsByTier = galleryCards.reduce((acc, card: any) => {\n    const tier = card.tier || 'D';\n    if (!acc[tier]) acc[tier] = [];\n    acc[tier].push(card);\n    return acc;\n  }, {} as Record<string, any[]>);\n\n  const tierOrder = ['SSS', 'SS', 'S', 'A', 'B', 'C', 'D'];\n  \n  return (\n    <div className=\"space-y-6\">\n      {tierOrder.map(tier => {\n        const tierCards = cardsByTier[tier];\n        if (!tierCards || tierCards.length === 0) return null;\n        \n        return (\n          <div key={tier} className=\"space-y-3\">\n            <div className=\"flex items-center space-x-2\">\n              <div className={`w-6 h-6 rounded-full bg-${tierColors[tier as keyof typeof tierColors]}/20 flex items-center justify-center`}>\n                <span className={`text-sm font-bold tier-${tierColors[tier as keyof typeof tierColors]}`}>\n                  {tier}\n                </span>\n              </div>\n              <h3 className=\"text-lg font-semibold\">\n                {tier} Tier ({tierCards.length} card{tierCards.length !== 1 ? 's' : ''})\n              </h3>\n            </div>\n            \n            <div className=\"grid grid-cols-4 md:grid-cols-6 lg:grid-cols-8 xl:grid-cols-10 gap-3\">\n              {tierCards.map((card: any) => (\n                <div key={card.id} className=\"relative group\">\n                  <div className=\"aspect-[3/4] rounded-md overflow-hidden bg-muted/30 border border-muted hover:border-primary/50 transition-colors w-20 h-28\">\n                    {card.imageUrl ? (\n                      <img \n                        src={card.imageUrl} \n                        alt={card.name}\n                        className=\"w-full h-full object-cover\"\n                        onError={(e) => {\n                          e.currentTarget.style.display = 'none';\n                          e.currentTarget.nextElementSibling?.setAttribute('style', 'display: flex');\n                        }}\n                      />\n                    ) : null}\n                    <div className=\"w-full h-full bg-gradient-to-br from-muted to-muted/60 flex items-center justify-center\" style={{ display: card.imageUrl ? 'none' : 'flex' }}>\n                      <Package className=\"w-4 h-4 text-muted-foreground\" />\n                    </div>\n                  </div>\n                  \n                  {/* Remove Button */}\n                  <Button\n                    size=\"sm\"\n                    variant=\"destructive\"\n                    className=\"absolute -top-1 -right-1 w-5 h-5 p-0 rounded-full opacity-0 group-hover:opacity-100 transition-opacity\"\n                    onClick={() => handleRemoveCard(card.id)}\n                    data-testid={`button-remove-card-${card.id}`}\n                  >\n                    <X className=\"w-3 h-3\" />\n                  </Button>\n                  \n                  {/* Card Info Overlay */}\n                  <div className=\"absolute bottom-0 left-0 right-0 bg-black/90 text-white p-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n                    <div className=\"text-[10px] font-medium truncate\">{card.name}</div>\n                    <div className=\"text-[9px] text-gray-300\">{card.marketValue}c</div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default function Admin() {\n  const { toast } = useToast();\n  const { isAuthenticated, isAdmin, isLoading } = useAuth();\n  const queryClient = useQueryClient();\n  const [inventorySection, setInventorySection] = useState<\"inventory\" | \"content\">(\"inventory\");\n  const [editingCard, setEditingCard] = useState<any>(null);\n  const [editingPack, setEditingPack] = useState<any>(null);\n  const [showPackCardSelector, setShowPackCardSelector] = useState(false);\n  const [selectedCards, setSelectedCards] = useState<string[]>([]);\n  const [expandedPacks, setExpandedPacks] = useState<Set<string>>(new Set());\n  const [packCardPools, setPackCardPools] = useState<Record<string, any[]>>({});\n  const [showCardGallery, setShowCardGallery] = useState(false);\n  const [galleryPack, setGalleryPack] = useState<any>(null);\n  const [inventorySearch, setInventorySearch] = useState(\"\");\n  const [editingUser, setEditingUser] = useState<any>(null);\n  const [showUserTransactions, setShowUserTransactions] = useState(false);\n  const [selectedUserId, setSelectedUserId] = useState<string | null>(null);\n\n  // Set up form data when editing a card\n  useEffect(() => {\n    if (editingCard) {\n      virtualLibraryForm.reset({\n        name: editingCard.name,\n        tier: editingCard.tier,\n        imageUrl: editingCard.imageUrl || \"\",\n        marketValue: editingCard.marketValue.toString(),\n        stock: editingCard.stock || 0,\n      });\n    }\n  }, [editingCard]);\n\n  const virtualLibraryForm = useForm<VirtualLibraryFormData>({\n    resolver: zodResolver(virtualLibrarySchema),\n    defaultValues: {\n      name: \"\",\n      tier: \"D\",\n      imageUrl: \"\",\n      marketValue: \"\",\n      stock: 0,\n    },\n  });\n\n  const virtualPackForm = useForm<VirtualPackFormData>({\n    resolver: zodResolver(virtualPackSchema),\n    defaultValues: {\n      name: \"\",\n      price: \"\",\n      imageUrl: \"\",\n      category: \"Classic\",\n    },\n  });\n\n  const userEditForm = useForm<UserEditFormData>({\n    resolver: zodResolver(userEditSchema),\n    defaultValues: {\n      credits: 0,\n    },\n  });\n\n  // Set up form data when editing a user\n  useEffect(() => {\n    if (editingUser) {\n      userEditForm.reset({\n        credits: parseFloat(editingUser.credits || '0'),\n      });\n    }\n  }, [editingUser]);\n\n  // Data queries\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/admin/stats\"],\n    enabled: !!isAuthenticated,\n    retry: (failureCount, error) => !isUnauthorizedError(error) && failureCount < 3,\n  });\n\n  const { data: users } = useQuery({\n    queryKey: [\"/api/admin/users\"],\n    enabled: !!isAuthenticated,\n    retry: (failureCount, error) => !isUnauthorizedError(error) && failureCount < 3,\n  });\n\n  const { data: allCards } = useQuery({\n    queryKey: [\"/api/admin/cards\"],\n    enabled: !!isAuthenticated,\n    retry: (failureCount, error) => !isUnauthorizedError(error) && failureCount < 3,\n    refetchInterval: 5000, // Auto-refresh every 5 seconds to catch refunds\n  });\n\n  const { data: virtualPacks } = useQuery({\n    queryKey: [\"/api/admin/virtual-packs\"],\n    enabled: !!isAuthenticated,\n    retry: (failureCount, error) => !isUnauthorizedError(error) && failureCount < 3,\n  });\n\n  const { data: systemSettings } = useQuery({\n    queryKey: [\"/api/admin/system-settings\"],\n    enabled: !!isAuthenticated,\n    retry: (failureCount, error) => !isUnauthorizedError(error) && failureCount < 3,\n  });\n\n  const { data: userTransactions } = useQuery({\n    queryKey: [\"/api/admin/users\", selectedUserId, \"transactions\"],\n    enabled: !!isAuthenticated && !!selectedUserId && showUserTransactions,\n    retry: (failureCount, error) => !isUnauthorizedError(error) && failureCount < 3,\n  });\n\n  // Mutations\n  const createVirtualLibraryCardMutation = useMutation({\n    mutationFn: (data: VirtualLibraryFormData) => apiRequest(\"POST\", \"/api/admin/cards\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/cards\"] });\n      virtualLibraryForm.reset();\n      toast({\n        title: \"Success\",\n        description: \"Card created successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteVirtualLibraryCardMutation = useMutation({\n    mutationFn: (cardId: string) => apiRequest(\"DELETE\", `/api/admin/cards/${cardId}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/cards\"] });\n      toast({\n        title: \"Success\",\n        description: \"Card deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createVirtualPackMutation = useMutation({\n    mutationFn: async (data: VirtualPackFormData) => {\n      // Create the pack with category info\n      const packData = {\n        ...data,\n        cardCount: 10, // Default card count\n        description: `${data.category} Pack` // Auto-generate description\n      };\n      const packResponse = await apiRequest(\"POST\", \"/api/admin/virtual-packs\", packData);\n      const newPack = packResponse as any;\n      \n      // Set default pull rates for the new pack\n      if (newPack && newPack.id) {\n        try {\n          await apiRequest(\"POST\", `/api/admin/virtual-packs/${newPack.id}/pull-rates`, {\n            rates: [\n              { cardTier: 'D', probability: 70.0 },\n              { cardTier: 'C', probability: 20.0 },\n              { cardTier: 'B', probability: 7.0 },\n              { cardTier: 'A', probability: 2.0 },\n              { cardTier: 'S', probability: 0.8 },\n              { cardTier: 'SS', probability: 0.15 },\n              { cardTier: 'SSS', probability: 0.05 }\n            ]\n          });\n        } catch (error) {\n          console.log(\"Pull rates setup completed with default odds\");\n        }\n      }\n      \n      return newPack;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/virtual-packs\"] });\n      virtualPackForm.reset();\n      toast({\n        title: \"Content Created\",\n        description: \"New content pack created with default pull rates\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const banUserMutation = useMutation({\n    mutationFn: (userId: string) => apiRequest(\"POST\", `/api/admin/users/${userId}/ban`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({\n        title: \"Success\",\n        description: \"User banned successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateUserCreditsMutation = useMutation({\n    mutationFn: ({ userId, credits }: { userId: string; credits: number }) => \n      apiRequest(\"PATCH\", `/api/admin/users/${userId}/credits`, { credits }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      // Also invalidate the auth user query to refresh personal credits display\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      setEditingUser(null);\n      userEditForm.reset();\n      toast({\n        title: \"Success\",\n        description: \"User credits updated successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateSystemSettingMutation = useMutation({\n    mutationFn: ({ settingKey, settingValue }: { settingKey: string; settingValue: boolean }) => \n      apiRequest(\"POST\", `/api/admin/system-settings/${settingKey}`, { settingValue }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/system-settings\"] });\n      toast({\n        title: \"Setting Updated\",\n        description: \"System setting has been updated successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleToggleSystemSetting = (settingKey: string, currentValue: boolean) => {\n    updateSystemSettingMutation.mutate({\n      settingKey,\n      settingValue: !currentValue,\n    });\n  };\n\n  const onVirtualLibrarySubmit = (data: VirtualLibraryFormData) => {\n    createVirtualLibraryCardMutation.mutate(data);\n  };\n\n  const handleDeleteCard = (cardId: string) => {\n    if (confirm(\"Are you sure you want to delete this card?\")) {\n      deleteVirtualLibraryCardMutation.mutate(cardId);\n    }\n  };\n\n  const deleteVirtualPackMutation = useMutation({\n    mutationFn: (packId: string) => apiRequest(\"DELETE\", `/api/admin/virtual-packs/${packId}`),\n    onSuccess: () => {\n      console.log(\"Pack deleted successfully, invalidating cache...\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/virtual-packs\"] });\n      // Force a refetch to see if it helps\n      queryClient.refetchQueries({ queryKey: [\"/api/admin/virtual-packs\"] });\n      toast({\n        title: \"Success\",\n        description: \"Pack deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      console.error(\"Delete pack error:\", error);\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDeleteVirtualPack = (packId: string) => {\n    if (confirm(\"Are you sure you want to delete this pack?\")) {\n      deleteVirtualPackMutation.mutate(packId);\n    }\n  };\n\n  const handleManagePackCards = async (pack: any) => {\n    setEditingPack(pack);\n    setShowPackCardSelector(true);\n    \n    // Load current cards in pack\n    try {\n      const currentCardsResponse = await apiRequest(\"GET\", `/api/admin/virtual-packs/${pack.id}/cards`);\n      const currentCards = await currentCardsResponse.json();\n      const cardIds = Array.isArray(currentCards) ? currentCards.map((card: any) => card.virtualLibraryCardId) : [];\n      setSelectedCards(cardIds);\n    } catch (error) {\n      console.error(\"Failed to load current card pool:\", error);\n      setSelectedCards([]);\n    }\n  };\n\n  const handleSavePackCards = async () => {\n    if (!editingPack) return;\n    \n    console.log(`Saving card pool for pack ${editingPack.id} with ${selectedCards.length} cards:`, selectedCards);\n    \n    try {\n      const response = await apiRequest(\"POST\", `/api/admin/virtual-packs/${editingPack.id}/cards`, {\n        cardIds: selectedCards,\n        weights: selectedCards.map(() => 1),\n      });\n      \n      console.log(\"Card pool save response:\", response);\n      \n      // Clear the cached card pool for this pack to force reload\n      setPackCardPools(prev => {\n        const updated = { ...prev };\n        delete updated[editingPack.id];\n        return updated;\n      });\n      \n      // Force expansion to show updated cards\n      setExpandedPacks(prev => new Set([...Array.from(prev), editingPack.id]));\n      \n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/virtual-packs\"] });\n      setShowPackCardSelector(false);\n      setEditingPack(null);\n      setSelectedCards([]);\n      \n      toast({\n        title: \"Success\",\n        description: `Card pool updated successfully (${selectedCards.length} cards)`,\n      });\n    } catch (error: any) {\n      console.error(\"Card pool save error:\", error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to save card pool\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleSaveCardEdit = async (data: VirtualLibraryFormData) => {\n    if (!editingCard) return;\n    \n    try {\n      const response = await apiRequest(\"PATCH\", `/api/admin/cards/${editingCard.id}`, data);\n      await response.json();\n      \n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/cards\"] });\n      setEditingCard(null);\n      virtualLibraryForm.reset();\n      \n      toast({\n        title: \"Success\",\n        description: \"Card updated successfully\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update card\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleEditUserCredits = (user: any) => {\n    setEditingUser(user);\n  };\n\n  const handleSaveUserCredits = (data: UserEditFormData) => {\n    if (!editingUser) return;\n    updateUserCreditsMutation.mutate({\n      userId: editingUser.id,\n      credits: data.credits\n    });\n  };\n\n  const handleViewUserTransactions = (userId: string) => {\n    setSelectedUserId(userId);\n    setShowUserTransactions(true);\n  };\n\n  const toggleCardSelection = (cardId: string) => {\n    setSelectedCards(prev => \n      prev.includes(cardId) \n        ? prev.filter(id => id !== cardId)\n        : [...prev, cardId]\n    );\n  };\n\n  const togglePackExpansion = async (packId: string) => {\n    const newExpanded = new Set(expandedPacks);\n    \n    if (expandedPacks.has(packId)) {\n      newExpanded.delete(packId);\n    } else {\n      newExpanded.add(packId);\n      \n      // Load card pool if not already loaded\n      if (!packCardPools[packId]) {\n        try {\n          const packCardsResponse = await apiRequest(\"GET\", `/api/admin/virtual-packs/${packId}/cards`);\n          const packCards = await packCardsResponse.json();\n          const cardDetails = await Promise.all(\n            (Array.isArray(packCards) ? packCards : []).map(async (pc: any) => {\n              const card = Array.isArray(allCards) ? allCards.find((c: any) => c.packType === 'virtual' && c.name === pc.name) : null;\n              return card ? { ...card, weight: pc.weight } : null;\n            })\n          );\n          \n          setPackCardPools(prev => ({\n            ...prev,\n            [packId]: cardDetails.filter(Boolean)\n          }));\n        } catch (error) {\n          console.error(\"Failed to load pack cards:\", error);\n        }\n      }\n    }\n    \n    setExpandedPacks(newExpanded);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold mb-4\">Admin Access Required</h1>\n          <p className=\"text-muted-foreground\">Please log in to access the admin panel.</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAdmin) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold mb-4\">Access Denied</h1>\n          <p className=\"text-muted-foreground\">You don't have permission to access the admin panel.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <h1 className=\"text-3xl font-bold font-gaming mb-8 text-center\">Admin Dashboard</h1>\n          \n          <Tabs defaultValue=\"overview\" className=\"w-full\">\n            <TabsList className=\"grid w-full max-w-4xl mx-auto grid-cols-4 mb-8\">\n              <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">\n                <TrendingUp className=\"w-4 h-4 mr-2\" />\n                Overview\n              </TabsTrigger>\n              <TabsTrigger value=\"users\" data-testid=\"tab-users\">\n                <Users className=\"w-4 h-4 mr-2\" />\n                Users\n              </TabsTrigger>\n              <TabsTrigger value=\"inventory\" data-testid=\"tab-inventory\">\n                <Package className=\"w-4 h-4 mr-2\" />\n                Inventory\n              </TabsTrigger>\n              <TabsTrigger value=\"settings\" data-testid=\"tab-settings\">\n                <Settings className=\"w-4 h-4 mr-2\" />\n                Settings\n              </TabsTrigger>\n            </TabsList>\n\n            {/* Overview Tab */}\n            <TabsContent value=\"overview\">\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n                <Card className=\"gaming-card\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Total Users</CardTitle>\n                    <Users className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">{(stats as any)?.totalUsers || 0}</div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"gaming-card\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Total Revenue</CardTitle>\n                    <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">RM {(stats as any)?.totalRevenue || \"0.00\"}</div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"gaming-card\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Cards in Library</CardTitle>\n                    <Package className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">{Array.isArray(allCards) ? allCards.length : 0}</div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"gaming-card\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Themed Packs</CardTitle>\n                    <Package className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">{Array.isArray(virtualPacks) ? virtualPacks.length : 0}</div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            {/* Users Tab */}\n            <TabsContent value=\"users\">\n              <Card className=\"gaming-card\">\n                <CardHeader>\n                  <CardTitle>User Management</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {users ? (\n                    <div className=\"space-y-4\">\n                      {Array.isArray(users) ? users.map((user: User) => (\n                        <div key={user.id} className=\"flex items-center justify-between p-4 rounded-lg border border-border\">\n                          <div className=\"flex items-center space-x-4\">\n                            <div className=\"w-10 h-10 bg-primary/20 rounded-full flex items-center justify-center\">\n                              <Users className=\"w-5 h-5 text-primary\" />\n                            </div>\n                            <div>\n                              <div className=\"font-semibold\">{user.email}</div>\n                              <div className=\"text-sm text-muted-foreground\">\n                                Credits: {user.credits} • Spent: RM {user.totalSpent}\n                              </div>\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex items-center space-x-2\">\n                            {user.isBanned && (\n                              <Badge variant=\"destructive\">Banned</Badge>\n                            )}\n                            {user.isSuspended && (\n                              <Badge variant=\"secondary\">Suspended</Badge>\n                            )}\n                            \n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleEditUserCredits(user)}\n                              data-testid={`button-edit-credits-${user.id}`}\n                            >\n                              <Coins className=\"w-3 h-3 mr-1\" />\n                              Edit Credits\n                            </Button>\n\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleViewUserTransactions(user.id)}\n                              data-testid={`button-view-transactions-${user.id}`}\n                            >\n                              <History className=\"w-3 h-3 mr-1\" />\n                              Transactions\n                            </Button>\n                            \n                            <Button\n                              variant=\"destructive\"\n                              size=\"sm\"\n                              disabled={user.isBanned || false}\n                              onClick={() => banUserMutation.mutate(user.id)}\n                              data-testid={`button-ban-${user.id}`}\n                            >\n                              <Ban className=\"w-3 h-3 mr-1\" />\n                              Ban\n                            </Button>\n                          </div>\n                        </div>\n                      )) : null}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n                      <p className=\"mt-2 text-muted-foreground\">Loading users...</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Inventory Management - Two Sections */}\n            <TabsContent value=\"inventory\">\n              <div className=\"space-y-6\">\n                {/* Section Selector */}\n                <div className=\"flex gap-4 mb-6\">\n                  <Button\n                    variant={inventorySection === \"inventory\" ? \"default\" : \"outline\"}\n                    onClick={() => setInventorySection(\"inventory\")}\n                    data-testid=\"tab-manage-inventory\"\n                  >\n                    <Package className=\"w-4 h-4 mr-2\" />\n                    Manage Inventory\n                  </Button>\n                  <Button\n                    variant={inventorySection === \"content\" ? \"default\" : \"outline\"}\n                    onClick={() => setInventorySection(\"content\")}\n                    data-testid=\"tab-manage-content\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Manage Content\n                  </Button>\n                </div>\n\n                {/* Manage Inventory Section */}\n                {inventorySection === \"inventory\" && (\n                  <div className=\"space-y-6\">\n                    <div className=\"grid md:grid-cols-2 gap-6\">\n                      {/* Add New Card */}\n                      <Card className=\"gaming-card\">\n                        <CardHeader>\n                          <CardTitle className=\"flex items-center gap-2\">\n                            <Plus className=\"w-5 h-5\" />\n                            Add New Card to Inventory\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <form onSubmit={virtualLibraryForm.handleSubmit(onVirtualLibrarySubmit)} className=\"space-y-4\">\n                            <div>\n                              <Label htmlFor=\"card-name\">Card Name</Label>\n                              <Input\n                                id=\"card-name\"\n                                {...virtualLibraryForm.register(\"name\")}\n                                placeholder=\"Enter card name\"\n                                data-testid=\"input-card-name\"\n                              />\n                              {virtualLibraryForm.formState.errors.name && (\n                                <p className=\"text-sm text-destructive mt-1\">{virtualLibraryForm.formState.errors.name.message}</p>\n                              )}\n                            </div>\n\n                            <div className=\"grid grid-cols-2 gap-4\">\n                              <div>\n                                <Label htmlFor=\"card-tier\">Tier</Label>\n                                <Select onValueChange={(value) => virtualLibraryForm.setValue(\"tier\", value as any)}>\n                                  <SelectTrigger data-testid=\"select-card-tier\">\n                                    <SelectValue placeholder=\"Select tier\" />\n                                  </SelectTrigger>\n                                  <SelectContent>\n                                    <SelectItem value=\"D\">D Tier</SelectItem>\n                                    <SelectItem value=\"C\">C Tier</SelectItem>\n                                    <SelectItem value=\"B\">B Tier</SelectItem>\n                                    <SelectItem value=\"A\">A Tier</SelectItem>\n                                    <SelectItem value=\"S\">S Tier</SelectItem>\n                                    <SelectItem value=\"SS\">SS Tier</SelectItem>\n                                    <SelectItem value=\"SSS\">SSS Tier</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                              </div>\n\n                              <div>\n                                <Label htmlFor=\"card-value\">Market Value</Label>\n                                <Input\n                                  id=\"card-value\"\n                                  {...virtualLibraryForm.register(\"marketValue\")}\n                                  placeholder=\"1.00\"\n                                  data-testid=\"input-card-value\"\n                                />\n                              </div>\n                            </div>\n\n                            <div>\n                              <Label htmlFor=\"card-image\">Image URL (Optional)</Label>\n                              <Input\n                                id=\"card-image\"\n                                {...virtualLibraryForm.register(\"imageUrl\")}\n                                placeholder=\"https://example.com/image.jpg\"\n                                data-testid=\"input-card-image\"\n                              />\n                            </div>\n\n                            <Button \n                              type=\"submit\" \n                              className=\"w-full\"\n                              disabled={createVirtualLibraryCardMutation.isPending}\n                              data-testid=\"button-add-card\"\n                            >\n                              {createVirtualLibraryCardMutation.isPending ? \"Adding...\" : \"Add to Inventory\"}\n                            </Button>\n                          </form>\n                        </CardContent>\n                      </Card>\n\n                      {/* Current Inventory */}\n                      <Card className=\"gaming-card\">\n                        <CardHeader>\n                          <div className=\"flex items-center justify-between\">\n                            <CardTitle>Unified Card Inventory ({Array.isArray(allCards) ? allCards.length : 0} cards)</CardTitle>\n                          </div>\n                          <div className=\"mt-3\">\n                            <Input\n                              type=\"text\"\n                              placeholder=\"Search cards by name or tier...\"\n                              value={inventorySearch}\n                              onChange={(e) => setInventorySearch(e.target.value)}\n                              className=\"max-w-md\"\n                              data-testid=\"input-inventory-search\"\n                            />\n                          </div>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"space-y-2 max-h-80 overflow-y-auto\">\n                            {(Array.isArray(allCards) ? allCards.filter((card: any) => {\n                              const searchTerm = inventorySearch.toLowerCase();\n                              return card.name.toLowerCase().includes(searchTerm) || \n                                     card.tier.toLowerCase().includes(searchTerm);\n                            }) : []).map((card: any) => (\n                              <div key={card.id} className=\"flex items-center justify-between p-3 rounded border\">\n                                <div className=\"flex items-center gap-3\">\n                                  <div className={`w-8 h-8 rounded-full bg-${tierColors[card.tier as keyof typeof tierColors]}/20 flex items-center justify-center`}>\n                                    <span className={`text-xs font-bold tier-${tierColors[card.tier as keyof typeof tierColors]}`}>\n                                      {card.tier}\n                                    </span>\n                                  </div>\n                                  <div>\n                                    <div className=\"font-medium\">{card.name}</div>\n                                    <div className=\"text-sm text-muted-foreground\">${card.marketValue}</div>\n                                    <div className=\"text-xs text-blue-600 dark:text-blue-400\">\n                                      Stock: {card.stock || 0} available\n                                    </div>\n                                  </div>\n                                </div>\n                                <div className=\"flex gap-1\">\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                    onClick={() => setEditingCard(card)}\n                                    data-testid={`button-edit-card-${card.id}`}\n                                  >\n                                    <Edit className=\"w-3 h-3\" />\n                                  </Button>\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"destructive\"\n                                    onClick={() => handleDeleteCard(card.id)}\n                                    data-testid={`button-delete-card-${card.id}`}\n                                  >\n                                    <Trash2 className=\"w-3 h-3\" />\n                                  </Button>\n                                </div>\n                              </div>\n                            )) || (\n                              <p className=\"text-center text-muted-foreground py-8\">No cards in inventory yet.</p>\n                            )}\n                          </div>\n                        </CardContent>\n                      </Card>\n                    </div>\n                  </div>\n                )}\n\n                {/* Manage Content Section */}\n                {inventorySection === \"content\" && (\n                  <div className=\"space-y-6\">\n                    <div className=\"grid md:grid-cols-2 gap-6\">\n                      {/* Create New Content */}\n                      <Card className=\"gaming-card\">\n                        <CardHeader>\n                          <CardTitle className=\"flex items-center gap-2\">\n                            <Plus className=\"w-5 h-5\" />\n                            Create New Content\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <form onSubmit={virtualPackForm.handleSubmit((data) => {\n                            createVirtualPackMutation.mutate(data);\n                          })} className=\"space-y-4\">\n                            <div>\n                              <Label htmlFor=\"content-name\">Content Name</Label>\n                              <Input\n                                id=\"content-name\"\n                                {...virtualPackForm.register(\"name\")}\n                                placeholder=\"e.g., Black Bolt Collection\"\n                                data-testid=\"input-content-name\"\n                              />\n                              {virtualPackForm.formState.errors.name && (\n                                <p className=\"text-sm text-destructive mt-1\">{virtualPackForm.formState.errors.name.message}</p>\n                              )}\n                            </div>\n\n                            <div className=\"grid grid-cols-2 gap-4\">\n                              <div>\n                                <Label htmlFor=\"content-price\">Price</Label>\n                                <Input\n                                  id=\"content-price\"\n                                  {...virtualPackForm.register(\"price\")}\n                                  placeholder=\"8.00\"\n                                  data-testid=\"input-content-price\"\n                                />\n                                {virtualPackForm.formState.errors.price && (\n                                  <p className=\"text-sm text-destructive mt-1\">{virtualPackForm.formState.errors.price.message}</p>\n                                )}\n                              </div>\n\n                              <div>\n                                <Label htmlFor=\"content-category\">Category</Label>\n                                <Select onValueChange={(value) => virtualPackForm.setValue(\"category\", value as any)}>\n                                  <SelectTrigger data-testid=\"select-content-category\">\n                                    <SelectValue placeholder=\"Select category\" />\n                                  </SelectTrigger>\n                                  <SelectContent>\n                                    <SelectItem value=\"Special\">Special Packs</SelectItem>\n                                    <SelectItem value=\"Classic\">Classic Packs</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                {virtualPackForm.formState.errors.category && (\n                                  <p className=\"text-sm text-destructive mt-1\">{virtualPackForm.formState.errors.category.message}</p>\n                                )}\n                              </div>\n                            </div>\n\n                            <div>\n                              <Label htmlFor=\"content-image\">Image URL (Optional)</Label>\n                              <Input\n                                id=\"content-image\"\n                                {...virtualPackForm.register(\"imageUrl\")}\n                                placeholder=\"https://example.com/pack-image.jpg\"\n                                data-testid=\"input-content-image\"\n                              />\n                            </div>\n\n                            <Button \n                              type=\"submit\" \n                              className=\"w-full\" \n                              disabled={createVirtualPackMutation.isPending}\n                              data-testid=\"button-create-content\"\n                            >\n                              {createVirtualPackMutation.isPending ? \"Creating...\" : \"Create Content\"}\n                            </Button>\n                          </form>\n                        </CardContent>\n                      </Card>\n\n                      {/* Content List */}\n                      <Card className=\"gaming-card\">\n                        <CardHeader>\n                          <CardTitle>Content Library ({Array.isArray(virtualPacks) ? virtualPacks.length : 0} packs)</CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"space-y-3 max-h-80 overflow-y-auto\">\n                            {Array.isArray(virtualPacks) ? virtualPacks.map((pack: any) => (\n                              <div key={pack.id} className=\"border rounded\">\n                                <div className=\"flex items-center justify-between p-3\">\n                                  <div className=\"flex-1\">\n                                    <div className=\"font-medium\">{pack.name}</div>\n                                    <div className=\"text-sm text-muted-foreground\">\n                                      {pack.price} credits • {pack.description || 'No description'}\n                                    </div>\n                                    <div className=\"text-xs text-muted-foreground\">\n                                      {packCardPools[pack.id]?.length || 0} cards in pool\n                                    </div>\n                                  </div>\n                                  <div className=\"flex gap-1\">\n                                    <Button\n                                      size=\"sm\"\n                                      variant=\"ghost\"\n                                      onClick={() => {\n                                        setGalleryPack(pack);\n                                        setShowCardGallery(true);\n                                        // Clear cache to force fresh data load\n                                        setPackCardPools(prev => {\n                                          const updated = { ...prev };\n                                          delete updated[pack.id];\n                                          return updated;\n                                        });\n                                      }}\n                                      data-testid={`button-view-cards-${pack.id}`}\n                                      title=\"View card gallery\"\n                                    >\n                                      <Eye className=\"w-3 h-3\" />\n                                    </Button>\n                                    <Button\n                                      size=\"sm\"\n                                      variant=\"outline\"\n                                      onClick={() => handleManagePackCards(pack)}\n                                      data-testid={`button-edit-pack-${pack.id}`}\n                                      title=\"Edit card pool\"\n                                    >\n                                      <Edit className=\"w-3 h-3\" />\n                                    </Button>\n                                    <Button\n                                      size=\"sm\"\n                                      variant=\"destructive\"\n                                      onClick={() => handleDeleteVirtualPack(pack.id)}\n                                      data-testid={`button-delete-pack-${pack.id}`}\n                                    >\n                                      <Trash2 className=\"w-3 h-3\" />\n                                    </Button>\n                                  </div>\n                                </div>\n                                \n                                {/* Expanded Card Pool View */}\n                                {expandedPacks.has(pack.id) && (\n                                  <div className=\"border-t bg-muted/30 p-3\">\n                                    {packCardPools[pack.id]?.length > 0 ? (\n                                      <div className=\"grid gap-2 max-h-32 overflow-y-auto\">\n                                        {packCardPools[pack.id].map((card: any) => (\n                                          <div key={card.id} className=\"flex items-center space-x-2 text-xs\">\n                                            <div className={`w-4 h-4 rounded-full bg-${tierColors[card.tier as keyof typeof tierColors]}/20 flex items-center justify-center`}>\n                                              <span className={`text-[10px] font-bold tier-${tierColors[card.tier as keyof typeof tierColors]}`}>\n                                                {card.tier}\n                                              </span>\n                                            </div>\n                                            <span className=\"flex-1\">{card.name}</span>\n                                            <span className=\"text-muted-foreground\">{card.marketValue}c</span>\n                                          </div>\n                                        ))}\n                                      </div>\n                                    ) : (\n                                      <p className=\"text-xs text-muted-foreground\">No cards assigned to this pack</p>\n                                    )}\n                                    <div className=\"mt-2\">\n                                      <Button\n                                        size=\"sm\"\n                                        variant=\"link\"\n                                        onClick={() => togglePackExpansion(pack.id)}\n                                        className=\"text-xs p-0 h-auto\"\n                                      >\n                                        <ChevronUp className=\"w-3 h-3 mr-1\" />\n                                        Hide cards\n                                      </Button>\n                                    </div>\n                                  </div>\n                                )}\n                              </div>\n                            )) : (\n                              <p className=\"text-center text-muted-foreground py-8\">No content created yet.</p>\n                            )}\n                          </div>\n                        </CardContent>\n                      </Card>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </TabsContent>\n\n            {/* Settings Tab */}\n            <TabsContent value=\"settings\">\n              <div className=\"space-y-6\">\n                <Card className=\"gaming-card\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Settings className=\"w-5 h-5\" />\n                      System Settings\n                    </CardTitle>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Control administrative settings and system behavior\n                    </p>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    {Array.isArray(systemSettings) && systemSettings.length ? (\n                      <div className=\"space-y-4\">\n                        {systemSettings.map((setting: any) => (\n                          <div key={setting.settingKey} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                            <div className=\"space-y-1\">\n                              <div className=\"font-medium capitalize\">\n                                {setting.settingKey.replace(/_/g, ' ')}\n                              </div>\n                              <div className=\"text-sm text-muted-foreground\">\n                                {setting.description}\n                              </div>\n                              {setting.updatedBy && (\n                                <div className=\"text-xs text-muted-foreground\">\n                                  Last updated by: {setting.updatedBy} on {new Date(setting.updatedAt).toLocaleString()}\n                                </div>\n                              )}\n                            </div>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleToggleSystemSetting(setting.settingKey, setting.settingValue)}\n                              disabled={updateSystemSettingMutation.isPending}\n                              className=\"ml-4\"\n                              data-testid={`button-toggle-${setting.settingKey}`}\n                            >\n                              {setting.settingValue ? (\n                                <ToggleRight className=\"w-6 h-6 text-green-500\" />\n                              ) : (\n                                <ToggleLeft className=\"w-6 h-6 text-gray-400\" />\n                              )}\n                            </Button>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"text-center py-8\">\n                        <Settings className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                        <h3 className=\"text-lg font-medium mb-2\">No Settings Configured</h3>\n                        <p className=\"text-muted-foreground\">\n                          System settings will appear here once they are created.\n                        </p>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n\n                <Card className=\"gaming-card\">\n                  <CardHeader>\n                    <CardTitle>Quick Actions</CardTitle>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Common administrative actions and system controls\n                    </p>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid md:grid-cols-2 gap-4\">\n                      <Button\n                        variant=\"outline\"\n                        onClick={() => handleToggleSystemSetting('maintenance_mode', \n                          Array.isArray(systemSettings) ? systemSettings.find((s: any) => s.settingKey === 'maintenance_mode')?.settingValue || false : false)}\n                        disabled={updateSystemSettingMutation.isPending}\n                        className=\"h-auto p-4 text-left flex flex-col items-start space-y-2\"\n                        data-testid=\"button-toggle-maintenance\"\n                      >\n                        <div className=\"font-medium\">Toggle Maintenance Mode</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {Array.isArray(systemSettings) ? systemSettings.find((s: any) => s.settingKey === 'maintenance_mode')?.settingValue \n                            ? 'Disable maintenance mode' \n                            : 'Enable maintenance mode' : 'Enable maintenance mode'}\n                        </div>\n                      </Button>\n\n                      <Button\n                        variant=\"outline\"\n                        onClick={() => handleToggleSystemSetting('new_registrations', \n                          Array.isArray(systemSettings) ? systemSettings.find((s: any) => s.settingKey === 'new_registrations')?.settingValue || true : true)}\n                        disabled={updateSystemSettingMutation.isPending}\n                        className=\"h-auto p-4 text-left flex flex-col items-start space-y-2\"\n                        data-testid=\"button-toggle-registrations\"\n                      >\n                        <div className=\"font-medium\">Toggle New Registrations</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {Array.isArray(systemSettings) ? systemSettings.find((s: any) => s.settingKey === 'new_registrations')?.settingValue !== false\n                            ? 'Disable new user registrations'\n                            : 'Enable new user registrations' : 'Enable new user registrations'}\n                        </div>\n                      </Button>\n\n                      <Button\n                        variant=\"outline\"\n                        onClick={() => handleToggleSystemSetting('pack_openings', \n                          Array.isArray(systemSettings) ? systemSettings.find((s: any) => s.settingKey === 'pack_openings')?.settingValue || true : true)}\n                        disabled={updateSystemSettingMutation.isPending}\n                        className=\"h-auto p-4 text-left flex flex-col items-start space-y-2\"\n                        data-testid=\"button-toggle-pack-openings\"\n                      >\n                        <div className=\"font-medium\">Toggle Pack Openings</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {Array.isArray(systemSettings) ? systemSettings.find((s: any) => s.settingKey === 'pack_openings')?.settingValue !== false\n                            ? 'Disable pack opening feature'\n                            : 'Enable pack opening feature' : 'Enable pack opening feature'}\n                        </div>\n                      </Button>\n\n                      <Button\n                        variant=\"outline\"\n                        onClick={() => handleToggleSystemSetting('global_feed', \n                          Array.isArray(systemSettings) ? systemSettings.find((s: any) => s.settingKey === 'global_feed')?.settingValue || true : true)}\n                        disabled={updateSystemSettingMutation.isPending}\n                        className=\"h-auto p-4 text-left flex flex-col items-start space-y-2\"\n                        data-testid=\"button-toggle-global-feed\"\n                      >\n                        <div className=\"font-medium\">Toggle Global Feed</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {Array.isArray(systemSettings) ? systemSettings.find((s: any) => s.settingKey === 'global_feed')?.settingValue !== false\n                            ? 'Hide global activity feed'\n                            : 'Show global activity feed' : 'Show global activity feed'}\n                        </div>\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n          </Tabs>\n\n          {/* Card Gallery Dialog */}\n          <Dialog open={showCardGallery} onOpenChange={setShowCardGallery}>\n            <DialogContent className=\"max-w-6xl max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>Card Gallery - {galleryPack?.name}</DialogTitle>\n              </DialogHeader>\n              \n              <CardGalleryContent packId={galleryPack?.id} />\n            </DialogContent>\n          </Dialog>\n\n          {/* Edit Card Dialog */}\n          <Dialog open={!!editingCard} onOpenChange={(open) => !open && setEditingCard(null)}>\n            <DialogContent className=\"max-w-md\">\n              <DialogHeader>\n                <DialogTitle>Edit Card</DialogTitle>\n                <DialogDescription>\n                  Modify the card details including name, tier, market value, and stock quantity.\n                </DialogDescription>\n              </DialogHeader>\n              \n              <form onSubmit={virtualLibraryForm.handleSubmit(handleSaveCardEdit)} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-name\">Card Name</Label>\n                  <Input\n                    id=\"edit-name\"\n                    {...virtualLibraryForm.register(\"name\")}\n                    placeholder=\"Enter card name\"\n                    data-testid=\"input-edit-name\"\n                  />\n                  {virtualLibraryForm.formState.errors.name && (\n                    <p className=\"text-sm text-destructive\">{virtualLibraryForm.formState.errors.name.message}</p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-tier\">Tier</Label>\n                  <Select onValueChange={(value) => virtualLibraryForm.setValue(\"tier\", value as any)}>\n                    <SelectTrigger data-testid=\"select-edit-tier\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {[\"D\", \"C\", \"B\", \"A\", \"S\", \"SS\", \"SSS\"].map((tier) => (\n                        <SelectItem key={tier} value={tier}>{tier}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  {virtualLibraryForm.formState.errors.tier && (\n                    <p className=\"text-sm text-destructive\">{virtualLibraryForm.formState.errors.tier.message}</p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-marketValue\">Market Value (credits)</Label>\n                  <Input\n                    id=\"edit-marketValue\"\n                    {...virtualLibraryForm.register(\"marketValue\")}\n                    placeholder=\"100\"\n                    data-testid=\"input-edit-market-value\"\n                  />\n                  {virtualLibraryForm.formState.errors.marketValue && (\n                    <p className=\"text-sm text-destructive\">{virtualLibraryForm.formState.errors.marketValue.message}</p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-imageUrl\">Image URL (optional)</Label>\n                  <Input\n                    id=\"edit-imageUrl\"\n                    {...virtualLibraryForm.register(\"imageUrl\")}\n                    placeholder=\"https://example.com/card-image.jpg\"\n                    data-testid=\"input-edit-image\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-stock\">Stock Quantity</Label>\n                  <Input\n                    id=\"edit-stock\"\n                    type=\"number\"\n                    min=\"0\"\n                    {...virtualLibraryForm.register(\"stock\", { valueAsNumber: true })}\n                    placeholder=\"0\"\n                    data-testid=\"input-edit-stock\"\n                  />\n                  {virtualLibraryForm.formState.errors.stock && (\n                    <p className=\"text-sm text-destructive\">{virtualLibraryForm.formState.errors.stock.message}</p>\n                  )}\n                </div>\n\n                <DialogFooter>\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setEditingCard(null)}>\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" data-testid=\"button-save-card-edit\">\n                    Save Changes\n                  </Button>\n                </DialogFooter>\n              </form>\n            </DialogContent>\n          </Dialog>\n\n          {/* Card Pool Selection Dialog */}\n          <Dialog open={showPackCardSelector} onOpenChange={setShowPackCardSelector}>\n            <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>Edit Card Pool for {editingPack?.name}</DialogTitle>\n              </DialogHeader>\n              \n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <p className=\"text-sm text-muted-foreground\">\n                    Select which cards from inventory should be included in this pack:\n                  </p>\n                  <p className=\"text-xs text-blue-600 dark:text-blue-400\">\n                    Currently selected: {selectedCards.length} cards\n                  </p>\n                </div>\n                \n                <div className=\"grid gap-3\">\n                  {Array.isArray(allCards) ? allCards.map((card: any) => (\n                    <div key={card.id} className=\"flex items-center space-x-3 p-3 border rounded\">\n                      <Checkbox\n                        checked={selectedCards.includes(card.id)}\n                        onCheckedChange={() => toggleCardSelection(card.id)}\n                        data-testid={`checkbox-card-${card.id}`}\n                      />\n                      <div className={`w-8 h-8 rounded-full bg-${tierColors[card.tier as keyof typeof tierColors]}/20 flex items-center justify-center`}>\n                        <span className={`text-xs font-bold tier-${tierColors[card.tier as keyof typeof tierColors]}`}>\n                          {card.tier}\n                        </span>\n                      </div>\n                      <div className=\"flex-1\">\n                        <div className=\"font-medium\">{card.name}</div>\n                        <div className=\"text-sm text-muted-foreground\">{card.marketValue} credits</div>\n                      </div>\n                    </div>\n                  )) : (\n                    <p className=\"text-center text-muted-foreground py-8\">No cards available in inventory.</p>\n                  )}\n                </div>\n              </div>\n\n              <DialogFooter>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    setShowPackCardSelector(false);\n                    setEditingPack(null);\n                    setSelectedCards([]);\n                  }}\n                  data-testid=\"button-cancel-card-selection\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  onClick={handleSavePackCards}\n                  data-testid=\"button-save-card-pool\"\n                >\n                  Save Card Pool ({selectedCards.length} selected)\n                </Button>\n              </DialogFooter>\n            </DialogContent>\n          </Dialog>\n\n          {/* Edit User Credits Dialog */}\n          <Dialog open={!!editingUser} onOpenChange={(open) => !open && setEditingUser(null)}>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Edit User Credits</DialogTitle>\n                <DialogDescription>\n                  Update the credit amount for this user account.\n                </DialogDescription>\n              </DialogHeader>\n              \n              <form onSubmit={userEditForm.handleSubmit(handleSaveUserCredits)} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label>User Email</Label>\n                  <div className=\"px-3 py-2 bg-muted rounded-md\">\n                    {editingUser?.email}\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>Current Credits</Label>\n                  <div className=\"px-3 py-2 bg-muted rounded-md\">\n                    {editingUser?.credits}\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"credits\">New Credits Amount</Label>\n                  <Input\n                    id=\"credits\"\n                    type=\"number\"\n                    min=\"0\"\n                    step=\"1\"\n                    {...userEditForm.register(\"credits\", { valueAsNumber: true })}\n                    placeholder=\"Enter new credits amount\"\n                    data-testid=\"input-user-credits\"\n                  />\n                  {userEditForm.formState.errors.credits && (\n                    <p className=\"text-sm text-destructive\">{userEditForm.formState.errors.credits.message}</p>\n                  )}\n                </div>\n\n                <DialogFooter>\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setEditingUser(null)}>\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={updateUserCreditsMutation.isPending}\n                    data-testid=\"button-save-user-credits\"\n                  >\n                    {updateUserCreditsMutation.isPending ? \"Saving...\" : \"Save Credits\"}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </DialogContent>\n          </Dialog>\n\n          {/* User Transactions Dialog */}\n          <Dialog open={showUserTransactions} onOpenChange={setShowUserTransactions}>\n            <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>User Transaction History</DialogTitle>\n                <DialogDescription>\n                  View all transactions for this user including credit purchases, refunds, and game expenses.\n                </DialogDescription>\n              </DialogHeader>\n              \n              <div className=\"space-y-4\">\n                {userTransactions ? (\n                  Array.isArray(userTransactions) && userTransactions.length > 0 ? (\n                    <div className=\"space-y-3\">\n                      {userTransactions.map((transaction: any) => (\n                        <div key={transaction.id} className=\"flex items-center justify-between p-4 rounded-lg border border-border\">\n                          <div className=\"flex items-center space-x-4\">\n                            <div className=\"w-10 h-10 bg-primary/20 rounded-full flex items-center justify-center\">\n                              <DollarSign className=\"w-5 h-5 text-primary\" />\n                            </div>\n                            <div>\n                              <div className=\"font-semibold\">{transaction.type}</div>\n                              <div className=\"text-sm text-muted-foreground\">\n                                {new Date(transaction.createdAt).toLocaleString()}\n                              </div>\n                            </div>\n                          </div>\n                          \n                          <div className=\"text-right\">\n                            <div className=\"font-bold text-lg\">\n                              {transaction.type === 'credit_purchase' ? '+' : '-'}\n                              {transaction.amount} credits\n                            </div>\n                            {transaction.description && (\n                              <div className=\"text-sm text-muted-foreground\">\n                                {transaction.description}\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <p className=\"text-muted-foreground\">No transactions found for this user.</p>\n                    </div>\n                  )\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n                    <p className=\"mt-2 text-muted-foreground\">Loading transactions...</p>\n                  </div>\n                )}\n              </div>\n\n              <DialogFooter>\n                <Button \n                  variant=\"outline\" \n                  onClick={() => {\n                    setShowUserTransactions(false);\n                    setSelectedUserId(null);\n                  }}\n                >\n                  Close\n                </Button>\n              </DialogFooter>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":71982},"client/src/pages/games.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Navigation } from \"@/components/Navigation\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { CreditCard, Package, Circle, RotateCcw } from \"lucide-react\";\nimport { VirtualPackOpening } from \"@/components/VirtualPackOpening\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { VirtualPack, User } from \"@shared/schema\";\n\nexport default function Play() {\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading } = useAuth() as { user: User | null; isLoading: boolean; isAuthenticated: boolean };\n  const queryClient = useQueryClient();\n  const [openingPack, setOpeningPack] = useState<VirtualPack | null>(null);\n\n  const { data: virtualPacks } = useQuery({\n    queryKey: [\"/api/virtual-packs\"],\n    enabled: isAuthenticated,\n  });\n\n  const handlePurchase = (pack: VirtualPack) => {\n    if (!user) {\n      toast({\n        title: \"Login Required\",\n        description: \"Please log in to purchase packs\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const userCredits = parseFloat(user.credits || '0');\n    const packPrice = parseFloat(pack.price);\n    if (userCredits < packPrice) {\n      toast({\n        title: \"Insufficient Credits\",\n        description: `You need ${packPrice} credits but only have ${userCredits.toFixed(2)}`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Show the opening interface instead of redirecting to store\n    setOpeningPack(pack);\n  };\n\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  // Show opening interface if a pack is selected\n  if (openingPack) {\n    return (\n      <VirtualPackOpening \n        packId={openingPack.id}\n        packName={openingPack.name}\n        onClose={() => setOpeningPack(null)}\n      />\n    );\n  }\n\n  const tierData = [\n    { tier: \"C\", name: \"Common\", color: \"common\", odds: \"65.0%\" },\n    { tier: \"UC\", name: \"Uncommon\", color: \"uncommon\", odds: \"25.0%\" },\n    { tier: \"R\", name: \"Rare\", color: \"rare\", odds: \"8.0%\" },\n    { tier: \"SR\", name: \"Super Rare\", color: \"superrare\", odds: \"1.8%\" },\n    { tier: \"SSS\", name: \"Legendary\", color: \"legendary\", odds: \"0.2%\" },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      <main className=\"pt-20 pb-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Header */}\n          <section className=\"py-8 text-center\">\n            <h1 className=\"font-gaming font-bold text-4xl md:text-5xl mb-4\">\n              <span className=\"bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">ARCADE</span>\n            </h1>\n            <p className=\"text-muted-foreground text-lg max-w-3xl mx-auto\">Discover our catalogue of games and stand a chance to win top-tier cards</p>\n          </section>\n\n          {/* Game Categories */}\n          <div className=\"space-y-8\">\n            {/* Minigames Section */}\n            <section>\n              <h2 className=\"font-gaming text-3xl text-center mb-6\">\n                <span className=\"bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">Minigames</span>\n              </h2>\n              <div className=\"grid md:grid-cols-2 gap-6 max-w-4xl mx-auto\">\n                <Card className=\"gaming-card hover:scale-105 transition-transform cursor-pointer\" data-testid=\"card-plinko\">\n                  <CardHeader className=\"text-center\">\n                    <div className=\"w-full h-32 mb-4 rounded-lg bg-gradient-to-br from-blue-600/20 to-purple-600/20 relative flex items-center justify-center\">\n                      <div className=\"w-16 h-16 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center\">\n                        <Circle className=\"h-8 w-8 text-white\" />\n                      </div>\n                    </div>\n                    <CardTitle className=\"font-gaming text-xl\">Plinko Drop</CardTitle>\n                    <p className=\"text-sm text-muted-foreground mt-2\">\n                      Drop, Bounce, Win!\n                    </p>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"text-center space-y-2\">\n                      <div className=\"bg-gradient-to-r from-primary/20 to-accent/20 rounded-lg p-3 border border-primary/30\">\n                        <div className=\"text-2xl font-bold text-primary\">\n                          20 Credits\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Per play\n                        </div>\n                      </div>\n                      <div className=\"flex justify-center\">\n                        <Badge className=\"bg-purple-600 text-white\">\n                          Win Mystery Packs\n                        </Badge>\n                      </div>\n                    </div>\n                    \n                    <Button\n                      onClick={() => window.location.href = '/play/plinko'}\n                      className=\"w-full bg-gradient-to-r from-primary to-accent\"\n                      data-testid=\"button-play-plinko\"\n                    >\n                      <Package className=\"w-4 h-4 mr-2\" />\n                      Play Plinko\n                    </Button>\n                  </CardContent>\n                </Card>\n                \n                <Card className=\"gaming-card hover:scale-105 transition-transform cursor-pointer\" data-testid=\"card-wheel\">\n                  <CardHeader className=\"text-center\">\n                    <div className=\"w-full h-32 mb-4 rounded-lg bg-gradient-to-br from-yellow-600/20 to-red-600/20 relative flex items-center justify-center\">\n                      <div className=\"w-16 h-16 rounded-full bg-gradient-to-r from-yellow-500 to-red-500 flex items-center justify-center\">\n                        <RotateCcw className=\"h-8 w-8 text-white\" />\n                      </div>\n                    </div>\n                    <CardTitle className=\"font-gaming text-xl\">Wheel Spin</CardTitle>\n                    <p className=\"text-sm text-muted-foreground mt-2\">\n                      Spin and Win!\n                    </p>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"text-center space-y-2\">\n                      <div className=\"bg-gradient-to-r from-primary/20 to-accent/20 rounded-lg p-3 border border-primary/30\">\n                        <div className=\"text-2xl font-bold text-primary\">20 Credits</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Per spin\n                        </div>\n                      </div>\n                      <div className=\"flex justify-center\">\n                        <Badge className=\"bg-purple-600 text-white\">\n                          Win Mystery Packs\n                        </Badge>\n                      </div>\n                    </div>\n                    \n                    <Button\n                      onClick={() => window.location.href = '/play/wheel'}\n                      className=\"w-full bg-gradient-to-r from-primary to-accent\"\n                      data-testid=\"button-play-wheel\"\n                    >\n                      <Package className=\"w-4 h-4 mr-2\" />\n                      Play Wheel\n                    </Button>\n                  </CardContent>\n                </Card>\n              </div>\n            </section>\n            \n            {/* Special Packs Section */}\n            <section>\n              <h2 className=\"font-gaming text-3xl text-center mb-6\">\n                <span className=\"bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">Special Packs</span>\n              </h2>\n              <div className=\"grid md:grid-cols-2 gap-6 max-w-4xl mx-auto\">\n                <Card className=\"gaming-card hover:scale-105 transition-transform cursor-pointer opacity-50\" data-testid=\"card-slabs\">\n                  <CardHeader className=\"text-center\">\n                    <CardTitle className=\"font-gaming text-xl\">Slabs Collection</CardTitle>\n                    <Badge variant=\"outline\">Coming Soon</Badge>\n                  </CardHeader>\n                  <CardContent className=\"text-center\">\n                    <p className=\"text-muted-foreground mb-4\">Premium graded cards in protective cases.</p>\n                    <button className=\"bg-muted text-muted-foreground px-4 py-2 rounded-md w-full\" disabled data-testid=\"button-slabs-disabled\">\n                      Coming Soon\n                    </button>\n                  </CardContent>\n                </Card>\n                \n                <Card className=\"gaming-card hover:scale-105 transition-transform cursor-pointer opacity-50\" data-testid=\"card-vintages\">\n                  <CardHeader className=\"text-center\">\n                    <CardTitle className=\"font-gaming text-xl\">Vintage Collection</CardTitle>\n                    <Badge variant=\"outline\">Coming Soon</Badge>\n                  </CardHeader>\n                  <CardContent className=\"text-center\">\n                    <p className=\"text-muted-foreground mb-4\">Rare vintage cards from classic sets.</p>\n                    <button className=\"bg-muted text-muted-foreground px-4 py-2 rounded-md w-full\" disabled data-testid=\"button-vintages-disabled\">\n                      Coming Soon\n                    </button>\n                  </CardContent>\n                </Card>\n              </div>\n            </section>\n            \n            {/* Themed Packs Section */}\n            <section>\n              <h2 className=\"font-gaming text-3xl text-center mb-6\">\n                <span className=\"bg-gradient-to-r from-legendary to-primary bg-clip-text text-transparent\">Themed Packs</span>\n              </h2>\n              <div className=\"text-center mb-8\">\n                <h3 className=\"font-gaming mb-2 text-[26px]\">\n                  <span className=\"bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">CLASSIC PACKS</span>\n                </h3>\n                <p className=\"text-muted-foreground max-w-2xl mx-auto\">Experience Rip and Ship in a whole new way with virtual packs</p>\n              </div>\n              \n              {virtualPacks && Array.isArray(virtualPacks) && virtualPacks.length > 0 ? (\n                <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6 max-w-6xl mx-auto\">\n                  {virtualPacks.filter((pack: any) => pack.isActive).map((pack: any) => (\n                    <Card key={pack.id} className=\"gaming-card hover:scale-105 transition-transform cursor-pointer\" data-testid={`card-themed-pack-${pack.id}`}>\n                      <CardHeader className=\"text-center\">\n                        {pack.imageUrl && (\n                          <div className=\"w-full h-32 mb-4 rounded-lg overflow-hidden\">\n                            <img \n                              src={pack.imageUrl} \n                              alt={pack.name}\n                              className=\"w-full h-full object-cover\"\n                              data-testid={`img-themed-pack-${pack.id}`}\n                            />\n                          </div>\n                        )}\n                        <CardTitle className=\"font-gaming text-xl\" data-testid={`text-themed-pack-name-${pack.id}`}>\n                          {pack.name}\n                        </CardTitle>\n                        {pack.description && (\n                          <p className=\"text-sm text-muted-foreground mt-2\">\n                            {pack.description}\n                          </p>\n                        )}\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        <div className=\"text-center space-y-2\">\n                          <div className=\"bg-gradient-to-r from-primary/20 to-accent/20 rounded-lg p-3 border border-primary/30\">\n                            <div className=\"text-2xl font-bold text-primary\">\n                              {pack.price} Credits\n                            </div>\n                            <div className=\"text-sm text-muted-foreground\">\n                              8 Cards per pack\n                            </div>\n                          </div>\n                          <div className=\"flex justify-center space-x-2\">\n                            <Badge className=\"bg-accent text-primary-foreground\">7 Commons + 1 Chance Card</Badge>\n                          </div>\n                        </div>\n                        \n                        <Button\n                          onClick={() => handlePurchase(pack)}\n                          disabled={!user || parseFloat(user.credits || '0') < parseFloat(pack.price)}\n                          className=\"w-full bg-gradient-to-r from-primary to-accent\"\n                          data-testid={`button-open-themed-pack-${pack.id}`}\n                        >\n                          <CreditCard className=\"w-4 h-4 mr-2\" />\n                          Open Pack\n                        </Button>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-12 max-w-md mx-auto\">\n                  <Package className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No Themed Packs Available</h3>\n                  <p className=\"text-muted-foreground\">\n                    Check back later for exclusive themed pack collections!\n                  </p>\n                </div>\n              )}\n            </section>\n          </div>\n\n\n\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":14713},"client/src/pages/home.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { Navigation } from \"@/components/Navigation\";\nimport { GlobalFeed } from \"@/components/GlobalFeed\";\nimport { CreditPurchase } from \"@/components/CreditPurchase\";\nimport { RecentPullsCarousel } from \"@/components/RecentPullsCarousel\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Play, Package, Coins, TrendingUp, Zap, RotateCcw, Gamepad2, Star } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport type { User } from \"@shared/schema\";\n\nexport default function Home() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  const { data: userData } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    enabled: isAuthenticated,\n  }) as { data: User | undefined };\n\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/admin/stats\"],\n    enabled: isAuthenticated,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  // Landing page for non-authenticated users\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Navigation />\n        \n        <main className=\"pt-20\">\n          {/* Hero Section */}\n          <section className=\"py-20 bg-gradient-to-b from-background via-primary/5 to-accent/5\">\n            <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n              <div className=\"inline-flex items-center space-x-2 bg-primary/10 rounded-full px-4 py-2 mb-6\">\n                <Star className=\"w-4 h-4 text-primary\" />\n                <span className=\"text-sm font-medium text-primary\">Premium TCG Experience</span>\n              </div>\n              \n              <h1 className=\"font-gaming font-bold text-4xl md:text-6xl lg:text-7xl mb-6\">\n                <span className=\"bg-gradient-to-r from-primary via-accent to-legendary bg-clip-text text-transparent\">\n                  Drops\n                </span>\n              </h1>\n              \n              <p className=\"text-xl md:text-2xl text-muted-foreground mb-8 max-w-3xl mx-auto\">\n                Experience the thrill of premium TCG pack opening with transparent odds, \n                unlimited vault storage, and exciting minigames.\n              </p>\n              \n              <p className=\"text-lg text-muted-foreground mb-8 max-w-2xl mx-auto\">\n                Create an account to start earning cards and playing games!\n              </p>\n            </div>\n          </section>\n        \n        {/* Recent Pulls for non-authenticated users */}\n        <section className=\"py-12\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <RecentPullsCarousel limit={10} />\n          </div>\n        </section>\n        \n        {/* Footer */}\n        <footer className=\"bg-secondary/20 border-t border-border py-12\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"text-center\">\n              <p className=\"text-muted-foreground\">\n                &copy; 2025 Drops. Built for collectors, by collectors.\n              </p>\n            </div>\n          </div>\n        </footer>\n      </main>\n    </div>\n    );\n  }\n\n  const games = [\n    {\n      name: \"Plinko Drop\",\n      description: \"Drop, Bounce, Win!\",\n      cost: \"20\",\n      icon: <Play className=\"w-8 h-8 text-white\" />,\n      color: \"from-blue-500 to-purple-600\",\n      route: \"/play/plinko\",\n      popular: true,\n    },\n    {\n      name: \"Wheel Spin\", \n      description: \"Spin and Win!\",\n      cost: \"20\",\n      icon: <RotateCcw className=\"w-8 h-8 text-white\" />,\n      color: \"from-orange-500 to-red-600\",\n      route: \"/play/wheel\",\n      popular: true,\n    },\n    {\n      name: \"Classic Packs\",\n      description: \"Rip some classic packs\",\n      cost: \"16\",\n      icon: <Package className=\"w-8 h-8 text-white\" />,\n      color: \"from-green-500 to-emerald-600\",\n      route: \"/play/themed-packs\",\n      popular: false,\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      \n      <main className=\"pt-20 pb-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Credits Header */}\n          <div className=\"flex items-center justify-between mb-6 sm:mb-8\">\n            <div>\n              <h1 className=\"font-gaming font-bold text-xl sm:text-3xl mb-2\">\n                <span className=\"bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n                  Hey {userData?.firstName || \"Player\"}! 👋\n                </span>\n              </h1>\n              <p className=\"text-muted-foreground text-sm sm:text-base\">Time to win some cards</p>\n            </div>\n            <Card className=\"gaming-card\">\n              <CardContent className=\"p-2 sm:p-4 flex items-center space-x-2 sm:space-x-3\">\n                <Coins className=\"w-4 h-4 sm:w-6 sm:h-6 text-yellow-500\" />\n                <div className=\"text-right\">\n                  <div className=\"text-lg sm:text-2xl font-bold text-yellow-500\" data-testid=\"text-user-credits\">\n                    {userData?.credits || \"0\"}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">Credits</div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Recent Pulls Carousel - TOP PRIORITY */}\n          <section className=\"mb-8\">\n            <RecentPullsCarousel limit={10} />\n          </section>\n\n          {/* Games Collection - FIRST PRIORITY */}\n          <section className=\"mb-12\">\n            <div className=\"flex items-center justify-between mb-6 sm:mb-8\">\n              <div className=\"flex items-center space-x-2 sm:space-x-3\">\n                <div className=\"w-8 h-8 sm:w-10 sm:h-10 bg-gradient-to-r from-orange-500 to-red-500 rounded-lg sm:rounded-xl flex items-center justify-center shadow-lg\">\n                  <Gamepad2 className=\"w-4 h-4 sm:w-6 sm:h-6 text-white\" />\n                </div>\n                <div>\n                  <h2 className=\"font-gaming font-bold text-xl sm:text-3xl bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n                    Quick Play\n                  </h2>\n                  <p className=\"text-muted-foreground text-sm sm:text-base\">Choose your adventure and win amazing cards</p>\n                </div>\n              </div>\n              <Badge variant=\"secondary\" className=\"bg-gradient-to-r from-orange-100 to-red-100 text-orange-800 dark:from-orange-900 dark:to-red-900 dark:text-orange-200 px-2 sm:px-4 py-1 sm:py-2 text-xs sm:text-sm font-medium\">\n                🔥 All Games Available\n              </Badge>\n            </div>\n\n            {/* Enhanced grid layout for all 3 games */}\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-6 mb-6 sm:mb-8\">\n              {games.map((game, index) => (\n                <Card key={index} className=\"gaming-card hover:glow-effect transition-all duration-300 transform hover:scale-[1.05] hover:-translate-y-2 group border-2 hover:border-primary/50 relative overflow-hidden\">\n                  {/* Popular badge for featured games */}\n                  {game.popular && (\n                    <div className=\"absolute top-4 right-4 z-10\">\n                      <Badge className=\"bg-gradient-to-r from-yellow-400 to-orange-500 text-white border-0 shadow-lg\">\n                        <Star className=\"w-3 h-3 mr-1\" />\n                        Popular\n                      </Badge>\n                    </div>\n                  )}\n                  \n                  {/* Animated background gradient */}\n                  <div className={`absolute inset-0 bg-gradient-to-br ${game.color} opacity-5 group-hover:opacity-10 transition-opacity duration-300`}></div>\n                  \n                  <CardContent className=\"p-4 sm:p-6 relative\">\n                    <div className=\"text-center mb-4 sm:mb-6\">\n                      <div className={`w-16 h-16 sm:w-24 sm:h-24 mx-auto rounded-2xl sm:rounded-3xl bg-gradient-to-br ${game.color} flex items-center justify-center shadow-lg group-hover:shadow-2xl transition-all duration-300 mb-4 group-hover:scale-110`}>\n                        {game.icon}\n                      </div>\n                      <h3 className=\"font-gaming font-bold text-lg sm:text-2xl mb-2 group-hover:text-primary transition-colors\">\n                        {game.name}\n                      </h3>\n                      <p className=\"text-muted-foreground text-sm sm:text-base leading-relaxed mb-4\">\n                        {game.description}\n                      </p>\n                    </div>\n                    \n                    <div className=\"space-y-2 sm:space-y-4\">\n                      <div className=\"flex items-center justify-center\">\n                        <Badge \n                          variant=\"outline\" \n                          className={`text-sm sm:text-lg px-2 sm:px-4 py-1 sm:py-2 font-bold border-2 bg-gradient-to-r ${game.color} text-white border-transparent group-hover:shadow-lg transition-all`}\n                        >\n                          <Coins className=\"w-3 h-3 sm:w-4 sm:h-4 mr-1 sm:mr-2\" />\n                          {game.cost} Credits\n                        </Badge>\n                      </div>\n                      \n                      <Link href={game.route} className=\"block\">\n                        <Button \n                          size=\"default\"\n                          className={`w-full bg-gradient-to-r ${game.color} hover:glow-effect transition-all duration-300 text-sm sm:text-lg py-2 sm:py-3 font-bold shadow-lg hover:shadow-xl transform hover:scale-105`}\n                          data-testid={`button-play-${game.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                        >\n                          <Play className=\"w-4 h-4 sm:w-5 sm:h-5 mr-1 sm:mr-2\" />\n                          {game.name === \"Black Bolt\" ? \"Open Packs\" : \"Play Now\"}\n                        </Button>\n                      </Link>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            {/* Enhanced call-to-action */}\n            <div className=\"bg-gradient-to-r from-primary/10 via-accent/5 to-legendary/10 rounded-xl sm:rounded-2xl p-4 sm:p-8 text-center border border-primary/20\">\n              <div className=\"mb-3 sm:mb-4\">\n                <TrendingUp className=\"w-8 h-8 sm:w-12 sm:h-12 mx-auto text-primary mb-2 sm:mb-3\" />\n                <h3 className=\"font-gaming font-bold text-lg sm:text-2xl mb-2\">Ready for More Action?</h3>\n                <p className=\"text-muted-foreground text-sm sm:text-lg\">\n                  Explore additional game modes and special events in our games lobby\n                </p>\n              </div>\n              <Link href=\"/play\">\n                <Button \n                  size=\"default\" \n                  variant=\"outline\"\n                  className=\"text-sm sm:text-lg px-6 sm:px-10 py-2 sm:py-4 border-2 border-primary hover:bg-primary hover:text-primary-foreground transition-all duration-300 hover:scale-105 font-bold\"\n                  data-testid=\"button-view-all-games\"\n                >\n                  <Gamepad2 className=\"w-4 h-4 sm:w-5 sm:h-5 mr-1 sm:mr-2\" />\n                  Explore Games Lobby\n                </Button>\n              </Link>\n            </div>\n          </section>\n\n          {/* Get More Credits - SECOND PRIORITY */}\n          <section className=\"mb-12\">\n            <div className=\"flex items-center space-x-2 sm:space-x-3 mb-4 sm:mb-6\">\n              <div className=\"w-6 h-6 sm:w-8 sm:h-8 bg-gradient-to-r from-green-500 to-emerald-500 rounded-lg flex items-center justify-center\">\n                <Coins className=\"w-3 h-3 sm:w-5 sm:h-5 text-white\" />\n              </div>\n              <h2 className=\"font-gaming font-bold text-xl sm:text-3xl\">Get More Credits</h2>\n            </div>\n            \n            <Card className=\"gaming-card border-2 border-green-200 dark:border-green-700\">\n              <CardContent className=\"p-4 sm:p-8\">\n                <CreditPurchase />\n              </CardContent>\n            </Card>\n          </section>\n\n        </div>\n      </main>\n      \n      {/* Footer */}\n      <footer className=\"bg-secondary/20 border-t border-border py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <p className=\"text-muted-foreground\">\n              &copy; 2025 Drops. Built for collectors, by collectors.\n            </p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":12906},"client/src/pages/landing.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Zap, Play, Info, Gift, RotateCcw, DollarSign } from \"lucide-react\";\nimport { useTheme } from \"@/components/ThemeProvider\";\n\nexport default function Landing() {\n  const { theme, toggleTheme } = useTheme();\n\n  const tierData = [\n    { tier: \"D\", name: \"D Tier\", color: \"d\", odds: \"75.0%\" },\n    { tier: \"C\", name: \"C Tier\", color: \"c\", odds: \"15.0%\" },\n    { tier: \"B\", name: \"B Tier\", color: \"b\", odds: \"8.0%\" },\n    { tier: \"A\", name: \"A Tier\", color: \"a\", odds: \"1.8%\" },\n    { tier: \"S\", name: \"S Tier\", color: \"s\", odds: \"0.15%\" },\n    { tier: \"SS\", name: \"SS Tier\", color: \"ss\", odds: \"0.04%\" },\n    { tier: \"SSS\", name: \"SSS Tier\", color: \"sss\", odds: \"0.01%\" },\n  ];\n\n  const games = [\n    {\n      name: \"Arcade Mode\",\n      description: \"Play Plinko and Wheel games to earn packs! Win different tier packs based on your results.\",\n      cost: \"1.0+ Credits\",\n      maxPayout: \"SSS Tier\",\n      color: \"from-primary to-accent\",\n      icon: <Play className=\"w-4 h-4\" />,\n    },\n    {\n      name: \"Rip Packs Mode\",\n      description: \"Open earned packs to discover amazing cards! Each pack contains 8 commons plus 1 hit card.\",\n      cost: \"Free\",\n      maxPayout: \"SSS Tier\",\n      color: \"from-superrare to-legendary\",\n      icon: <Gift className=\"w-4 h-4\" />,\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Navigation */}\n      <nav className=\"fixed top-0 left-0 right-0 z-50 nav-blur border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-gradient-to-br from-primary to-accent rounded-lg flex items-center justify-center glow-effect\">\n                <Zap className=\"text-primary-foreground text-xl\" />\n              </div>\n              <span className=\"font-gaming font-bold text-xl bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n                Drops\n              </span>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={toggleTheme}\n                data-testid=\"button-theme-toggle\"\n              >\n                {theme === \"dark\" ? \"🌞\" : \"🌙\"}\n              </Button>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Hero Section */}\n      <main className=\"pt-20 pb-12\">\n        <section className=\"relative overflow-hidden\">\n          <div className=\"absolute inset-0 opacity-30 bg-gradient-to-br from-primary/20 to-accent/20\"></div>\n          <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20\">\n            <div className=\"text-center\">\n              <h1 className=\"font-gaming font-black text-4xl md:text-6xl lg:text-7xl mb-6\">\n                <span className=\"bg-gradient-to-r from-primary via-accent to-legendary bg-clip-text text-transparent\">\n                  DROPS\n                </span>\n              </h1>\n              <p className=\"text-xl md:text-2xl text-muted-foreground mb-8 max-w-3xl mx-auto\">\n                Experience the thrill of premium TCG pack opening with transparent odds, \n                unlimited vault storage, and exciting minigames.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                <Link href=\"/register\">\n                  <Button\n                    size=\"lg\"\n                    className=\"bg-gradient-to-r from-primary to-accent hover:glow-effect transform hover:scale-105 transition-all\"\n                    data-testid=\"button-register\"\n                  >\n                    <Play className=\"mr-2 h-4 w-4\" />\n                    Create Account\n                  </Button>\n                </Link>\n                <Link href=\"/login\">\n                  <Button\n                    size=\"lg\"\n                    variant=\"outline\"\n                    className=\"border-primary text-primary hover:bg-primary hover:text-primary-foreground\"\n                    data-testid=\"button-login\"\n                  >\n                    Sign In\n                  </Button>\n                </Link>\n              </div>\n            </div>\n          </div>\n        </section>\n      </main>\n\n      {/* Footer */}\n      <footer className=\"bg-secondary/20 border-t border-border py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center space-x-3 mb-6\">\n              <div className=\"w-10 h-10 bg-gradient-to-br from-primary to-accent rounded-lg flex items-center justify-center glow-effect\">\n                <Zap className=\"text-primary-foreground text-xl\" />\n              </div>\n              <span className=\"font-gaming font-bold text-xl bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n                Drops\n              </span>\n            </div>\n            <p className=\"text-muted-foreground mb-4\">Premium TCG pack opening experience with transparent odds</p>\n            <div className=\"flex justify-center space-x-6 text-sm text-muted-foreground\">\n              <a href=\"#\" className=\"hover:text-primary transition-colors\">Terms of Service</a>\n              <a href=\"#\" className=\"hover:text-primary transition-colors\">Privacy Policy</a>\n              <a href=\"#\" className=\"hover:text-primary transition-colors\">Support</a>\n              <a href=\"#\" className=\"hover:text-primary transition-colors\">Odds Transparency</a>\n            </div>\n            <div className=\"mt-6 text-xs text-muted-foreground\">\n              © 2024 Drops. All rights reserved. • Play responsibly.\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":6074},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/vault.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Navigation } from \"@/components/Navigation\";\nimport { CardDisplay } from \"@/components/CardDisplay\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Package, RefreshCw, Truck, Filter, Grid, List } from \"lucide-react\";\nimport type { UserCardWithCard } from \"@shared/schema\";\n\nexport default function Vault() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const queryClient = useQueryClient();\n  const [selectedCards, setSelectedCards] = useState<string[]>([]);\n  const [filterTier, setFilterTier] = useState<string>(\"all\");\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: vaultCards, isLoading: vaultLoading } = useQuery<UserCardWithCard[]>({\n    queryKey: [\"/api/vault\"],\n    enabled: isAuthenticated,\n  });\n\n  const refundMutation = useMutation({\n    mutationFn: async (cardIds: string[]) => {\n      await apiRequest(\"POST\", \"/api/vault/refund\", { cardIds });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/vault\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      setSelectedCards([]);\n      toast({\n        title: \"Cards Refunded\",\n        description: `Successfully refunded ${selectedCards.length} cards`,\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Refund Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  const handleSelectAll = () => {\n    if (selectedCards.length === filteredCards.length && filteredCards.length > 0) {\n      setSelectedCards([]);\n    } else {\n      setSelectedCards(filteredCards.map(card => card.id));\n    }\n  };\n\n  const handleCardSelect = (cardId: string) => {\n    setSelectedCards(prev => \n      prev.includes(cardId) \n        ? prev.filter(id => id !== cardId)\n        : [...prev, cardId]\n    );\n  };\n\n  const calculateRefundValue = () => {\n    if (!vaultCards) return 0;\n    return selectedCards.reduce((total, cardId) => {\n      const card = vaultCards.find(c => c.id === cardId);\n      if (!card) return total;\n      // Use current market value for refund calculation (100% value)\n      const refundValue = card.card?.marketValue ? parseFloat(card.card.marketValue.toString()) : parseFloat(card.pullValue);\n      return total + (refundValue * card.quantity);\n    }, 0);\n  };\n\n  // No need for tier mapping anymore since we're using direct tier codes\n  const getTierMapping = (filterValue: string) => {\n    return filterValue; // Direct mapping since database now uses D, C, B, A, S, SS, SSS\n  };\n\n  const filteredCards = vaultCards?.filter(card => \n    card.card && (filterTier === \"all\" || card.card.tier === getTierMapping(filterTier))\n  ) || [];\n\n  const tierCounts = vaultCards?.reduce((acc, card) => {\n    // Database now uses direct tier codes (D, C, B, A, S, SS, SSS)\n    if (card.card && card.card.tier) {\n      acc[card.card.tier] = (acc[card.card.tier] || 0) + 1;\n    }\n    return acc;\n  }, {} as Record<string, number>) || {};\n\n  const tiers = [\n    { value: \"all\", label: \"All Cards\", count: vaultCards?.length || 0 },\n    { value: \"SSS\", label: \"SSS Tier\", count: tierCounts.SSS || 0, color: \"legendary\" },\n    { value: \"SS\", label: \"SS Tier\", count: tierCounts.SS || 0, color: \"superrare\" },\n    { value: \"S\", label: \"S Tier\", count: tierCounts.S || 0, color: \"rare\" },\n    { value: \"A\", label: \"A Tier\", count: tierCounts.A || 0, color: \"uncommon\" },\n    { value: \"B\", label: \"B Tier\", count: tierCounts.B || 0, color: \"common\" },\n    { value: \"C\", label: \"C Tier\", count: tierCounts.C || 0, color: \"common\" },\n    { value: \"D\", label: \"D Tier\", count: tierCounts.D || 0, color: \"common\" },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      \n      <main className=\"pt-20 pb-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Header */}\n          <section className=\"py-4 sm:py-8\">\n            <div className=\"text-center mb-6 sm:mb-8\">\n              <h1 className=\"font-gaming font-bold text-2xl sm:text-3xl md:text-4xl lg:text-5xl mb-3 sm:mb-4\">\n                <span className=\"bg-gradient-to-r from-primary via-accent to-legendary bg-clip-text text-transparent\">\n                  YOUR VAULT\n                </span>\n              </h1>\n              <p className=\"text-muted-foreground text-sm sm:text-base lg:text-lg px-4\">\n                Manage your card collection • Refund for credits or ship to your door\n              </p>\n            </div>\n\n            {/* Quick Stats */}\n            <div className=\"grid grid-cols-3 md:grid-cols-3 gap-2 sm:gap-4 mb-6 sm:mb-8\">\n              <Card className=\"gaming-card\">\n                <CardContent className=\"p-2 sm:p-4 text-center\">\n                  <div className=\"text-lg sm:text-xl lg:text-2xl font-bold text-primary\" data-testid=\"text-total-cards\">\n                    {vaultCards?.length || 0}\n                  </div>\n                  <div className=\"text-xs sm:text-sm text-muted-foreground\">Total Cards</div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"gaming-card\">\n                <CardContent className=\"p-2 sm:p-4 text-center\">\n                  <div className=\"text-lg sm:text-xl lg:text-2xl font-bold text-accent\" data-testid=\"text-selected-cards\">\n                    {selectedCards.length}\n                  </div>\n                  <div className=\"text-xs sm:text-sm text-muted-foreground\">Selected</div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"gaming-card\">\n                <CardContent className=\"p-2 sm:p-4 text-center\">\n                  <div className=\"text-lg sm:text-xl lg:text-2xl font-bold text-legendary\" data-testid=\"text-refund-value\">\n                    {calculateRefundValue().toFixed(2)}\n                  </div>\n                  <div className=\"text-xs sm:text-sm text-muted-foreground\">Refund Value (CR)</div>\n                </CardContent>\n              </Card>\n\n              \n            </div>\n\n            {/* Controls */}\n            <Card className=\"gaming-card mb-6 sm:mb-8\">\n              <CardContent className=\"p-3 sm:p-6\">\n                <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-3 sm:space-y-4 lg:space-y-0\">\n                  {/* Filters */}\n                  <div className=\"flex flex-wrap items-center gap-1 sm:gap-2\">\n                    <Filter className=\"w-3 h-3 sm:w-4 sm:h-4 text-muted-foreground\" />\n                    {tiers.map((tier) => (\n                      <Button\n                        key={tier.value}\n                        variant={filterTier === tier.value ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        onClick={() => setFilterTier(tier.value)}\n                        className={`text-xs sm:text-sm ${tier.color ? `hover:tier-glow-${tier.color}` : \"\"}`}\n                        data-testid={`filter-${tier.value}`}\n                      >\n                        <span className=\"hidden sm:inline\">{tier.label}</span>\n                        <span className=\"sm:hidden\">{tier.value === \"all\" ? \"All\" : tier.value}</span>\n                        <span className=\"ml-1\">({tier.count})</span>\n                      </Button>\n                    ))}\n                  </div>\n\n                  {/* View Mode & Actions */}\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setViewMode(viewMode === \"grid\" ? \"list\" : \"grid\")}\n                      data-testid=\"button-toggle-view\"\n                    >\n                      {viewMode === \"grid\" ? <List className=\"w-4 h-4\" /> : <Grid className=\"w-4 h-4\" />}\n                    </Button>\n\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={handleSelectAll}\n                      data-testid=\"button-select-all\"\n                    >\n                      {selectedCards.length === filteredCards.length ? \"Deselect All\" : \"Select All\"}\n                    </Button>\n\n                    <Button\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      disabled={selectedCards.length === 0 || refundMutation.isPending}\n                      onClick={() => refundMutation.mutate(selectedCards)}\n                      data-testid=\"button-refund-selected\"\n                    >\n                      {refundMutation.isPending ? (\n                        <RefreshCw className=\"w-4 h-4 animate-spin mr-2\" />\n                      ) : (\n                        <RefreshCw className=\"w-4 h-4 mr-2\" />\n                      )}\n                      Refund Selected\n                    </Button>\n\n                    <Button\n                      size=\"sm\"\n                      disabled={selectedCards.length === 0}\n                      data-testid=\"button-ship-selected\"\n                    >\n                      <Truck className=\"w-4 h-4 mr-2\" />\n                      Ship Cards\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </section>\n\n          {/* Cards Display */}\n          <section>\n            {vaultLoading ? (\n              <div className=\"text-center py-12\">\n                <div className=\"animate-spin rounded-full h-16 w-16 border-b-2 border-primary mx-auto\"></div>\n                <p className=\"mt-4 text-muted-foreground\">Loading your collection...</p>\n              </div>\n            ) : filteredCards.length === 0 ? (\n              <Card className=\"gaming-card\">\n                <CardContent className=\"p-12 text-center\">\n                  <Package className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground\" />\n                  <h3 className=\"text-xl font-semibold mb-2\">\n                    {filterTier === \"all\" ? \"No Cards Yet\" : `No ${tiers.find(t => t.value === filterTier)?.label} Cards`}\n                  </h3>\n                  <p className=\"text-muted-foreground mb-6\">\n                    {filterTier === \"all\" \n                      ? \"Start playing games to build your collection!\" \n                      : \"Try a different filter or play more games to find these cards.\"\n                    }\n                  </p>\n                  <Button \n                    className=\"bg-gradient-to-r from-primary to-accent\"\n                    onClick={() => window.location.href = \"/games\"}\n                    data-testid=\"button-play-games\"\n                  >\n                    Play Games\n                  </Button>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className={viewMode === \"grid\" \n                ? \"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-2 sm:gap-3 md:gap-4\" \n                : \"space-y-3 sm:space-y-4\"\n              }>\n                {filteredCards.map((userCard) => (\n                  <div key={userCard.id} className=\"relative group\">\n                    <div className=\"absolute top-2 left-2 z-10\">\n                      <Checkbox\n                        checked={selectedCards.includes(userCard.id)}\n                        onCheckedChange={() => handleCardSelect(userCard.id)}\n                        className=\"bg-background/80 backdrop-blur-sm\"\n                        data-testid={`checkbox-card-${userCard.id}`}\n                      />\n                    </div>\n                    \n                    <CardDisplay \n                      card={userCard.card}\n                      userCard={userCard}\n                      viewMode={viewMode}\n                      isSelected={selectedCards.includes(userCard.id)}\n                      onClick={() => handleCardSelect(userCard.id)}\n                    />\n                  </div>\n                ))}\n              </div>\n            )}\n          </section>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":13513},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/my-packs.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Navigation } from \"@/components/Navigation\";\nimport { PackOpeningAnimation } from \"@/components/PackOpeningAnimation\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Package2, Sparkles, Gift } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Import pack images\nimport masterballPack from '@assets/ChatGPT Image Aug 30, 2025, 11_21_42 PM_1756567318737.png';\nimport ultraballPack from '@assets/ChatGPT Image Aug 30, 2025, 11_21_45 PM_1756567324980.png';\nimport greatballPack from '@assets/ChatGPT Image Aug 30, 2025, 11_22_18 PM_1756567342025.png';\nimport pokeballPack from '@assets/ChatGPT Image Aug 30, 2025, 11_22_50 PM_1756567373572.png';\n\ninterface UserPack {\n  id: string;\n  packId: string;\n  tier: string;\n  earnedFrom: string;\n  earnedAt: string;\n}\n\ninterface PackCard {\n  id: string;\n  name: string;\n  tier: string;\n  imageUrl?: string;\n  marketValue: string;\n  isHit: boolean;\n  position: number;\n}\n\ninterface OpenPackResult {\n  success: boolean;\n  userCard: {\n    id: string;\n    cardId: string;\n    pullValue: string;\n  };\n  packCards: PackCard[];\n  hitCardPosition: number;\n}\n\nexport default function MyPacks() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [openingPack, setOpeningPack] = useState<string | null>(null);\n  const [showAnimation, setShowAnimation] = useState(false);\n  const [packOpenData, setPackOpenData] = useState<OpenPackResult | null>(null);\n\n  // Fetch user's packs\n  const { data: userPacks, isLoading } = useQuery({\n    queryKey: [\"/api/packs\"],\n  });\n\n  const openPackMutation = useMutation({\n    mutationFn: async (packId: string) => {\n      const response = await apiRequest(\"POST\", `/api/packs/open/${packId}`);\n      return await response.json();\n    },\n    onSuccess: (result) => {\n      setPackOpenData(result);\n      setShowAnimation(true);\n      setOpeningPack(null);\n      // Immediately invalidate cache so pack disappears from UI\n      queryClient.invalidateQueries({ queryKey: [\"/api/packs\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/vault\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error Opening Pack\",\n        description: error.message || \"Failed to open pack\",\n        variant: \"destructive\",\n      });\n      setOpeningPack(null);\n    },\n  });\n\n  const handleOpenPack = (packType: string) => {\n    // Find the first available pack of this type\n    const availablePacks = groupedPacks[packType] || [];\n    if (availablePacks.length > 0) {\n      const packToOpen = availablePacks[0];\n      setOpeningPack(packToOpen.id);\n      openPackMutation.mutate(packToOpen.id);\n    }\n  };\n\n  const handleAnimationComplete = () => {\n    setShowAnimation(false);\n    setPackOpenData(null);\n    toast({\n      title: \"Pack Opened!\",\n      description: \"Your card has been added to your vault!\",\n      variant: \"default\",\n    });\n  };\n\n  const getPackTypeDisplay = (packType: string) => {\n    // Now tier field directly stores the pack type (pokeball, greatball, ultraball, masterball)\n    console.log(`Pack display: packType=\"${packType}\"`);\n    \n    switch ((packType || '').toLowerCase()) {\n      case 'pokeball':\n        return { \n          name: \"Pokeball Pack\", \n          color: \"from-red-600 to-white\", \n          borderColor: \"border-red-500\",\n          textColor: \"text-red-600\",\n          bgColor: \"bg-red-50\",\n          tier: \"Common\"\n        };\n      case 'greatball':\n        return { \n          name: \"Great Ball Pack\", \n          color: \"from-blue-600 to-red-500\", \n          borderColor: \"border-blue-500\",\n          textColor: \"text-blue-600\",\n          bgColor: \"bg-blue-50\",\n          tier: \"Uncommon\"\n        };\n      case 'ultraball':\n        return { \n          name: \"Ultra Ball Pack\", \n          color: \"from-yellow-400 to-black\", \n          borderColor: \"border-yellow-500\",\n          textColor: \"text-yellow-600\",\n          bgColor: \"bg-yellow-50\",\n          tier: \"Rare\"\n        };\n      case 'masterball':\n        return { \n          name: \"Master Ball Pack\", \n          color: \"from-purple-600 to-pink-400\", \n          borderColor: \"border-purple-500\",\n          textColor: \"text-purple-600\",\n          bgColor: \"bg-purple-50\",\n          tier: \"Legendary\"\n        };\n      default:\n        return { \n          name: \"Mystery Pack\", \n          color: \"from-gray-600 to-gray-400\", \n          borderColor: \"border-gray-500\",\n          textColor: \"text-gray-600\",\n          bgColor: \"bg-gray-50\",\n          tier: \"Unknown\"\n        };\n    }\n  };\n\n  // Group packs by tier and count them\n  const groupedPacks = (userPacks as any[] || []).reduce((acc: any, pack: any) => {\n    const tier = pack.tier || 'unknown';\n    if (!acc[tier]) {\n      acc[tier] = [];\n    }\n    acc[tier].push(pack);\n    return acc;\n  }, {});\n\n  const packTiers = ['pokeball', 'greatball', 'ultraball', 'masterball'];\n\n  // Pokemon pack images component\n  const PackImage = ({ packType, size = 'large' }: { packType: string; size?: 'small' | 'large' }) => {\n    const getPackImage = (type: string) => {\n      switch (type.toLowerCase()) {\n        case 'masterball':\n          return masterballPack;\n        case 'ultraball':\n          return ultraballPack;\n        case 'greatball':\n          return greatballPack;\n        case 'pokeball':\n          return pokeballPack;\n        default:\n          return pokeballPack;\n      }\n    };\n    \n    const imageSize = size === 'small' ? 'w-16 h-20' : 'w-48 h-60';\n    \n    return (\n      <div className={`${imageSize} mx-auto`}>\n        <img \n          src={getPackImage(packType)} \n          alt={`${packType} pack`}\n          className=\"w-full h-full object-contain pixel-crisp\"\n          style={{ imageRendering: 'pixelated' }}\n        />\n      </div>\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen pt-20 pb-8 px-4\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"flex items-center justify-center py-12\">\n            <div className=\"text-center\">\n              <Package2 className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground animate-pulse\" />\n              <p>Loading your packs...</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const noPacks = !userPacks || (userPacks as any[]).length === 0;\n\n  return (\n    <>\n      <Navigation />\n      <div className=\"min-h-screen pt-20 pb-8 px-4\">\n        <div className=\"max-w-6xl mx-auto space-y-8\">\n          {/* Header */}\n          <div className=\"text-center space-y-4\">\n            <div className=\"flex items-center justify-center gap-3\">\n              <Gift className=\"h-8 w-8 text-primary\" />\n              <h1 className=\"text-4xl font-gaming font-bold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n                My Packs\n              </h1>\n            </div>\n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n              Open your earned packs to discover amazing cards! Higher tier packs have better odds for rare cards.\n            </p>\n            {!noPacks && (\n              <div className=\"flex justify-center mt-4\">\n                <div className=\"text-center\">\n                  <p className=\"text-2xl font-bold text-primary\">{(userPacks as any[] || []).length}</p>\n                  <p className=\"text-sm text-muted-foreground\">Total Packs</p>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {noPacks ? (\n            /* No Packs State */\n            (<div className=\"text-center py-16\">\n              <div className=\"gaming-card max-w-md mx-auto p-8 rounded-xl\">\n                <PackImage packType=\"pokeball\" size=\"large\" />\n                <h3 className=\"text-xl font-semibold mb-2 mt-6\">No Packs Yet</h3>\n                <p className=\"text-muted-foreground mb-6\">Play Minigames to earn Mystery Packs</p>\n                <Button asChild className=\"gaming-gradient\">\n                  <a href=\"/play\" data-testid=\"button-play\">\n                    <Sparkles className=\"mr-2 h-4 w-4\" />\n                    Play\n                  </a>\n                </Button>\n              </div>\n            </div>)\n          ) : (\n            /* 4 Pack Types Inline */\n            (<div className=\"flex justify-center items-start gap-16 flex-wrap py-8\">\n              {packTiers.map((tier) => {\n                const packs = groupedPacks[tier] || [];\n                const packDisplay = getPackTypeDisplay(tier);\n                \n                return (\n                  <div key={tier} className=\"text-center\">\n                    <h3 className={`text-xl font-gaming font-bold mb-4 ${packDisplay.textColor}`}>\n                      {packDisplay.name}\n                    </h3>\n                    <div className=\"mb-6\">\n                      <PackImage packType={tier} size=\"large\" />\n                    </div>\n                    \n                    {packs.length > 0 && (\n                      <div className=\"space-y-3\">\n                        <Badge className={`${packDisplay.textColor} text-sm px-3 py-1`} variant=\"outline\">\n                          {packs.length} available\n                        </Badge>\n                        \n                        <div className=\"space-y-2\">\n                          <Button \n                            onClick={() => handleOpenPack(tier)}\n                            disabled={openingPack !== null}\n                            className={`w-full bg-gradient-to-r ${packDisplay.color} text-white hover:opacity-90 transition-opacity`}\n                            data-testid={`button-open-pack-${tier}`}\n                            size=\"sm\"\n                          >\n                            {openingPack ? (\n                              <div className=\"flex items-center gap-2\">\n                                <div className=\"w-3 h-3 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                                Opening...\n                              </div>\n                            ) : (\n                              <div className=\"flex items-center gap-2\">\n                                <Package2 className=\"h-3 w-3\" />\n                                Open Pack\n                              </div>\n                            )}\n                          </Button>\n                        </div>\n                      </div>\n                    )}\n                    \n                    {packs.length === 0 && (\n                      <div className=\"mt-4\">\n                        <p className=\"text-sm text-muted-foreground\">No packs available</p>\n                      </div>\n                    )}\n                  </div>\n                );\n              })}\n            </div>)\n          )}\n\n        </div>\n\n        {/* Pack Odds Section */}\n        <div className=\"max-w-4xl mx-auto mt-16 mb-8\">\n          <div className=\"text-center mb-8\">\n            <h2 className=\"text-2xl font-gaming font-bold mb-2\">Pack Odds</h2>\n            <p className=\"text-muted-foreground\">Probability of pulling each tier from different pack types</p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {/* Pokeball Pack */}\n            <div className=\"gaming-card p-6 rounded-xl\">\n              <div className=\"text-center mb-4\">\n                <div className=\"flex justify-center mb-3\">\n                  <PackImage packType=\"pokeball\" size=\"large\" />\n                </div>\n                <h3 className=\"font-bold text-lg text-red-600\">Pokeball Pack</h3>\n              </div>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-green-600\">C Tier:</span>\n                  <span className=\"font-semibold\">84.8%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-blue-600\">B Tier:</span>\n                  <span className=\"font-semibold\">7.0%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-purple-600\">A Tier:</span>\n                  <span className=\"font-semibold\">5.2%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-yellow-600\">S Tier:</span>\n                  <span className=\"font-semibold\">2.8%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-pink-600\">SS Tier:</span>\n                  <span className=\"font-semibold\">0.15%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-red-600\">SSS Tier:</span>\n                  <span className=\"font-semibold\">0.05%</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Greatball Pack */}\n            <div className=\"gaming-card p-6 rounded-xl\">\n              <div className=\"text-center mb-4\">\n                <div className=\"flex justify-center mb-3\">\n                  <PackImage packType=\"greatball\" size=\"large\" />\n                </div>\n                <h3 className=\"font-bold text-lg text-blue-600\">Great Ball Pack</h3>\n              </div>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-green-600\">C Tier:</span>\n                  <span className=\"font-semibold\">50.0%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-blue-600\">B Tier:</span>\n                  <span className=\"font-semibold\">22.0%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-purple-600\">A Tier:</span>\n                  <span className=\"font-semibold\">15.0%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-yellow-600\">S Tier:</span>\n                  <span className=\"font-semibold\">9.0%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-pink-600\">SS Tier:</span>\n                  <span className=\"font-semibold\">3.0%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-red-600\">SSS Tier:</span>\n                  <span className=\"font-semibold\">1.0%</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Ultraball Pack */}\n            <div className=\"gaming-card p-6 rounded-xl\">\n              <div className=\"text-center mb-4\">\n                <div className=\"flex justify-center mb-3\">\n                  <PackImage packType=\"ultraball\" size=\"large\" />\n                </div>\n                <h3 className=\"font-bold text-lg text-yellow-600\">Ultra Ball Pack</h3>\n              </div>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-green-600\">C Tier:</span>\n                  <span className=\"font-semibold\">20.0%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-blue-600\">B Tier:</span>\n                  <span className=\"font-semibold\">32.5%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-purple-600\">A Tier:</span>\n                  <span className=\"font-semibold\">27.0%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-yellow-600\">S Tier:</span>\n                  <span className=\"font-semibold\">12.0%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-pink-600\">SS Tier:</span>\n                  <span className=\"font-semibold\">6.0%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-red-600\">SSS Tier:</span>\n                  <span className=\"font-semibold\">2.5%</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Masterball Pack */}\n            <div className=\"gaming-card p-6 rounded-xl\">\n              <div className=\"text-center mb-4\">\n                <div className=\"flex justify-center mb-3\">\n                  <PackImage packType=\"masterball\" size=\"large\" />\n                </div>\n                <h3 className=\"font-bold text-lg text-purple-600\">Master Ball Pack</h3>\n              </div>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">D Tier:</span>\n                  <span className=\"font-semibold\">0.0%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-green-600\">C Tier:</span>\n                  <span className=\"font-semibold\">0.0%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-blue-600\">B Tier:</span>\n                  <span className=\"font-semibold\">39.0%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-purple-600\">A Tier:</span>\n                  <span className=\"font-semibold\">34.0%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-yellow-600\">S Tier:</span>\n                  <span className=\"font-semibold\">15.0%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-pink-600\">SS Tier:</span>\n                  <span className=\"font-semibold\">8.0%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-red-600\">SSS Tier:</span>\n                  <span className=\"font-semibold\">4.0%</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      {/* Pack Opening Animation */}\n      {showAnimation && packOpenData && (\n        <PackOpeningAnimation\n          packCards={packOpenData.packCards}\n          hitCardPosition={packOpenData.hitCardPosition}\n          onComplete={handleAnimationComplete}\n          packType={packOpenData.packCards?.[packOpenData.hitCardPosition]?.tier ? getPackTypeDisplay(packOpenData.packCards[packOpenData.hitCardPosition].tier).name : 'Unknown Pack'}\n        />\n      )}\n    </>\n  );\n}","size_bytes":19109},"client/src/components/PackOpeningAnimation.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Sparkles, Star, Gift } from \"lucide-react\";\nimport hitCardImage from \"@assets/ChatGPT Image Aug 31, 2025, 11_19_51 AM_1756610395060.png\";\n\ninterface PackCard {\n  id: string;\n  name: string;\n  tier: string;\n  imageUrl?: string;\n  marketValue: string;\n  isHit: boolean;\n  position: number;\n}\n\ninterface PackOpeningAnimationProps {\n  packCards: PackCard[];\n  hitCardPosition: number;\n  onComplete: () => void;\n  packType: string;\n}\n\nexport function PackOpeningAnimation({ packCards, hitCardPosition, onComplete, packType }: PackOpeningAnimationProps) {\n  const [showCommons, setShowCommons] = useState(true);\n  const [showHitCard, setShowHitCard] = useState(false);\n  const [isHitRevealed, setIsHitRevealed] = useState(false);\n  const [revealedCards, setRevealedCards] = useState(0);\n  const [hitCardRevealed, setHitCardRevealed] = useState(false);\n\n  // Guard against undefined packCards\n  if (!packCards || packCards.length === 0) {\n    return null;\n  }\n  \n  // Show all 9 cards in the initial display, but the hit card will have special styling\n  const hitCard = packCards.find(card => card.isHit);\n  const hitCardIndex = packCards.findIndex(card => card.isHit);\n  const nonHitCards = packCards.filter(card => !card.isHit);\n\n  // Start sequential card reveal animation - just like Black Bolt virtual packs\n  useEffect(() => {\n    if (showCommons) {\n      // Reset revealed cards\n      setRevealedCards(0);\n      \n      // Reveal ALL 9 cards one by one (8 commons + 1 hit card back)\n      packCards.forEach((_, index) => {\n        setTimeout(() => {\n          setRevealedCards(index + 1);\n        }, 500 + (index * 150)); // Start after 500ms, then 150ms intervals\n      });\n      \n      // After all cards are revealed, enable hit card interaction\n      setTimeout(() => {\n        // All cards revealed, hit card is ready to tap\n      }, 500 + (packCards.length * 150) + 500);\n    }\n  }, [showCommons, packCards.length]);\n\n  const handleRevealHit = () => {\n    if (showCommons) {\n      setShowCommons(false);\n      setShowHitCard(true);\n      setIsHitRevealed(true); // Immediately reveal the hit card\n      return;\n    }\n\n    onComplete();\n  };\n\n  const getTierColor = (tier: string) => {\n    switch (tier.toLowerCase()) {\n      case 'd': return 'text-gray-500 border-gray-300';\n      case 'c': return 'text-green-500 border-green-300';\n      case 'b': return 'text-blue-500 border-blue-300';\n      case 'a': return 'text-purple-500 border-purple-300';\n      case 's': return 'text-yellow-500 border-yellow-300';\n      case 'ss': return 'text-pink-500 border-pink-300';\n      case 'sss': return 'text-red-500 border-red-300';\n      default: return 'text-gray-500 border-gray-300';\n    }\n  };\n\n  const getTierIcon = (tier: string) => {\n    if (tier === 'SSS' || tier === 'SS' || tier === 'S') {\n      return <Star className=\"h-4 w-4\" />;\n    }\n    return <Sparkles className=\"h-4 w-4\" />;\n  };\n\n  const getHitCardGlow = (tier: string) => {\n    switch (tier?.toLowerCase()) {\n      case 'sss':\n        return {\n          bg: 'bg-gradient-to-br from-red-400 via-red-500 to-red-600',\n          glow: 'shadow-2xl shadow-red-500/70 ring-4 ring-red-400 drop-shadow-2xl',\n          animate: 'animate-pulse',\n          particles: '⭐✨⭐',\n          borderGlow: 'border-red-400 shadow-red-500/80'\n        };\n      case 'ss':\n        return {\n          bg: 'bg-gradient-to-br from-pink-400 via-pink-500 to-pink-600', \n          glow: 'shadow-2xl shadow-pink-500/70 ring-4 ring-pink-400 drop-shadow-2xl',\n          animate: 'animate-pulse',\n          particles: '💎🔥💎',\n          borderGlow: 'border-pink-400 shadow-pink-500/80'\n        };\n      case 's':\n        return {\n          bg: 'bg-gradient-to-br from-yellow-400 via-yellow-500 to-yellow-600',\n          glow: 'shadow-xl shadow-yellow-500/60 ring-2 ring-yellow-400 drop-shadow-xl',\n          animate: 'animate-pulse',\n          particles: '⚡💫⚡',\n          borderGlow: 'border-yellow-400 shadow-yellow-500/70'\n        };\n      case 'a':\n        return {\n          bg: 'bg-gradient-to-br from-purple-400 via-purple-500 to-purple-600',\n          glow: 'shadow-xl shadow-purple-500/60 ring-2 ring-purple-400 drop-shadow-xl',\n          animate: 'animate-pulse',\n          particles: '💜⚡💜',\n          borderGlow: 'border-purple-400 shadow-purple-500/70'\n        };\n      case 'b':\n        return {\n          bg: 'bg-gradient-to-br from-blue-400 via-blue-500 to-blue-600',\n          glow: 'shadow-lg shadow-blue-500/50 ring-2 ring-blue-400 drop-shadow-lg',\n          animate: '',\n          particles: '💙🔹💙',\n          borderGlow: 'border-blue-400 shadow-blue-500/60'\n        };\n      case 'c':\n        return {\n          bg: 'bg-gradient-to-br from-green-400 via-green-500 to-green-600',\n          glow: 'shadow-lg shadow-green-500/50 ring-2 ring-green-400 drop-shadow-lg',\n          animate: '',\n          particles: '💚🍀💚',\n          borderGlow: 'border-green-400 shadow-green-500/60'\n        };\n      default:\n        return {\n          bg: 'bg-gradient-to-br from-gray-400 via-gray-500 to-gray-600',\n          glow: 'shadow-md shadow-gray-500/30 drop-shadow-md',\n          animate: '',\n          particles: '⚪⭕⚪',\n          borderGlow: 'border-gray-400 shadow-gray-500/50'\n        };\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50 p-4\">\n      <div className=\"max-w-md w-full\">\n        {/* Pack Opening Header */}\n        <div className=\"text-center mb-6\">\n          <div className=\"flex items-center justify-center gap-2 mb-2\">\n            <Gift className=\"h-6 w-6 text-primary\" />\n            <h2 className=\"text-2xl font-bold text-white\">Pack Opening</h2>\n          </div>\n          {showCommons ? (\n            <p className=\"text-gray-300\">\n              Revealing cards... {revealedCards}/{packCards.length} cards revealed\n            </p>\n          ) : showHitCard ? (\n            <Badge className=\"bg-gradient-to-r from-yellow-500 to-orange-500 text-white animate-pulse\">\n              HIT CARD!\n            </Badge>\n          ) : null}\n        </div>\n\n        {showCommons ? (\n          /* All 9 Cards Grid with Hit Card Peek */\n          <div className=\"mb-6\">\n            <h3 className=\"text-center text-white mb-4\">Your Pack Contents</h3>\n            <div className=\"grid grid-cols-3 gap-3 max-w-lg mx-auto mb-6\">\n              {packCards.map((card, index) => {\n                const isHitCard = card.isHit;\n                const isCardRevealed = index < revealedCards;\n                const canRevealHit = isHitCard && revealedCards >= packCards.length;\n                const hitGlow = isHitCard ? getHitCardGlow(card.tier || '') : null;\n                \n                // Show empty slot until card is revealed\n                if (!isCardRevealed) {\n                  return (\n                    <div \n                      key={index} \n                      className=\"gaming-card p-3 text-center opacity-30\"\n                    >\n                      <div className=\"w-12 h-16 mx-auto bg-gray-700/20 rounded mb-2\"></div>\n                    </div>\n                  );\n                }\n                \n                return (\n                  <div \n                    key={index} \n                    className={`gaming-card p-3 text-center transition-all duration-500 ease-out transform opacity-100 scale-100 animate-in slide-in-from-bottom-2 ${\n                      canRevealHit\n                        ? `${hitGlow?.glow} ${hitGlow?.animate} border-2 border-yellow-400 cursor-pointer hover:scale-105 animate-pulse`\n                        : ''\n                    }`}\n                    onClick={canRevealHit ? handleRevealHit : undefined}\n                  >\n                    {isHitCard ? (\n                      /* Hit Card - Show HIT CARD image with tier glow */\n                      <div className=\"space-y-1\">\n                        <div className={`w-12 h-16 mx-auto rounded overflow-hidden border-2 ${hitGlow?.borderGlow} ${hitGlow?.glow} ${hitGlow?.animate}`}>\n                          <img \n                            src={hitCardImage} \n                            alt=\"Hit Card\" \n                            className=\"w-full h-full object-cover\"\n                          />\n                        </div>\n                        <div className=\"text-xs\">{hitGlow?.particles}</div>\n                        <p className=\"text-xs font-bold text-yellow-300\">{canRevealHit ? 'TAP!' : 'HIT'}</p>\n                        <p className=\"text-xs text-yellow-200\">{card.tier?.toUpperCase()}</p>\n                      </div>\n                    ) : isCardRevealed ? (\n                      /* Regular Card - Revealed */\n                      <div>\n                        {card.imageUrl ? (\n                          <img\n                            src={card.imageUrl}\n                            alt={card.name}\n                            className=\"w-12 h-16 mx-auto rounded object-cover mb-2\"\n                          />\n                        ) : (\n                          <div className=\"w-12 h-16 mx-auto bg-gradient-to-br from-gray-400 to-gray-600 rounded flex items-center justify-center mb-2\">\n                            <span className=\"text-xs text-white font-bold\">\n                              {card.name?.charAt(0) || '?'}\n                            </span>\n                          </div>\n                        )}\n                        <p className=\"text-xs font-medium truncate\">{card.name}</p>\n                      </div>\n                    ) : (\n                      /* Regular Card - Hidden */\n                      <div>\n                        <div className=\"w-12 h-16 mx-auto bg-gray-200 rounded flex items-center justify-center mb-2\">\n                          <span className=\"text-xs text-gray-400\">?</span>\n                        </div>\n                        <p className=\"text-xs text-gray-400\">???</p>\n                      </div>\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        ) : showHitCard ? (\n          /* Hit Card Display */\n          <div className=\"relative mb-6\">\n            <Card \n              className={`gaming-card mx-auto w-full max-w-sm transition-all duration-500 cursor-pointer hover:scale-105 ${\n                isHitRevealed \n                  ? `${getHitCardGlow(hitCard?.tier || '').glow} scale-105` \n                  : 'scale-100'\n              }`}\n              onClick={handleRevealHit}\n            >\n              <CardContent className=\"p-6 text-center space-y-4\">\n                {!isHitRevealed ? (\n                  // Hit Card Back with tier-based glow using the HIT CARD image\n                  <div className=\"space-y-4\">\n                    <div className={`w-32 h-44 mx-auto rounded-xl overflow-hidden border-4 ${getHitCardGlow(hitCard?.tier || '').borderGlow} ${getHitCardGlow(hitCard?.tier || '').glow} ${getHitCardGlow(hitCard?.tier || '').animate} relative`}>\n                      <img \n                        src={hitCardImage} \n                        alt=\"Hit Card\" \n                        className=\"w-full h-full object-cover\"\n                      />\n                      {/* Floating particles overlay */}\n                      <div className=\"absolute inset-0 flex items-center justify-center\">\n                        <div className=\"text-3xl animate-bounce opacity-90\">\n                          {getHitCardGlow(hitCard?.tier || '').particles}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <h3 className=\"text-xl font-bold\">Your Hit Card!</h3>\n                      <div className={`text-sm px-3 py-1 rounded-full bg-black bg-opacity-30 inline-block border-2 ${getHitCardGlow(hitCard?.tier || '').borderGlow}`}>\n                        {hitCard?.tier?.toUpperCase() || 'UNKNOWN'} TIER\n                      </div>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">Tap to reveal your special card</p>\n                  </div>\n                ) : (\n                  // Hit Card Front\n                  <div className=\"space-y-4\">\n                    {hitCard?.imageUrl ? (\n                      <img\n                        src={hitCard.imageUrl}\n                        alt={hitCard.name}\n                        className=\"w-32 h-44 mx-auto rounded-xl object-cover\"\n                      />\n                    ) : (\n                      <div className=\"w-32 h-44 mx-auto bg-gradient-to-br from-gray-400 to-gray-600 rounded-xl flex items-center justify-center\">\n                        <span className=\"text-3xl text-white font-bold\">\n                          {hitCard?.name?.charAt(0) || '?'}\n                        </span>\n                      </div>\n                    )}\n                    \n                    <div>\n                      <h3 className=\"text-xl font-bold mb-2\">{hitCard?.name}</h3>\n                      <Badge variant=\"outline\" className={getTierColor(hitCard?.tier || '')}>\n                        {getTierIcon(hitCard?.tier || '')}\n                        <span className=\"ml-1 capitalize\">{hitCard?.tier}</span>\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"text-lg font-semibold text-green-400\">\n                      Credit Value: {parseFloat(hitCard?.marketValue || '0').toFixed(2)} credits\n                    </div>\n                    \n                    <div className=\"text-center space-y-2\">\n                      <Badge className=\"bg-gradient-to-r from-yellow-500 to-orange-500 text-white animate-bounce\">\n                        ⭐ ADDED TO VAULT ⭐\n                      </Badge>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        ) : null}\n\n        {/* Action Button */}\n        <div className=\"text-center\">\n          <Button\n            onClick={handleRevealHit}\n            className={`gaming-gradient w-full max-w-xs ${\n              isHitRevealed ? 'animate-pulse' : ''\n            }`}\n            data-testid=\"button-reveal-card\"\n          >\n            {showCommons \n              ? revealedCards >= packCards.length ? \"Click Hit Card!\" : \"Revealing Cards...\"\n              : !isHitRevealed \n              ? \"Tap to Reveal\" \n              : \"Complete Opening\"\n            }\n          </Button>\n          \n          <p className=\"text-sm text-gray-400 mt-2\">\n            {showCommons \n              ? revealedCards >= packCards.length \n                ? \"All cards revealed! Click the glowing hit card to reveal it!\" \n                : \"Watch as your cards pop up one by one...\"\n              : !isHitRevealed \n              ? \"Your hit card is waiting...\" \n              : \"This card has been added to your vault!\"\n            }\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":15255},"client/src/components/RecentPullsCarousel.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ChevronLeft, ChevronRight, Sparkles, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { useState, useEffect } from \"react\";\nimport { GlobalFeedWithDetails } from \"@shared/schema\";\n\ninterface RecentPullsCarouselProps {\n  limit?: number;\n}\n\nexport function RecentPullsCarousel({ limit = 10 }: RecentPullsCarouselProps) {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [showAllModal, setShowAllModal] = useState(false);\n\n  // Always show A+ tier only in the carousel\n  const { data: feedData, isLoading } = useQuery<GlobalFeedWithDetails[]>({\n    queryKey: [`/api/feed?limit=${limit}&minTier=A`],\n    refetchInterval: 15000, // Refresh every 15 seconds\n  });\n\n  // Separate query for all recent pulls in the modal\n  const { data: allFeedData, isLoading: isLoadingAll } = useQuery<GlobalFeedWithDetails[]>({\n    queryKey: [`/api/feed?limit=100`], // Get more data for the modal\n    enabled: showAllModal, // Only fetch when modal is open\n    refetchInterval: 15000,\n  });\n\n  const tierColors = {\n    D: \"text-gray-600 bg-gray-100 dark:text-gray-400 dark:bg-gray-800\",\n    C: \"text-green-600 bg-green-100 dark:text-green-400 dark:bg-green-800\",\n    B: \"text-blue-600 bg-blue-100 dark:text-blue-400 dark:bg-blue-800\",\n    A: \"text-purple-600 bg-purple-100 dark:text-purple-400 dark:bg-purple-800\",\n    S: \"text-yellow-600 bg-yellow-100 dark:text-yellow-400 dark:bg-yellow-800\",\n    SS: \"text-pink-600 bg-pink-100 dark:text-pink-400 dark:bg-pink-800\",\n    SSS: \"text-red-600 bg-red-100 dark:text-red-400 dark:bg-red-800\"\n  };\n\n  const tierNames = {\n    D: \"D Tier\",\n    C: \"C Tier\", \n    B: \"B Tier\",\n    A: \"A Tier\",\n    S: \"S Tier\",\n    SS: \"SS Tier\",\n    SSS: \"SSS Tier\"\n  };\n\n  const getTimeAgo = (date: string | Date) => {\n    const now = new Date();\n    const pullTime = new Date(date);\n    const diffMs = now.getTime() - pullTime.getTime();\n    const diffMins = Math.floor(diffMs / 60000);\n    const diffHours = Math.floor(diffMs / 3600000);\n\n    if (diffHours > 0) return `${diffHours}h ago`;\n    if (diffMins > 0) return `${diffMins}m ago`;\n    return \"Just now\";\n  };\n\n  // Auto-advance carousel\n  useEffect(() => {\n    if (!feedData || feedData.length <= 1) return;\n\n    const interval = setInterval(() => {\n      setCurrentIndex((prev) => (prev + 1) % Math.min(feedData.length, 8));\n    }, 4000); // Change every 4 seconds\n\n    return () => clearInterval(interval);\n  }, [feedData]);\n\n  const nextSlide = () => {\n    if (!feedData) return;\n    setCurrentIndex((prev) => (prev + 1) % Math.min(feedData.length, 8));\n  };\n\n  const prevSlide = () => {\n    if (!feedData) return;\n    setCurrentIndex((prev) => (prev - 1 + Math.min(feedData.length, 8)) % Math.min(feedData.length, 8));\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"w-full h-32 bg-gradient-to-r from-primary/10 to-accent/10 rounded-xl flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n        <span className=\"ml-3 text-muted-foreground\">Loading recent pulls...</span>\n      </div>\n    );\n  }\n\n  if (!feedData || feedData.length === 0) {\n    return (\n      <div className=\"w-full h-32 bg-gradient-to-r from-primary/10 to-accent/10 rounded-xl flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Sparkles className=\"w-8 h-8 text-muted-foreground mx-auto mb-2\" />\n          <p className=\"text-muted-foreground\">No recent pulls yet - be the first!</p>\n        </div>\n      </div>\n    );\n  }\n\n  const displayPulls = feedData.slice(0, 8); // Show max 8 recent pulls\n  const currentPull = displayPulls[currentIndex];\n\n  return (\n    <div className=\"relative w-full\">\n      <Card className=\"gaming-card overflow-hidden border-2 border-primary/20 bg-gradient-to-r from-primary/5 to-accent/5\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-6 h-6 bg-gradient-to-r from-orange-500 to-red-500 rounded-full flex items-center justify-center\">\n                <Sparkles className=\"w-4 h-4 text-white\" />\n              </div>\n              <h3 className=\"font-gaming font-bold text-xl\">Recent Pulls </h3>\n              <Badge variant=\"outline\" className=\"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200\">\n                Live\n              </Badge>\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setShowAllModal(true)}\n                data-testid=\"button-see-all-pulls\"\n              >\n                See All\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={prevSlide}\n                className=\"w-8 h-8 p-0\"\n                data-testid=\"button-carousel-prev\"\n              >\n                <ChevronLeft className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={nextSlide}\n                className=\"w-8 h-8 p-0\"\n                data-testid=\"button-carousel-next\"\n              >\n                <ChevronRight className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n\n          <div className=\"relative h-24 overflow-hidden\">\n            <div \n              className=\"flex transition-transform duration-500 ease-in-out h-full\"\n              style={{ transform: `translateX(-${currentIndex * 100}%)` }}\n            >\n              {displayPulls.map((pull, index) => (\n                <div key={pull.id} className=\"min-w-full flex items-center space-x-4\">\n                  {/* Card Image/Placeholder */}\n                  <div className=\"w-16 h-20 bg-gradient-to-br from-gray-200 to-gray-300 dark:from-gray-700 dark:to-gray-800 rounded-lg flex items-center justify-center flex-shrink-0 border-2 border-primary/20\">\n                    {pull.card.imageUrl ? (\n                      <img \n                        src={pull.card.imageUrl} \n                        alt={pull.card.name}\n                        className=\"w-full h-full object-cover rounded-lg\"\n                        loading=\"lazy\"\n                      />\n                    ) : (\n                      <div className=\"w-8 h-8 bg-primary/20 rounded-full flex items-center justify-center\">\n                        <Sparkles className=\"w-4 h-4 text-primary\" />\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Pull Details */}\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center space-x-2 mb-1\">\n                      <span className=\"font-gaming font-bold text-lg truncate\" data-testid={`text-puller-${index}`}>\n                        {pull.user?.username || 'Unknown'}\n                      </span>\n                      <span className=\"text-muted-foreground text-sm\">pulled</span>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-2\">\n                      <Badge \n                        variant=\"secondary\" \n                        className={`${tierColors[pull.tier as keyof typeof tierColors] || tierColors.C} font-bold`}\n                        data-testid={`badge-tier-${index}`}\n                      >\n                        {tierNames[pull.tier as keyof typeof tierNames] || pull.tier}\n                      </Badge>\n                      <span className=\"font-semibold truncate\" data-testid={`text-card-name-${index}`}>\n                        {pull.card.name}\n                      </span>\n                    </div>\n\n                    <div className=\"flex items-center space-x-2 mt-1\">\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {pull.gameType.toUpperCase()}\n                      </Badge>\n                      <span className=\"text-xs text-muted-foreground\">\n                        {getTimeAgo(pull.createdAt || new Date())}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Pagination Dots */}\n          <div className=\"flex justify-center space-x-1 mt-4\">\n            {displayPulls.map((_, index) => (\n              <button\n                key={index}\n                onClick={() => setCurrentIndex(index)}\n                className={`w-2 h-2 rounded-full transition-colors ${\n                  index === currentIndex \n                    ? 'bg-primary' \n                    : 'bg-muted-foreground/30 hover:bg-muted-foreground/50'\n                }`}\n                data-testid={`button-dot-${index}`}\n              />\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n      {/* Modal for All Recent Pulls */}\n      <Dialog open={showAllModal} onOpenChange={setShowAllModal}>\n        <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-hidden\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center space-x-2\">\n              <Sparkles className=\"w-5 h-5 text-primary\" />\n              <span>All Recent Pulls</span>\n            </DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"overflow-y-auto max-h-[60vh] pr-2\">\n            {isLoadingAll ? (\n              <div className=\"text-center py-8\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n                <p className=\"text-muted-foreground\">Loading all recent pulls...</p>\n              </div>\n            ) : !allFeedData || allFeedData.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <Sparkles className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-muted-foreground\">No recent pulls found</p>\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {allFeedData.map((pull) => (\n                  <div\n                    key={pull.id}\n                    className=\"flex items-center space-x-3 p-3 rounded-lg bg-secondary/30 hover:bg-secondary/50 transition-colors\"\n                  >\n                    {/* Card Image */}\n                    <div className=\"w-12 h-16 bg-gradient-to-br from-gray-200 to-gray-300 dark:from-gray-700 dark:to-gray-800 rounded-lg flex items-center justify-center flex-shrink-0 border-2 border-primary/20\">\n                      {pull.card.imageUrl ? (\n                        <img \n                          src={pull.card.imageUrl} \n                          alt={pull.card.name}\n                          className=\"w-full h-full object-cover rounded-lg\"\n                          loading=\"lazy\"\n                        />\n                      ) : (\n                        <div className=\"w-6 h-6 bg-primary/20 rounded-full flex items-center justify-center\">\n                          <Sparkles className=\"w-3 h-3 text-primary\" />\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Pull Details */}\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center space-x-2 mb-1\">\n                        <span className=\"font-semibold truncate\">\n                          {pull.user?.username || 'Unknown'}\n                        </span>\n                        <span className=\"text-muted-foreground text-sm\">pulled</span>\n                        <Badge \n                          variant=\"secondary\" \n                          className={`${tierColors[pull.tier as keyof typeof tierColors] || tierColors.C} font-bold text-xs`}\n                        >\n                          {tierNames[pull.tier as keyof typeof tierNames] || pull.tier}\n                        </Badge>\n                      </div>\n                      <div className=\"font-medium truncate text-sm\">\n                        {pull.card.name}\n                      </div>\n                      <div className=\"flex items-center space-x-2 text-xs text-muted-foreground\">\n                        <span>from {pull.gameType.toUpperCase()}</span>\n                        <span>•</span>\n                        <span>{getTimeAgo(pull.createdAt || new Date())}</span>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":12928},"client/src/components/VirtualPackStore.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Package, CreditCard } from \"lucide-react\";\nimport { VirtualPackOpening } from \"@/components/VirtualPackOpening\";\nimport type { VirtualPack, User } from \"@shared/schema\";\n\ninterface VirtualPackStoreProps {\n  virtualPacks: VirtualPack[];\n}\n\nexport function VirtualPackStore({ virtualPacks }: VirtualPackStoreProps) {\n  const { user } = useAuth() as { user: User | null; isLoading: boolean; isAuthenticated: boolean };\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [openingPack, setOpeningPack] = useState<VirtualPack | null>(null);\n\n  const handlePurchase = (pack: VirtualPack) => {\n    if (!user) {\n      toast({\n        title: \"Login Required\",\n        description: \"Please log in to purchase packs\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const userCredits = parseFloat(user.credits || '0');\n    const packPrice = parseFloat(pack.price);\n    if (userCredits < packPrice) {\n      toast({\n        title: \"Insufficient Credits\",\n        description: `You need ${packPrice} credits but only have ${userCredits.toFixed(2)}`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Show the opening interface instead of immediate purchase\n    setOpeningPack(pack);\n  };\n\n  const activePacks = virtualPacks.filter(pack => pack.isActive);\n\n  // Show opening interface if a pack is selected\n  if (openingPack) {\n    return (\n      <VirtualPackOpening \n        packId={openingPack.id}\n        packName={openingPack.name}\n        onClose={() => setOpeningPack(null)}\n      />\n    );\n  }\n\n  if (activePacks.length === 0) {\n    return (\n      <div className=\"text-center py-12\">\n        <Package className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold mb-2\">No Themed Packs Available</h3>\n        <p className=\"text-muted-foreground\">\n          Check back later for exclusive themed pack collections!\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4 sm:space-y-6\">\n      <div className=\"text-center mb-4 sm:mb-6\">\n        <p className=\"text-muted-foreground text-sm sm:text-base\">Rip virtual packs and stand a chance to win top-tier cards</p>\n      </div>\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-4 lg:gap-6\">\n        {activePacks.map((pack) => (\n          <Card key={pack.id} className=\"gaming-card\">\n            <CardHeader className=\"text-center p-3 sm:p-6\">\n              {pack.imageUrl && (\n                <div className=\"w-full h-24 sm:h-32 mb-3 sm:mb-4 rounded-lg overflow-hidden\">\n                  <img \n                    src={pack.imageUrl} \n                    alt={pack.name}\n                    className=\"w-full h-full object-cover\"\n                    data-testid={`img-virtual-pack-${pack.id}`}\n                  />\n                </div>\n              )}\n              <CardTitle className=\"font-gaming text-base sm:text-lg lg:text-xl\" data-testid={`text-virtual-pack-name-${pack.id}`}>\n                {pack.name}\n              </CardTitle>\n              {pack.description && (\n                <p className=\"text-xs sm:text-sm text-muted-foreground mt-2\">\n                  {pack.description}\n                </p>\n              )}\n            </CardHeader>\n            <CardContent className=\"space-y-3 sm:space-y-4 p-3 sm:p-6 pt-0\">\n              <div className=\"flex justify-center space-x-2\">\n                <Badge variant=\"secondary\" data-testid={`badge-pack-price-${pack.id}`}>\n                  {pack.price} Credits\n                </Badge>\n                <Badge className=\"bg-accent text-primary-foreground\" data-testid={`badge-pack-card-count-${pack.id}`}>\n                  8 Cards\n                </Badge>\n              </div>\n\n              <Button\n                onClick={() => handlePurchase(pack)}\n                disabled={!user || parseFloat(user.credits || '0') < parseFloat(pack.price)}\n                size=\"sm\"\n                className=\"w-full bg-gradient-to-r from-primary to-accent sm:text-base text-sm sm:py-2 py-1.5\"\n                data-testid={`button-purchase-virtual-pack-${pack.id}`}\n              >\n                <CreditCard className=\"w-3 h-3 sm:w-4 sm:h-4 mr-1 sm:mr-2\" />\n                Open Pack\n              </Button>\n\n              {user && parseFloat(user.credits || '0') < parseFloat(pack.price) && (\n                <p className=\"text-xs text-destructive text-center\">\n                  Need {(parseFloat(pack.price) - parseFloat(user.credits || '0')).toFixed(2)} more credits\n                </p>\n              )}\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n      \n    </div>\n  );\n}","size_bytes":5087},"client/src/components/VirtualPackOpening.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Package, Sparkles, Star, Coins, Eye, ShoppingCart, ArrowLeft } from \"lucide-react\";\nimport type { Card as CardType } from \"@shared/schema\";\n\ninterface VirtualPackOpeningProps {\n  packId: string;\n  packName: string;\n  onClose: () => void;\n}\n\ninterface VirtualPackResult {\n  success: boolean;\n  cards: Array<{\n    id: string;\n    name: string;\n    tier: string;\n    imageUrl?: string;\n    marketValue: string;\n    packType: string;\n  }>;\n  packName: string;\n}\n\nconst tierColors = {\n  D: \"gray\",\n  C: \"green\", \n  B: \"blue\",\n  A: \"purple\",\n  S: \"yellow\",\n  SS: \"orange\",\n  SSS: \"red\"\n} as const;\n\nconst tierNames = {\n  D: \"D-Tier\",\n  C: \"C-Tier\", \n  B: \"B-Tier\",\n  A: \"A-Tier\",\n  S: \"S-Tier\",\n  SS: \"SS-Tier\",\n  SSS: \"SSS-Tier\"\n} as const;\n\nexport function VirtualPackOpening({ packId, packName, onClose }: VirtualPackOpeningProps) {\n  const [currentView, setCurrentView] = useState<\"cardPool\" | \"opening\">(\"cardPool\");\n  const [isOpening, setIsOpening] = useState(false);\n  const [result, setResult] = useState<VirtualPackResult | null>(null);\n  const [animationPhase, setAnimationPhase] = useState<\"closed\" | \"opening\" | \"opened\">(\"closed\");\n  const [revealedCards, setRevealedCards] = useState<number>(0);\n  const [hitCardRevealed, setHitCardRevealed] = useState(false);\n  const [packCards, setPackCards] = useState<any[]>([]);\n  const [loadingCards, setLoadingCards] = useState(true);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Get auth status first\n  const { user: currentUser, isAuthenticated } = useAuth() as { user: any; isAuthenticated: boolean; };\n\n  // Get user data for credits display\n  const { data: user } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n  });\n\n  // Get virtual pack details for price\n  const { data: virtualPacks } = useQuery({\n    queryKey: [\"/api/virtual-packs\"],\n  });\n\n  const currentPack = Array.isArray(virtualPacks) ? virtualPacks.find((pack: any) => pack.id === packId) : null;\n  const packPrice = parseFloat(currentPack?.price || '0');\n\n  // Get all cards for card pool display\n  const { data: allCards } = useQuery({\n    queryKey: [\"/api/cards\"],\n    enabled: isAuthenticated,\n  });\n\n  // Load pack card pool when component mounts\n  useEffect(() => {\n    const loadPackCards = async () => {\n      if (!packId || !allCards) return;\n      \n      try {\n        setLoadingCards(true);\n        const response = await apiRequest(\"GET\", `/api/virtual-packs/${packId}/cards`);\n        const packCardsData = await response.json();\n        \n        if (Array.isArray(packCardsData) && Array.isArray(allCards)) {\n          const cardDetails = packCardsData.map((pc: any) => {\n            // Match by cardId\n            const card = allCards.find((c: any) => c.id === pc.cardId);\n            return card ? { ...card, weight: pc.weight } : null;\n          }).filter(Boolean);\n          \n          setPackCards(cardDetails);\n        } else {\n          setPackCards([]);\n        }\n      } catch (error) {\n        console.error(\"Failed to load pack cards:\", error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to load card pool\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setLoadingCards(false);\n      }\n    };\n\n    if (allCards && packId) {\n      loadPackCards();\n    }\n  }, [packId, allCards, toast]);\n\n  // Function to refresh pack cards\n  const refreshPackCards = async () => {\n    if (!packId || !allCards) return;\n    \n    try {\n      setLoadingCards(true);\n      const response = await apiRequest(\"GET\", `/api/virtual-packs/${packId}/cards`);\n      const packCardsData = await response.json();\n      \n      if (Array.isArray(packCardsData) && Array.isArray(allCards)) {\n        const cardDetails = packCardsData.map((pc: any) => {\n          const card = allCards.find((c: any) => c.id === pc.cardId);\n          return card ? { ...card, weight: pc.weight } : null;\n        }).filter(Boolean);\n        \n        setPackCards(cardDetails);\n      } else {\n        setPackCards([]);\n      }\n    } catch (error) {\n      console.error(\"Failed to refresh pack cards:\", error);\n    } finally {\n      setLoadingCards(false);\n    }\n  };\n\n  // Removed auto-refresh functionality as requested\n\n  const getTierColor = (tier: string) => {\n    const colors = {\n      'D': 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-200',\n      'C': 'bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-200',\n      'B': 'bg-blue-100 text-blue-800 dark:bg-blue-800 dark:text-blue-200',\n      'A': 'bg-purple-100 text-purple-800 dark:bg-purple-800 dark:text-purple-200',\n      'S': 'bg-yellow-100 text-yellow-800 dark:bg-yellow-800 dark:text-yellow-200',\n      'SS': 'bg-orange-100 text-orange-800 dark:bg-orange-800 dark:text-orange-200',\n      'SSS': 'bg-red-100 text-red-800 dark:bg-red-800 dark:text-red-200'\n    };\n    return colors[tier as keyof typeof colors] || colors['D'];\n  };\n\n  const openPackMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", `/api/virtual-packs/${packId}/open`);\n      return await response.json() as VirtualPackResult;\n    },\n    onSuccess: (result) => {\n      setResult(result);\n      setAnimationPhase(\"opening\");\n      \n      // Reveal first 7 cards quickly, then pause for hit card (don't auto-reveal)\n      result.cards.forEach((_, index) => {\n        if (index < 7) {\n          // Reveal commons quickly\n          setTimeout(() => {\n            setRevealedCards(index + 1);\n          }, 500 + (index * 100));\n        }\n        // Hit card (index 7) will be revealed by user tap, not auto-revealed\n      });\n\n      // Wait for commons to be revealed, then show \"tap to reveal\" for hit card\n      setTimeout(() => {\n        // Don't auto-transition to \"opened\" - wait for user to reveal hit card\n        toast({\n          title: \"Commons Revealed!\",\n          description: `Tap the hit card to reveal your special card!`,\n          duration: 4000,\n        });\n      }, 500 + (7 * 100) + 500); // Wait for 7 commons + small delay\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Pack Opening Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n      setAnimationPhase(\"closed\");\n    },\n    onSettled: () => {\n      setIsOpening(false);\n    },\n  });\n\n  const handleOpenPack = () => {\n    setIsOpening(true);\n    setResult(null);\n    setRevealedCards(0);\n    openPackMutation.mutate();\n  };\n\n  const handleReset = () => {\n    setAnimationPhase(\"closed\");\n    setResult(null);\n    setRevealedCards(0);\n    setHitCardRevealed(false);\n    setIsOpening(false);\n  };\n\n  const handleOpenAnother = () => {\n    if (!user) {\n      toast({\n        title: \"Login Required\",\n        description: \"Please log in to purchase packs\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const userCredits = parseFloat((user as any).credits || '0');\n    if (userCredits < packPrice) {\n      toast({\n        title: \"Insufficient Credits\",\n        description: `You need ${packPrice.toFixed(2)} credits but only have ${userCredits.toFixed(2)}`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Reset and open another pack\n    handleReset();\n    setTimeout(() => {\n      handleOpenPack();\n    }, 100);\n  };\n\n  const handleRevealHitCard = () => {\n    setHitCardRevealed(true);\n    if (result) {\n      const hitCard = result.cards[result.cards.length - 1];\n      const tier = hitCard ? hitCard.tier : \"D\";\n      const tierName = tier ? tierNames[tier as keyof typeof tierNames] : \"Common\";\n      \n      toast({\n        title: \"Hit Card Revealed!\",\n        description: `You got a ${tierName}!`,\n        duration: 3000,\n      });\n\n      // Transition to opened state after hit card is revealed\n      setTimeout(() => {\n        setAnimationPhase(\"opened\");\n        \n        toast({\n          title: \"Pack Opened!\",\n          description: `${packName} opened! You got ${result.cards.length} cards including a ${tierName} hit card!`,\n          duration: 5000,\n        });\n\n        queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n        queryClient.invalidateQueries({ queryKey: [\"/api/vault\"] });\n      }, 1500);\n    }\n  };\n\n  if (animationPhase === \"opened\" && result) {\n    return (\n      <div className=\"space-y-6\">\n        {/* Persistent Credits Display */}\n        <Card className=\"gaming-card bg-gradient-to-r from-accent/10 to-primary/10 border-accent/20 max-w-xs mx-auto\">\n          <CardContent className=\"p-3\">\n            <div className=\"flex items-center justify-center gap-2\">\n              <Coins className=\"w-4 h-4 text-accent\" />\n              <div className=\"text-center\">\n                <div className=\"text-xs text-muted-foreground\">Available Credits</div>\n                <div className=\"text-lg font-bold text-accent\" data-testid=\"text-available-credits\">\n                  {parseFloat((user as any)?.credits || '0').toFixed(2)}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"text-center\">\n          <h3 className=\"font-gaming text-2xl mb-2\">Pack Opened!</h3>\n          <p className=\"text-muted-foreground\">Your new cards have been added to your vault</p>\n        </div>\n\n        <div className=\"grid grid-cols-4 gap-2 max-w-md mx-auto\">\n          {result.cards.map((card, index) => (\n            <div \n              key={`${card.id}-${index}`}\n              className={`relative overflow-hidden rounded-lg border-2 border-${tierColors[(card.tier) as keyof typeof tierColors]}/50 bg-gradient-to-b from-${tierColors[(card.tier) as keyof typeof tierColors]}/20 to-transparent aspect-[2.5/3.5]`}\n              data-testid={`card-result-${index}`}\n            >\n              <div className=\"p-2 text-center h-full flex flex-col justify-between\">\n                {/* Card Image */}\n                <div className=\"w-full h-full relative flex flex-col\">\n                  {card.imageUrl ? (\n                    <img\n                      src={card.imageUrl}\n                      alt={card.name}\n                      className=\"w-full flex-1 object-cover rounded-md\"\n                    />\n                  ) : (\n                    <div className={`w-full flex-1 rounded-md bg-gradient-to-br from-${tierColors[(card.tier) as keyof typeof tierColors]}-400 to-${tierColors[(card.tier) as keyof typeof tierColors]}-600 flex items-center justify-center`}>\n                      <span className=\"text-white font-bold text-lg\">\n                        {card.name?.charAt(0) || '?'}\n                      </span>\n                    </div>\n                  )}\n                  \n                  {/* Hit card star */}\n                  {(card.tier) !== \"D\" && (\n                    <div className=\"absolute top-1 right-1\">\n                      <Star className=\"w-3 h-3 text-yellow-400 fill-yellow-400\" />\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        <div className=\"flex justify-center space-x-4\">\n          <Button \n            onClick={handleOpenAnother} \n            variant=\"outline\" \n            data-testid=\"button-open-another\"\n            className=\"bg-gradient-to-r from-primary to-accent text-white\"\n          >\n            <Package className=\"w-4 h-4 mr-2\" />\n            Open Another ({packPrice.toFixed(2)} Credits)\n          </Button>\n          <Button onClick={onClose} data-testid=\"button-close-opening\">\n            Back to Store\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  if (animationPhase === \"opening\" && result) {\n    return (\n      <div className=\"space-y-6\">\n        {/* Persistent Credits Display */}\n        <Card className=\"gaming-card bg-gradient-to-r from-accent/10 to-primary/10 border-accent/20 max-w-xs mx-auto\">\n          <CardContent className=\"p-3\">\n            <div className=\"flex items-center justify-center gap-2\">\n              <Coins className=\"w-4 h-4 text-accent\" />\n              <div className=\"text-center\">\n                <div className=\"text-xs text-muted-foreground\">Available Credits</div>\n                <div className=\"text-lg font-bold text-accent\" data-testid=\"text-available-credits\">\n                  {parseFloat((user as any)?.credits || '0').toFixed(2)}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"text-center\">\n          <h3 className=\"font-gaming text-2xl mb-2\">Opening {packName}...</h3>\n          <div className=\"animate-pulse\">\n            <Package className=\"w-16 h-16 mx-auto text-primary\" />\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-4 gap-2 max-w-md mx-auto\">\n          {result.cards.map((card, index) => {\n            const isHitCard = index === result.cards.length - 1;\n            const isRevealed = isHitCard ? hitCardRevealed : index < revealedCards;\n            const canReveal = isHitCard && revealedCards >= 7 && !hitCardRevealed;\n            \n            return (\n            <div \n              key={`${card.id}-${index}`}\n              className={`relative transition-all duration-500 aspect-[2.5/3.5] ${\n                isRevealed\n                  ? `opacity-100 transform scale-100 border-2 border-${tierColors[(card.tier) as keyof typeof tierColors]}/50 bg-gradient-to-b from-${tierColors[(card.tier) as keyof typeof tierColors]}/20 to-transparent ${\n                      isHitCard ? 'animate-pulse shadow-lg ring-2 ring-yellow-400' : ''\n                    }` \n                  : canReveal\n                  ? \"opacity-100 transform scale-100 border-2 border-yellow-400 bg-gradient-to-b from-yellow-400/20 to-transparent cursor-pointer hover:scale-105 animate-pulse\"\n                  : \"opacity-30 transform scale-95 border-2 border-gray-300 bg-gray-100\"\n              } overflow-hidden rounded-lg`}\n              data-testid={`card-reveal-${index}`}\n              onClick={canReveal ? handleRevealHitCard : undefined}\n            >\n              <div className=\"p-2 text-center h-full flex flex-col justify-between\">\n                {isRevealed ? (\n                  <>\n                    {/* Card Image */}\n                    <div className=\"w-full h-full relative flex flex-col\">\n                      {card.imageUrl ? (\n                        <img\n                          src={card.imageUrl}\n                          alt={card.name}\n                          className=\"w-full flex-1 object-cover rounded-md\"\n                        />\n                      ) : (\n                        <div className={`w-full flex-1 rounded-md bg-gradient-to-br from-${tierColors[(card.tier) as keyof typeof tierColors]}-400 to-${tierColors[(card.tier) as keyof typeof tierColors]}-600 flex items-center justify-center`}>\n                          <span className=\"text-white font-bold text-lg\">\n                            {card.name?.charAt(0) || '?'}\n                          </span>\n                        </div>\n                      )}\n                      \n                      \n                      {/* Hit card star */}\n                      {isHitCard && (\n                        <div className=\"absolute top-1 right-1 animate-bounce\">\n                          <Star className=\"w-3 h-3 text-yellow-400 fill-yellow-400\" />\n                        </div>\n                      )}\n                      \n                    </div>\n                  </>\n                ) : (\n                  <div className=\"h-full flex items-center justify-center\">\n                    <div className=\"text-center\">\n                      <Package className=\"w-4 h-4 text-gray-400 mx-auto mb-1\" />\n                      <div className=\"text-xs text-gray-400\">\n                        {canReveal ? \"TAP!\" : isHitCard ? \"HIT!\" : \"???\"}\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n            );\n          })}\n        </div>\n\n        <div className=\"text-center\">\n          <div className=\"animate-pulse text-sm text-muted-foreground\">\n            Revealing cards... {revealedCards}/{result.cards.length}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Show card pool view first\n  if (currentView === \"cardPool\") {\n    return (\n      <div className=\"min-h-screen bg-background p-4\">\n        <div className=\"max-w-4xl mx-auto space-y-6\">\n          {/* Header with Back Button */}\n          <div className=\"flex items-center justify-between\">\n            <Button\n              variant=\"outline\"\n              onClick={onClose}\n              className=\"flex items-center space-x-2\"\n              data-testid=\"button-back-to-games\"\n            >\n              <ArrowLeft className=\"w-4 h-4\" />\n              <span>Back to Games</span>\n            </Button>\n            \n            {/* Credits Display */}\n            <Card className=\"gaming-card bg-gradient-to-r from-accent/10 to-primary/10 border-accent/20\">\n              <CardContent className=\"p-3\">\n                <div className=\"flex items-center gap-2\">\n                  <Coins className=\"w-4 h-4 text-accent\" />\n                  <div className=\"text-center\">\n                    <div className=\"text-xs text-muted-foreground\">Credits</div>\n                    <div className=\"text-lg font-bold text-accent\" data-testid=\"text-available-credits\">\n                      {parseFloat((user as any)?.credits || '0').toFixed(2)}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Pack Info */}\n          <Card className=\"gaming-card\">\n            <CardHeader className=\"text-center\">\n              <CardTitle className=\"font-gaming text-2xl\">\n                <span className=\"bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n                  {packName} Card Pool\n                </span>\n              </CardTitle>\n              <div className=\"flex items-center justify-center space-x-2 mt-2\">\n                <Eye className=\"w-4 h-4 text-primary\" />\n                <span className=\"text-sm text-muted-foreground\">\n                  View all possible cards before opening\n                </span>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"text-center space-y-2\">\n                <div className=\"bg-gradient-to-r from-primary/20 to-accent/20 rounded-lg p-4 border border-primary/30\">\n                  <div className=\"text-2xl font-bold text-primary\">\n                    {packPrice} Credits\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">\n                    8 Cards per pack\n                  </div>\n                </div>\n                <div className=\"flex justify-center space-x-2\">\n                  <Badge className=\"bg-accent text-primary-foreground\">7 Commons + 1 Chance Card</Badge>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Card Pool Display */}\n          <Card className=\"gaming-card\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Sparkles className=\"w-5 h-5 text-primary\" />\n                <span>Available Cards</span>\n              </CardTitle>\n              {!loadingCards && (\n                <p className=\"text-sm text-muted-foreground\">\n                  {packCards.length} cards available in this pack\n                </p>\n              )}\n            </CardHeader>\n            <CardContent>\n              {loadingCards ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n                  <p className=\"text-sm text-muted-foreground mt-2\">Loading card pool...</p>\n                </div>\n              ) : (\n                <div className=\"max-h-96 overflow-y-auto space-y-4\">\n                  {(() => {\n                    // Group cards by tier\n                    const cardsByTier = packCards.reduce((acc, card: any) => {\n                      const tier = card.tier || 'D';\n                      if (!acc[tier]) acc[tier] = [];\n                      acc[tier].push(card);\n                      return acc;\n                    }, {} as Record<string, any[]>);\n\n                    const tierOrder = ['SSS', 'SS', 'S', 'A', 'B', 'C', 'D'];\n                    const tierColors = {\n                      D: \"gray\",\n                      C: \"green\", \n                      B: \"blue\",\n                      A: \"purple\",\n                      S: \"yellow\",\n                      SS: \"orange\",\n                      SSS: \"red\"\n                    };\n\n                    return tierOrder.map(tier => {\n                      const tierCards = cardsByTier[tier];\n                      if (!tierCards || tierCards.length === 0) return null;\n                      \n                      return (\n                        <div key={tier} className=\"space-y-2\">\n                          <div className=\"flex items-center space-x-2\">\n                            <div className={`w-6 h-6 rounded-full bg-${tierColors[tier as keyof typeof tierColors]}/20 flex items-center justify-center`}>\n                              <span className={`text-sm font-bold tier-${tierColors[tier as keyof typeof tierColors]}`}>\n                                {tier}\n                              </span>\n                            </div>\n                            <h4 className=\"text-sm font-semibold\">\n                              {tier} Tier ({tierCards.length} card{tierCards.length !== 1 ? 's' : ''})\n                            </h4>\n                          </div>\n                          \n                          <div className=\"grid grid-cols-4 md:grid-cols-6 lg:grid-cols-8 gap-2 pl-8\">\n                            {tierCards.map((card: any, index: number) => (\n                              <div key={`${tier}-${index}`} className=\"relative group\">\n                                <div className=\"aspect-[3/4] rounded-md overflow-hidden bg-muted/30 border border-muted hover:border-primary/50 transition-colors w-16 h-20\">\n                                  {card.imageUrl ? (\n                                    <img \n                                      src={card.imageUrl} \n                                      alt={card.name}\n                                      className=\"w-full h-full object-cover\"\n                                    />\n                                  ) : (\n                                    <div className=\"w-full h-full bg-gradient-to-br from-muted to-muted/60 flex items-center justify-center\">\n                                      <Package className=\"w-3 h-3 text-muted-foreground\" />\n                                    </div>\n                                  )}\n                                </div>\n                                \n                                {/* Card Info Overlay */}\n                                <div className=\"absolute bottom-0 left-0 right-0 bg-black/90 text-white p-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n                                  <div className=\"text-[9px] font-medium truncate\">{card.name}</div>\n                                  <div className=\"text-[8px] text-gray-300\">{card.marketValue}c</div>\n                                </div>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      );\n                    });\n                  })()}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-center\">\n            <Button\n              variant=\"outline\"\n              onClick={onClose}\n              className=\"flex items-center space-x-2\"\n              data-testid=\"button-cancel-purchase\"\n            >\n              <ArrowLeft className=\"w-4 h-4\" />\n              <span>Cancel</span>\n            </Button>\n          </div>\n        </div>\n\n        {/* Floating Open Pack Button */}\n        <div className=\"fixed bottom-6 left-1/2 transform -translate-x-1/2 z-50\">\n          <Button\n            onClick={handleOpenPack}\n            disabled={!user || parseFloat((user as any)?.credits || '0') < packPrice || packCards.length === 0}\n            size=\"lg\"\n            className=\"bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 flex items-center space-x-2 shadow-lg border-2 border-accent/30\"\n            data-testid=\"button-proceed-to-open\"\n          >\n            <ShoppingCart className=\"w-4 h-4\" />\n            <span>\n              {packCards.length === 0 \n                ? \"No cards in pool\" \n                : \"Open Pack Now\"\n              }\n            </span>\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  // Original pack opening view\n  return (\n    <div className=\"space-y-6\">\n      {/* Persistent Credits Display */}\n      <Card className=\"gaming-card bg-gradient-to-r from-accent/10 to-primary/10 border-accent/20 max-w-xs mx-auto\">\n        <CardContent className=\"p-3\">\n          <div className=\"flex items-center justify-center gap-2\">\n            <Coins className=\"w-4 h-4 text-accent\" />\n            <div className=\"text-center\">\n              <div className=\"text-xs text-muted-foreground\">Available Credits</div>\n              <div className=\"text-lg font-bold text-accent\" data-testid=\"text-available-credits\">\n                {parseFloat((user as any)?.credits || '0').toFixed(2)}\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"text-center\">\n        <h3 className=\"font-gaming text-2xl mb-4\">\n          Open {packName || 'Pack'}\n        </h3>\n        \n        <div className=\"inline-block\">\n          <div className=\"relative\">\n            <Package className=\"w-32 h-32 text-primary mx-auto\" />\n            <div className=\"absolute inset-0 bg-gradient-to-r from-primary/20 via-accent/20 to-legendary/20 rounded-full animate-pulse\"></div>\n          </div>\n        </div>\n        <p className=\"text-muted-foreground mt-4\">\n          Click to open your themed pack and reveal your cards!\n        </p>\n      </div>\n\n      <div className=\"text-center space-y-2\">\n        <div className=\"flex justify-center space-x-2 mb-4\">\n          <Badge className=\"bg-accent text-primary-foreground\">7 Random Commons</Badge>\n          <Badge className=\"bg-legendary text-primary-foreground\">1 Special Card</Badge>\n        </div>\n        \n        <Button\n          onClick={handleOpenPack}\n          disabled={isOpening || packCards.length === 0}\n          size=\"lg\"\n          className=\"bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90\"\n          data-testid=\"button-open-virtual-pack\"\n        >\n          {packCards.length === 0 ? (\n            \"No cards in pool\"\n          ) : isOpening ? (\n            <>\n              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary-foreground mr-2\"></div>\n              Opening Pack...\n            </>\n          ) : (\n            <>\n              <Sparkles className=\"w-5 h-5 mr-2\" />\n              Open Pack\n            </>\n          )}\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":27921},"client/src/pages/admin-simple.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Navigation } from \"@/components/Navigation\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Package, Plus, Settings } from \"lucide-react\";\n\n// Original pokeball odds from the wheel game\nconst DEFAULT_PACK_ODDS = [\n  { tier: \"D\", probability: 70.0 },\n  { tier: \"C\", probability: 20.0 },\n  { tier: \"B\", probability: 7.0 },\n  { tier: \"A\", probability: 2.0 },\n  { tier: \"S\", probability: 0.8 },\n  { tier: \"SS\", probability: 0.15 },\n  { tier: \"SSS\", probability: 0.05 },\n];\n\nconst cardSchema = z.object({\n  name: z.string().min(1, \"Card name is required\"),\n  tier: z.enum([\"D\", \"C\", \"B\", \"A\", \"S\", \"SS\", \"SSS\"]),\n  imageUrl: z.string().url(\"Valid image URL required\").optional(),\n  marketValue: z.string().min(1, \"Market value is required\"),\n  packType: z.string().optional(),\n});\n\nconst virtualPackSchema = z.object({\n  name: z.string().min(1, \"Pack name is required\"),\n  description: z.string().optional(),\n  imageUrl: z.string().url(\"Valid image URL required\").optional(),\n  price: z.string().min(1, \"Price is required\"),\n  cardCount: z.number().min(1, \"Card count must be at least 1\").max(20, \"Card count cannot exceed 20\"),\n});\n\ntype CardFormData = z.infer<typeof cardSchema>;\ntype VirtualPackFormData = z.infer<typeof virtualPackSchema>;\n\nexport default function AdminSimple() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const queryClient = useQueryClient();\n  const [selectedPackType, setSelectedPackType] = useState<string>(\"\");\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Forms\n  const cardForm = useForm<CardFormData>({\n    resolver: zodResolver(cardSchema),\n    defaultValues: {\n      name: \"\",\n      tier: \"D\",\n      imageUrl: \"\",\n      marketValue: \"1.00\",\n      packType: \"\",\n    },\n  });\n\n  const virtualPackForm = useForm<VirtualPackFormData>({\n    resolver: zodResolver(virtualPackSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      imageUrl: \"\",\n      price: \"8.00\",\n      cardCount: 8,\n    },\n  });\n\n  // Queries\n  const { data: virtualPacks } = useQuery({\n    queryKey: [\"/api/admin/virtual-packs\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: virtualLibraryCards } = useQuery({\n    queryKey: [\"/api/admin/virtual-library\"],\n    enabled: isAuthenticated,\n  });\n\n  // Mutations\n  const createVirtualLibraryCardMutation = useMutation({\n    mutationFn: async (data: CardFormData) => {\n      await apiRequest(\"POST\", \"/api/admin/virtual-library\", {\n        cardId: `card_${Date.now()}`,\n        name: data.name,\n        tier: data.tier,\n        imageUrl: data.imageUrl || null,\n        marketValue: data.marketValue,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/virtual-library\"] });\n      cardForm.reset();\n      toast({\n        title: \"Card Created\",\n        description: \"New card has been added to the virtual library\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error Creating Card\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createVirtualPackMutation = useMutation({\n    mutationFn: async (data: VirtualPackFormData) => {\n      // Create the pack\n      const packResponse = await apiRequest(\"POST\", \"/api/admin/virtual-packs\", data);\n      const newPack = packResponse as any;\n\n      // Set default pull rates using original pokeball odds\n      await apiRequest(\"POST\", `/api/admin/virtual-packs/${newPack.id}/pull-rates`, {\n        rates: DEFAULT_PACK_ODDS.map(odd => ({\n          cardTier: odd.tier,\n          probability: odd.probability,\n        }))\n      });\n\n      // Add selected cards to pack if any pack type is selected\n      if (selectedPackType) {\n        const cardsToAdd = (virtualLibraryCards as any)?.filter((card: any) => \n          card.tier === selectedPackType || \n          (selectedPackType === \"all\" && true)\n        );\n        \n        if (cardsToAdd && cardsToAdd.length > 0) {\n          await apiRequest(\"POST\", `/api/admin/virtual-packs/${newPack.id}/cards`, {\n            cardIds: cardsToAdd.map((card: any) => card.id),\n            weights: cardsToAdd.map(() => 1),\n          });\n        }\n      }\n\n      return newPack;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/virtual-packs\"] });\n      virtualPackForm.reset();\n      setSelectedPackType(\"\");\n      toast({\n        title: \"Pack Created\",\n        description: \"New themed pack has been created with default odds\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error Creating Pack\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onCardSubmit = (data: CardFormData) => {\n    createVirtualLibraryCardMutation.mutate(data);\n  };\n\n  const onPackSubmit = (data: VirtualPackFormData) => {\n    createVirtualPackMutation.mutate(data);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      <main className=\"pt-20 pb-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Header */}\n          <section className=\"py-8 text-center\">\n            <h1 className=\"font-gaming font-bold text-4xl md:text-5xl mb-4\">\n              <span className=\"bg-gradient-to-r from-primary via-accent to-legendary bg-clip-text text-transparent\">ADMIN PANEL</span>\n            </h1>\n            <p className=\"text-muted-foreground text-lg max-w-3xl mx-auto\">\n              Simplified admin interface for managing cards and themed packs\n            </p>\n          </section>\n\n          <div className=\"grid md:grid-cols-2 gap-8 max-w-6xl mx-auto\">\n            {/* Add New Card */}\n            <Card className=\"gaming-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Plus className=\"w-5 h-5\" />\n                  Add New Card\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={cardForm.handleSubmit(onCardSubmit)} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"card-name\">Card Name</Label>\n                    <Input\n                      id=\"card-name\"\n                      {...cardForm.register(\"name\")}\n                      placeholder=\"Enter card name\"\n                      data-testid=\"input-card-name\"\n                    />\n                    {cardForm.formState.errors.name && (\n                      <p className=\"text-sm text-destructive mt-1\">{cardForm.formState.errors.name.message}</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"card-tier\">Tier</Label>\n                    <Select onValueChange={(value) => cardForm.setValue(\"tier\", value as any)}>\n                      <SelectTrigger data-testid=\"select-card-tier\">\n                        <SelectValue placeholder=\"Select tier\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"D\">D Tier (Common)</SelectItem>\n                        <SelectItem value=\"C\">C Tier (Uncommon)</SelectItem>\n                        <SelectItem value=\"B\">B Tier (Rare)</SelectItem>\n                        <SelectItem value=\"A\">A Tier (Epic)</SelectItem>\n                        <SelectItem value=\"S\">S Tier (Legendary)</SelectItem>\n                        <SelectItem value=\"SS\">SS Tier (Mythic)</SelectItem>\n                        <SelectItem value=\"SSS\">SSS Tier (Ultimate)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    {cardForm.formState.errors.tier && (\n                      <p className=\"text-sm text-destructive mt-1\">{cardForm.formState.errors.tier.message}</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"card-image\">Image URL (Optional)</Label>\n                    <Input\n                      id=\"card-image\"\n                      {...cardForm.register(\"imageUrl\")}\n                      placeholder=\"https://example.com/image.jpg\"\n                      data-testid=\"input-card-image\"\n                    />\n                    {cardForm.formState.errors.imageUrl && (\n                      <p className=\"text-sm text-destructive mt-1\">{cardForm.formState.errors.imageUrl.message}</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"card-value\">Market Value</Label>\n                    <Input\n                      id=\"card-value\"\n                      {...cardForm.register(\"marketValue\")}\n                      placeholder=\"1.00\"\n                      data-testid=\"input-card-value\"\n                    />\n                    {cardForm.formState.errors.marketValue && (\n                      <p className=\"text-sm text-destructive mt-1\">{cardForm.formState.errors.marketValue.message}</p>\n                    )}\n                  </div>\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full\"\n                    disabled={createVirtualLibraryCardMutation.isPending}\n                    data-testid=\"button-create-card\"\n                  >\n                    {createVirtualLibraryCardMutation.isPending ? \"Creating...\" : \"Add Card\"}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n\n            {/* Create Themed Pack */}\n            <Card className=\"gaming-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Package className=\"w-5 h-5\" />\n                  Create Themed Pack\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={virtualPackForm.handleSubmit(onPackSubmit)} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"pack-name\">Pack Name</Label>\n                    <Input\n                      id=\"pack-name\"\n                      {...virtualPackForm.register(\"name\")}\n                      placeholder=\"e.g., Black Bolt Collection\"\n                      data-testid=\"input-pack-name\"\n                    />\n                    {virtualPackForm.formState.errors.name && (\n                      <p className=\"text-sm text-destructive mt-1\">{virtualPackForm.formState.errors.name.message}</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"pack-description\">Description (Optional)</Label>\n                    <Input\n                      id=\"pack-description\"\n                      {...virtualPackForm.register(\"description\")}\n                      placeholder=\"Pack description\"\n                      data-testid=\"input-pack-description\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"pack-price\">Price</Label>\n                    <Input\n                      id=\"pack-price\"\n                      {...virtualPackForm.register(\"price\")}\n                      placeholder=\"8.00\"\n                      data-testid=\"input-pack-price\"\n                    />\n                    {virtualPackForm.formState.errors.price && (\n                      <p className=\"text-sm text-destructive mt-1\">{virtualPackForm.formState.errors.price.message}</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"card-pool\">Card Pool</Label>\n                    <Select onValueChange={setSelectedPackType}>\n                      <SelectTrigger data-testid=\"select-card-pool\">\n                        <SelectValue placeholder=\"Select which cards to include\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Cards</SelectItem>\n                        <SelectItem value=\"D\">D Tier Cards Only</SelectItem>\n                        <SelectItem value=\"C\">C Tier Cards Only</SelectItem>\n                        <SelectItem value=\"B\">B Tier Cards Only</SelectItem>\n                        <SelectItem value=\"A\">A Tier Cards Only</SelectItem>\n                        <SelectItem value=\"S\">S Tier Cards Only</SelectItem>\n                        <SelectItem value=\"SS\">SS Tier Cards Only</SelectItem>\n                        <SelectItem value=\"SSS\">SSS Tier Cards Only</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"text-sm text-muted-foreground bg-muted p-3 rounded\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <Settings className=\"w-4 h-4\" />\n                      <span className=\"font-semibold\">Default Pokeball Odds Applied:</span>\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-1 text-xs\">\n                      <span>D: 70%</span><span>C: 20%</span>\n                      <span>B: 7%</span><span>A: 2%</span>\n                      <span>S: 0.8%</span><span>SS: 0.15%</span>\n                      <span className=\"col-span-2\">SSS: 0.05%</span>\n                    </div>\n                  </div>\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full\"\n                    disabled={createVirtualPackMutation.isPending}\n                    data-testid=\"button-create-pack\"\n                  >\n                    {createVirtualPackMutation.isPending ? \"Creating...\" : \"Create Pack\"}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Existing Packs */}\n          <section className=\"mt-12\">\n            <Card className=\"gaming-card\">\n              <CardHeader>\n                <CardTitle>Existing Themed Packs</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid md:grid-cols-3 gap-4\">\n                  {(virtualPacks as any)?.map((pack: any) => (\n                    <div key={pack.id} className=\"border rounded-lg p-4 space-y-2\">\n                      <h3 className=\"font-semibold\">{pack.name}</h3>\n                      <p className=\"text-sm text-muted-foreground\">{pack.description}</p>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm\">Price: {pack.price} credits</span>\n                        <span className=\"text-sm\">Cards: {pack.cardCount}</span>\n                      </div>\n                    </div>\n                  )) || (\n                    <p className=\"text-muted-foreground\">No themed packs created yet.</p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </section>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":16139},"client/src/pages/mystery-packs.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Navigation } from \"@/components/Navigation\";\nimport { PackOpening } from \"@/components/PackOpening\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function MysteryPacks() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  const { data: packs } = useQuery({\n    queryKey: [\"/api/packs\"],\n    enabled: isAuthenticated,\n  });\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      <main className=\"pt-20 pb-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Header */}\n          <section className=\"py-8 text-center\">\n            <Button \n              variant=\"ghost\" \n              className=\"mb-4\"\n              onClick={() => window.location.href = \"/play\"}\n              data-testid=\"button-back-to-play\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Play\n            </Button>\n            <h1 className=\"font-gaming font-bold text-4xl md:text-5xl mb-4\">\n              <span className=\"bg-gradient-to-r from-primary via-accent to-legendary bg-clip-text text-transparent\">MYSTERY PACKS</span>\n            </h1>\n            <p className=\"text-muted-foreground text-lg max-w-3xl mx-auto\">\n              Open mystery packs filled with random cards from our entire collection!\n            </p>\n          </section>\n\n          {/* Game */}\n          <Card className=\"gaming-card max-w-4xl mx-auto\">\n            <CardHeader className=\"text-center\">\n              <CardTitle className=\"font-gaming text-2xl\">Mystery Pack Opening</CardTitle>\n              <div className=\"flex justify-center space-x-4 mt-4\">\n                <Badge variant=\"secondary\">Cost: 4.99 Credits</Badge>\n                <Badge className=\"bg-accent text-primary-foreground\">10 Cards Total</Badge>\n                <Badge className=\"bg-primary text-primary-foreground\">Random Tiers</Badge>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <PackOpening packs={(packs as any) || []} />\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":3170},"client/src/pages/plinko.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Navigation } from \"@/components/Navigation\";\nimport { PlinkoGame } from \"@/components/PlinkoGame\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft } from \"lucide-react\";\n\nexport default function Plinko() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      <main className=\"pt-20 pb-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Header */}\n          <section className=\"py-8 text-center\">\n            <Button \n              variant=\"ghost\" \n              className=\"mb-4\"\n              onClick={() => window.location.href = \"/play\"}\n              data-testid=\"button-back-to-play\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Play\n            </Button>\n            <h1 className=\"font-gaming font-bold text-4xl md:text-5xl mb-4\">\n              <span className=\"bg-gradient-to-r from-primary via-accent to-legendary bg-clip-text text-transparent\">PLINKO DROP</span>\n            </h1>\n            <p className=\"text-muted-foreground text-lg max-w-3xl mx-auto\">\n              Drop balls and watch them bounce through the pegs to win amazing cards!\n            </p>\n          </section>\n\n          {/* Game */}\n          <Card className=\"gaming-card max-w-4xl mx-auto\">\n            <CardHeader className=\"text-center\">\n              <CardTitle className=\"font-gaming text-2xl\">Plinko Drop</CardTitle>\n              <div className=\"flex justify-center space-x-4 mt-4\">\n                <Badge className=\"bg-legendary text-primary-foreground\">Max: SSS Tier</Badge>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <PlinkoGame />\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":2753},"client/src/pages/themed-packs.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Navigation } from \"@/components/Navigation\";\nimport { VirtualPackStore } from \"@/components/VirtualPackStore\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function ThemedPacks() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  const { data: virtualPacks } = useQuery({\n    queryKey: [\"/api/virtual-packs\"],\n    enabled: isAuthenticated,\n  });\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      <main className=\"pt-20 pb-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Header */}\n          <section className=\"py-8 text-center\">\n            <Button \n              variant=\"ghost\" \n              className=\"mb-4\"\n              onClick={() => window.location.href = \"/play\"}\n              data-testid=\"button-back-to-play\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Play\n            </Button>\n            <h1 className=\"font-gaming font-bold text-4xl md:text-5xl mb-4\">\n              <span className=\"bg-gradient-to-r from-primary via-accent to-legendary bg-clip-text text-transparent\">THEMED PACKS</span>\n            </h1>\n            <p className=\"text-muted-foreground text-lg max-w-3xl mx-auto\">\n              Experience a new way of Rip and Ship.\n            </p>\n          </section>\n\n          {/* Game */}\n          <Card className=\"gaming-card max-w-6xl mx-auto\">\n            <CardHeader className=\"text-center\">\n              <CardTitle className=\"font-gaming text-2xl\">Themed Pack Store</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <VirtualPackStore virtualPacks={(virtualPacks as any) || []} />\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":2834},"client/src/pages/wheel.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Navigation } from \"@/components/Navigation\";\nimport { WheelGame } from \"@/components/WheelGame\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft } from \"lucide-react\";\n\nexport default function Wheel() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      <main className=\"pt-20 pb-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Header */}\n          <section className=\"py-8 text-center\">\n            <Button \n              variant=\"ghost\" \n              className=\"mb-4\"\n              onClick={() => window.location.href = \"/play\"}\n              data-testid=\"button-back-to-play\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Play\n            </Button>\n            <h1 className=\"font-gaming font-bold text-4xl md:text-5xl mb-4\">\n              <span className=\"bg-gradient-to-r from-primary via-accent to-legendary bg-clip-text text-transparent\">WHEEL SPIN</span>\n            </h1>\n            <p className=\"text-muted-foreground text-lg max-w-3xl mx-auto\">\n              Spin the wheel of fortune and watch as it lands on amazing rewards!\n            </p>\n          </section>\n\n          {/* Game */}\n          <Card className=\"gaming-card max-w-4xl mx-auto\">\n            <CardHeader className=\"text-center\">\n              <CardTitle className=\"font-gaming text-2xl\">Wheel Spin</CardTitle>\n              <div className=\"flex justify-center space-x-4 mt-4\">\n                <Badge className=\"bg-superrare text-primary-foreground\">Bonus: 2x Multiplier</Badge>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <WheelGame />\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":2750},"client/src/pages/login.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\n// Login schema\nconst loginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\ntype LoginData = z.infer<typeof loginSchema>;\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  \n  const form = useForm<LoginData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginData) => {\n      return await apiRequest(\"POST\", \"/api/auth/login\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Welcome back!\",\n        description: \"You've been logged in successfully.\",\n      });\n      setLocation(\"/\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message || \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: LoginData) => {\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 p-4\">\n      <Card className=\"w-full max-w-md bg-gray-900/80 border-blue-500/30 shadow-2xl\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-3xl font-gaming text-blue-400\">Welcome Back</CardTitle>\n          <CardDescription className=\"text-gray-300\">\n            Sign in to continue your card collection\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\" className=\"text-gray-200\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                data-testid=\"input-email\"\n                {...form.register(\"email\")}\n                className=\"bg-gray-800 border-gray-600 text-white placeholder-gray-400 focus:border-blue-500\"\n                placeholder=\"your@email.com\"\n              />\n              {form.formState.errors.email && (\n                <p className=\"text-red-400 text-sm\">{form.formState.errors.email.message}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\" className=\"text-gray-200\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                data-testid=\"input-password\"\n                {...form.register(\"password\")}\n                className=\"bg-gray-800 border-gray-600 text-white placeholder-gray-400 focus:border-blue-500\"\n                placeholder=\"Enter your password\"\n              />\n              {form.formState.errors.password && (\n                <p className=\"text-red-400 text-sm\">{form.formState.errors.password.message}</p>\n              )}\n            </div>\n\n            <Button\n              type=\"submit\"\n              data-testid=\"button-login\"\n              disabled={loginMutation.isPending}\n              className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-4 rounded-lg transition-colors\"\n            >\n              {loginMutation.isPending ? \"Signing In...\" : \"Sign In\"}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-gray-300\">\n              Don't have an account?{\" \"}\n              <Link \n                href=\"/register\" \n                className=\"text-blue-400 hover:text-blue-300 underline\"\n                data-testid=\"link-register\"\n              >\n                Create one here\n              </Link>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":4411},"client/src/pages/register.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\n// Registration schema\nconst registrationSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\").max(20, \"Username must be at most 20 characters\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  phoneNumber: z.string().optional(),\n});\n\ntype RegistrationData = z.infer<typeof registrationSchema>;\n\nexport default function Register() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  \n  const form = useForm<RegistrationData>({\n    resolver: zodResolver(registrationSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      phoneNumber: \"\",\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: RegistrationData) => {\n      return await apiRequest(\"POST\", \"/api/auth/register\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Welcome to Drops!\",\n        description: \"Your account has been created successfully. You've been given 50 credits to get started!\",\n      });\n      setLocation(\"/\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Registration Failed\",\n        description: error.message || \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: RegistrationData) => {\n    registerMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 p-4\">\n      <Card className=\"w-full max-w-md bg-gray-900/80 border-blue-500/30 shadow-2xl\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-3xl font-gaming text-blue-400\">Join the Arcade</CardTitle>\n          <CardDescription className=\"text-gray-300\">\n            Create your account to start collecting cards\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\" className=\"text-gray-200\">Username</Label>\n              <Input\n                id=\"username\"\n                data-testid=\"input-username\"\n                {...form.register(\"username\")}\n                className=\"bg-gray-800 border-gray-600 text-white placeholder-gray-400 focus:border-blue-500\"\n                placeholder=\"Choose a username\"\n              />\n              {form.formState.errors.username && (\n                <p className=\"text-red-400 text-sm\">{form.formState.errors.username.message}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\" className=\"text-gray-200\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                data-testid=\"input-email\"\n                {...form.register(\"email\")}\n                className=\"bg-gray-800 border-gray-600 text-white placeholder-gray-400 focus:border-blue-500\"\n                placeholder=\"your@email.com\"\n              />\n              {form.formState.errors.email && (\n                <p className=\"text-red-400 text-sm\">{form.formState.errors.email.message}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\" className=\"text-gray-200\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                data-testid=\"input-password\"\n                {...form.register(\"password\")}\n                className=\"bg-gray-800 border-gray-600 text-white placeholder-gray-400 focus:border-blue-500\"\n                placeholder=\"Create a secure password\"\n              />\n              {form.formState.errors.password && (\n                <p className=\"text-red-400 text-sm\">{form.formState.errors.password.message}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"phoneNumber\" className=\"text-gray-200\">Phone Number (Optional)</Label>\n              <Input\n                id=\"phoneNumber\"\n                type=\"tel\"\n                data-testid=\"input-phone\"\n                {...form.register(\"phoneNumber\")}\n                className=\"bg-gray-800 border-gray-600 text-white placeholder-gray-400 focus:border-blue-500\"\n                placeholder=\"+60 12-345 6789\"\n              />\n              {form.formState.errors.phoneNumber && (\n                <p className=\"text-red-400 text-sm\">{form.formState.errors.phoneNumber.message}</p>\n              )}\n            </div>\n\n            <Button\n              type=\"submit\"\n              data-testid=\"button-register\"\n              disabled={registerMutation.isPending}\n              className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-4 rounded-lg transition-colors\"\n            >\n              {registerMutation.isPending ? \"Creating Account...\" : \"Create Account\"}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-gray-300\">\n              Already have an account?{\" \"}\n              <Link \n                href=\"/login\" \n                className=\"text-blue-400 hover:text-blue-300 underline\"\n                data-testid=\"link-login\"\n              >\n                Sign in here\n              </Link>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":6131},"server/auth.ts":{"content":"import bcrypt from 'bcrypt';\nimport session from 'express-session';\nimport type { Express, RequestHandler } from 'express';\nimport connectPg from 'connect-pg-simple';\nimport { storage } from './storage';\nimport { registrationSchema, loginSchema } from '@shared/schema';\n\nconst SALT_ROUNDS = 12;\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: true,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: false, // Always false for local development\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nexport function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  \n  // Development mode: Create admin user if it doesn't exist\n  if (process.env.NODE_ENV === 'development') {\n    try {\n      setTimeout(async () => {\n        try {\n          let adminUser = await storage.getUserByEmail('admin@drops.app');\n          if (!adminUser) {\n            const hashedPassword = await bcrypt.hash('admin123', 12);\n            adminUser = await storage.createUser({\n              username: 'admin',\n              email: 'admin@drops.app',\n              password: hashedPassword,\n              role: 'admin',\n              credits: \"1000\",\n            });\n            console.log('✅ Created admin user for development (admin@drops.app / admin123)');\n          }\n        } catch (error) {\n          console.log('Note: Admin user creation will happen after database connection');\n        }\n      }, 2000);\n    } catch (error) {\n      // Silent fail - will try again later\n    }\n  }\n  \n  // Registration endpoint\n  app.post('/api/auth/register', async (req, res) => {\n    try {\n      const result = registrationSchema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ \n          message: \"Validation failed\", \n          errors: result.error.flatten().fieldErrors \n        });\n      }\n\n      const { username, email, password, phoneNumber } = result.data;\n\n      // Check if user already exists\n      const existingUserByEmail = await storage.getUserByEmail(email);\n      if (existingUserByEmail) {\n        return res.status(400).json({ message: \"Email already registered\" });\n      }\n\n      const existingUserByUsername = await storage.getUserByUsername(username);\n      if (existingUserByUsername) {\n        return res.status(400).json({ message: \"Username already taken\" });\n      }\n\n      // Hash password\n      const hashedPassword = await bcrypt.hash(password, SALT_ROUNDS);\n\n      // Create user\n      const user = await storage.createUser({\n        username,\n        email,\n        password: hashedPassword,\n        phoneNumber,\n      });\n\n      // Log them in by setting session\n      (req.session as any).userId = user.id;\n\n      res.json({ \n        message: \"Registration successful\", \n        user: { \n          id: user.id, \n          username: user.username, \n          email: user.email \n        } \n      });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ message: \"Registration failed\" });\n    }\n  });\n\n  // Login endpoint\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const result = loginSchema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ \n          message: \"Validation failed\", \n          errors: result.error.flatten().fieldErrors \n        });\n      }\n\n      const { email, password } = result.data;\n\n      // Find user by email\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(400).json({ message: \"Invalid email or password\" });\n      }\n\n      // Check if user has a password (for migration compatibility)\n      if (!user.password) {\n        return res.status(400).json({ message: \"Account needs to be updated. Please contact support.\" });\n      }\n\n      // Verify password\n      const isValidPassword = await bcrypt.compare(password, user.password);\n      if (!isValidPassword) {\n        return res.status(400).json({ message: \"Invalid email or password\" });\n      }\n\n      // Check if user is banned or suspended\n      if (user.isBanned) {\n        return res.status(403).json({ message: \"Account is banned\" });\n      }\n      if (user.isSuspended) {\n        return res.status(403).json({ message: \"Account is suspended\" });\n      }\n\n      // Log them in by setting session\n      (req.session as any).userId = user.id;\n\n      res.json({ \n        message: \"Login successful\", \n        user: { \n          id: user.id, \n          username: user.username, \n          email: user.email \n        } \n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  // Logout endpoint\n  app.post('/api/auth/logout', (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Logout failed\" });\n      }\n      res.json({ message: \"Logout successful\" });\n    });\n  });\n}\n\n// Authentication middleware\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const userId = (req.session as any)?.userId;\n  \n  if (!userId) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  // Attach user to request\n  const user = await storage.getUser(userId);\n  if (!user) {\n    return res.status(401).json({ message: \"User not found\" });\n  }\n\n  (req as any).user = user;\n  next();\n};\n\n// Admin middleware\nexport const isAdmin: RequestHandler = async (req, res, next) => {\n  const userId = (req.session as any)?.userId;\n  \n  if (!userId) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  // Attach user to request and check admin role\n  const user = await storage.getUser(userId);\n  if (!user) {\n    return res.status(401).json({ message: \"User not found\" });\n  }\n\n  if (user.role !== 'admin') {\n    return res.status(403).json({ message: \"Admin access required\" });\n  }\n\n  (req as any).user = user;\n  next();\n};","size_bytes":6293},"generate-functions-pdf.js":{"content":"import puppeteer from 'puppeteer';\n\nconst functionDocumentation = {\n  \"API Endpoints\": {\n    \"Authentication\": [\n      {\n        \"endpoint\": \"GET /api/auth/user\",\n        \"description\": \"Get current authenticated user information\",\n        \"authentication\": \"Required\",\n        \"returns\": \"User object with id, email, credits, etc.\"\n      }\n    ],\n    \"Game Functions\": [\n      {\n        \"endpoint\": \"GET /api/games/:gameType/settings\",\n        \"description\": \"Get game-specific settings (pricing, configuration)\",\n        \"parameters\": \"gameType: plinko, wheel, pack\",\n        \"returns\": \"Game settings with price and configuration\"\n      },\n      {\n        \"endpoint\": \"POST /api/games/play\",\n        \"description\": \"Play a game (Plinko, Wheel, Pack opening)\",\n        \"authentication\": \"Required\",\n        \"parameters\": \"gameType, betAmount, plinkoResult/wheelResult\",\n        \"returns\": \"Game result with card/pack outcome\"\n      }\n    ],\n    \"Card & Vault Management\": [\n      {\n        \"endpoint\": \"GET /api/vault\",\n        \"description\": \"Get user's card collection\",\n        \"authentication\": \"Required\",\n        \"returns\": \"Array of user's collected cards with details\"\n      },\n      {\n        \"endpoint\": \"POST /api/vault/refund\",\n        \"description\": \"Refund selected cards for credits\",\n        \"authentication\": \"Required\",\n        \"parameters\": \"cardIds: array of card IDs to refund\",\n        \"returns\": \"Success confirmation\"\n      }\n    ],\n    \"Virtual Pack System\": [\n      {\n        \"endpoint\": \"GET /api/virtual-packs\",\n        \"description\": \"Get all active virtual packs (Black Bolt, etc.)\",\n        \"authentication\": \"Not required\",\n        \"returns\": \"Array of available virtual packs\"\n      },\n      {\n        \"endpoint\": \"POST /api/virtual-packs/:id/open\",\n        \"description\": \"Open a virtual pack and receive 8 cards\",\n        \"authentication\": \"Required\",\n        \"parameters\": \"id: virtual pack ID\",\n        \"returns\": \"8 cards with tiers and details\"\n      },\n      {\n        \"endpoint\": \"GET /api/virtual-packs/:id/cards\",\n        \"description\": \"Get cards assigned to a specific virtual pack\",\n        \"authentication\": \"Admin only\",\n        \"returns\": \"Array of cards in the pack's card pool\"\n      }\n    ],\n    \"Credits & Transactions\": [\n      {\n        \"endpoint\": \"POST /api/credits/purchase\",\n        \"description\": \"Purchase credits (with bundle bonuses)\",\n        \"authentication\": \"Required\",\n        \"parameters\": \"amount, bundleType (bundle_50, bundle_100)\",\n        \"returns\": \"Credits added confirmation\"\n      },\n      {\n        \"endpoint\": \"GET /api/transactions\",\n        \"description\": \"Get user's transaction history\",\n        \"authentication\": \"Required\",\n        \"returns\": \"Array of user's transactions\"\n      }\n    ],\n    \"Global Feed\": [\n      {\n        \"endpoint\": \"GET /api/feed\",\n        \"description\": \"Get global activity feed of recent card pulls\",\n        \"parameters\": \"limit (optional), minTier (optional)\",\n        \"returns\": \"Array of recent card pulls from all users\"\n      }\n    ],\n    \"Pack Management\": [\n      {\n        \"endpoint\": \"GET /api/packs\",\n        \"description\": \"Get user's owned physical packs\",\n        \"authentication\": \"Required\",\n        \"returns\": \"Array of user's unopened packs\"\n      },\n      {\n        \"endpoint\": \"POST /api/packs/open/:packId\",\n        \"description\": \"Open a physical pack\",\n        \"authentication\": \"Required\",\n        \"parameters\": \"packId: pack to open\",\n        \"returns\": \"Cards received from pack\"\n      }\n    ],\n    \"Notifications\": [\n      {\n        \"endpoint\": \"GET /api/notifications\",\n        \"description\": \"Get user notifications\",\n        \"authentication\": \"Required\",\n        \"returns\": \"Array of user notifications\"\n      },\n      {\n        \"endpoint\": \"PATCH /api/notifications/:id/read\",\n        \"description\": \"Mark notification as read\",\n        \"authentication\": \"Required\",\n        \"parameters\": \"id: notification ID\",\n        \"returns\": \"Success confirmation\"\n      }\n    ],\n    \"Shipping\": [\n      {\n        \"endpoint\": \"POST /api/shipping/request\",\n        \"description\": \"Request physical card shipping\",\n        \"authentication\": \"Required\",\n        \"parameters\": \"Shipping address and card selection\",\n        \"returns\": \"Shipping request confirmation\"\n      }\n    ]\n  },\n  \"Admin Functions\": {\n    \"System Management\": [\n      {\n        \"endpoint\": \"GET /api/admin/stats\",\n        \"description\": \"Get system statistics\",\n        \"authentication\": \"Admin only\",\n        \"returns\": \"User count, card stats, transaction totals\"\n      },\n      {\n        \"endpoint\": \"GET /api/admin/users\",\n        \"description\": \"Get all users for management\",\n        \"authentication\": \"Admin only\", \n        \"returns\": \"Array of all user accounts\"\n      }\n    ],\n    \"Card Administration\": [\n      {\n        \"endpoint\": \"GET /api/admin/cards\",\n        \"description\": \"Get all cards in the system\",\n        \"authentication\": \"Admin only\",\n        \"returns\": \"Array of all cards\"\n      },\n      {\n        \"endpoint\": \"POST /api/admin/cards\",\n        \"description\": \"Create a new card\",\n        \"authentication\": \"Admin only\",\n        \"parameters\": \"Card data (name, tier, imageUrl, etc.)\",\n        \"returns\": \"Created card object\"\n      },\n      {\n        \"endpoint\": \"PATCH /api/admin/cards/:id\",\n        \"description\": \"Update existing card\",\n        \"authentication\": \"Admin only\",\n        \"parameters\": \"Card ID and updated fields\",\n        \"returns\": \"Updated card object\"\n      },\n      {\n        \"endpoint\": \"PATCH /api/admin/cards/:id/stock\",\n        \"description\": \"Update card stock quantity\",\n        \"authentication\": \"Admin only\",\n        \"parameters\": \"Card ID and new stock amount\",\n        \"returns\": \"Success confirmation\"\n      },\n      {\n        \"endpoint\": \"DELETE /api/admin/cards/:id\",\n        \"description\": \"Delete a card\",\n        \"authentication\": \"Admin only\",\n        \"parameters\": \"Card ID to delete\",\n        \"returns\": \"Success confirmation\"\n      }\n    ],\n    \"Pull Rate Management\": [\n      {\n        \"endpoint\": \"GET /api/admin/pull-rates\",\n        \"description\": \"Get all pull rates for all pack types\",\n        \"authentication\": \"Admin only\",\n        \"returns\": \"Array of pack pull rate configurations\"\n      },\n      {\n        \"endpoint\": \"GET /api/admin/pull-rates/:packType\",\n        \"description\": \"Get pull rates for specific pack type\",\n        \"authentication\": \"Admin only\",\n        \"parameters\": \"packType: pack type to get rates for\",\n        \"returns\": \"Pull rates for the specified pack\"\n      },\n      {\n        \"endpoint\": \"POST /api/admin/pull-rates/:packType\",\n        \"description\": \"Set pull rates for a pack type\",\n        \"authentication\": \"Admin only\",\n        \"parameters\": \"packType and rates array (must sum to 100%)\",\n        \"returns\": \"Success confirmation\"\n      }\n    ],\n    \"Virtual Library Management\": [\n      {\n        \"endpoint\": \"GET /api/admin/virtual-library\",\n        \"description\": \"Get all virtual library cards\",\n        \"authentication\": \"Admin only\",\n        \"returns\": \"Array of virtual library cards\"\n      },\n      {\n        \"endpoint\": \"POST /api/admin/virtual-library\",\n        \"description\": \"Create virtual library card\",\n        \"authentication\": \"Admin only\",\n        \"parameters\": \"Card data for virtual library\",\n        \"returns\": \"Created virtual library card\"\n      },\n      {\n        \"endpoint\": \"PATCH /api/admin/virtual-library/:id\",\n        \"description\": \"Update virtual library card\",\n        \"authentication\": \"Admin only\",\n        \"parameters\": \"Card ID and updated fields\",\n        \"returns\": \"Updated virtual library card\"\n      },\n      {\n        \"endpoint\": \"DELETE /api/admin/virtual-library/:id\",\n        \"description\": \"Delete virtual library card\",\n        \"authentication\": \"Admin only\",\n        \"parameters\": \"Card ID to delete\",\n        \"returns\": \"Success confirmation\"\n      }\n    ],\n    \"Virtual Pack Administration\": [\n      {\n        \"endpoint\": \"GET /api/admin/virtual-packs\",\n        \"description\": \"Get all virtual packs for management\",\n        \"authentication\": \"Admin only\",\n        \"returns\": \"Array of virtual packs with configuration\"\n      },\n      {\n        \"endpoint\": \"POST /api/admin/virtual-packs\",\n        \"description\": \"Create new virtual pack\",\n        \"authentication\": \"Admin only\",\n        \"parameters\": \"Pack data (name, price, description, etc.)\",\n        \"returns\": \"Created virtual pack\"\n      },\n      {\n        \"endpoint\": \"PATCH /api/admin/virtual-packs/:id\",\n        \"description\": \"Update virtual pack configuration\",\n        \"authentication\": \"Admin only\",\n        \"parameters\": \"Pack ID and updated fields\",\n        \"returns\": \"Updated virtual pack\"\n      },\n      {\n        \"endpoint\": \"DELETE /api/admin/virtual-packs/:id\",\n        \"description\": \"Deactivate virtual pack\",\n        \"authentication\": \"Admin only\",\n        \"parameters\": \"Pack ID to deactivate\",\n        \"returns\": \"Success confirmation\"\n      }\n    ],\n    \"Content Management\": [\n      {\n        \"endpoint\": \"GET /api/admin/virtual-packs/:id/cards\",\n        \"description\": \"Get cards assigned to virtual pack\",\n        \"authentication\": \"Admin only\",\n        \"parameters\": \"Virtual pack ID\",\n        \"returns\": \"Cards assigned to the pack\"\n      },\n      {\n        \"endpoint\": \"POST /api/admin/virtual-packs/:id/cards\",\n        \"description\": \"Assign cards to virtual pack\",\n        \"authentication\": \"Admin only\",\n        \"parameters\": \"Pack ID, card IDs, and weights\",\n        \"returns\": \"Success confirmation\"\n      },\n      {\n        \"endpoint\": \"GET /api/admin/virtual-packs/:id/pull-rates\",\n        \"description\": \"Get pull rates for virtual pack\",\n        \"authentication\": \"Admin only\",\n        \"parameters\": \"Virtual pack ID\",\n        \"returns\": \"Tier-based pull rate configuration\"\n      },\n      {\n        \"endpoint\": \"POST /api/admin/virtual-packs/:id/pull-rates\",\n        \"description\": \"Set pull rates for virtual pack\",\n        \"authentication\": \"Admin only\",\n        \"parameters\": \"Pack ID and tier probabilities (must sum to 100%)\",\n        \"returns\": \"Success confirmation\"\n      }\n    ]\n  },\n  \"Frontend Components\": {\n    \"Game Components\": [\n      {\n        \"component\": \"PlinkoGame\",\n        \"description\": \"Interactive Plinko physics game with ball simulation\",\n        \"features\": \"Ball physics, pin collisions, bucket outcomes, pokeball rewards\"\n      },\n      {\n        \"component\": \"WheelGame\", \n        \"description\": \"Wheel of Fortune style spinning game\",\n        \"features\": \"Spinning animation, weighted outcomes, pack rewards\"\n      },\n      {\n        \"component\": \"VirtualPackOpening\",\n        \"description\": \"Virtual pack opening with card reveal animations\",\n        \"features\": \"Sequential card reveals, tier-based outcomes, hit card mechanic\"\n      },\n      {\n        \"component\": \"PackOpening\",\n        \"description\": \"Physical pack opening interface\",\n        \"features\": \"Card animations, rarity reveals, collection updates\"\n      }\n    ],\n    \"UI Components\": [\n      {\n        \"component\": \"Navigation\",\n        \"description\": \"Main app navigation with authentication-aware routing\",\n        \"features\": \"Responsive menu, login/logout, admin access\"\n      },\n      {\n        \"component\": \"GlobalFeed\",\n        \"description\": \"Real-time feed of card pulls from all users\",\n        \"features\": \"Live updates, tier filtering, user highlights\"\n      },\n      {\n        \"component\": \"CreditPurchase\",\n        \"description\": \"Credit purchasing interface with bundle options\",\n        \"features\": \"Bundle bonuses, payment processing, instant credit addition\"\n      },\n      {\n        \"component\": \"CardDisplay\",\n        \"description\": \"Individual card display with tier styling\",\n        \"features\": \"Tier-based colors, rarity effects, market values\"\n      }\n    ],\n    \"Management Interfaces\": [\n      {\n        \"component\": \"VirtualPackStore\",\n        \"description\": \"Store interface for purchasing virtual packs\",\n        \"features\": \"Pack previews, credit validation, purchase flow\"\n      },\n      {\n        \"component\": \"RecentPullsCarousel\",\n        \"description\": \"Carousel showing recent card pulls\",\n        \"features\": \"Auto-scrolling, card highlights, tier displays\"\n      }\n    ]\n  },\n  \"Game Mechanics\": {\n    \"Tier System\": [\n      {\n        \"tier\": \"D\",\n        \"description\": \"Common cards - most frequent drops\",\n        \"probability\": \"~65% in most packs\"\n      },\n      {\n        \"tier\": \"C\", \n        \"description\": \"Uncommon cards - moderate rarity\",\n        \"probability\": \"~15% in most packs\"\n      },\n      {\n        \"tier\": \"B\",\n        \"description\": \"Rare cards - less common drops\",\n        \"probability\": \"~8% in most packs\"\n      },\n      {\n        \"tier\": \"A\",\n        \"description\": \"Super rare cards - valuable drops\",\n        \"probability\": \"~2% in most packs\"\n      },\n      {\n        \"tier\": \"S\",\n        \"description\": \"Legendary cards - very rare\",\n        \"probability\": \"~1.5% in most packs\"\n      },\n      {\n        \"tier\": \"SS\",\n        \"description\": \"Ultra legendary cards - extremely rare\",\n        \"probability\": \"~0.14% in most packs\"\n      },\n      {\n        \"tier\": \"SSS\",\n        \"description\": \"Mythic cards - rarest tier\",\n        \"probability\": \"~0.01% in most packs\"\n      }\n    ],\n    \"Pack Types\": [\n      {\n        \"type\": \"Pokeball Pack\",\n        \"cost\": \"From Plinko/Wheel games\",\n        \"description\": \"Basic pack with standard card distribution\"\n      },\n      {\n        \"type\": \"Greatball Pack\",\n        \"cost\": \"From Plinko/Wheel games\", \n        \"description\": \"Improved pack with better rare card chances\"\n      },\n      {\n        \"type\": \"Ultraball Pack\",\n        \"cost\": \"From Plinko/Wheel games\",\n        \"description\": \"Premium pack with enhanced legendary rates\"\n      },\n      {\n        \"type\": \"Masterball Pack\",\n        \"cost\": \"From Plinko/Wheel games\",\n        \"description\": \"Ultimate pack with highest tier probabilities\"\n      },\n      {\n        \"type\": \"Black Bolt Virtual Pack\",\n        \"cost\": \"16 credits direct purchase\",\n        \"description\": \"Themed pack with 8 cards (7 commons + 1 hit card)\"\n      }\n    ]\n  },\n  \"Gaming Costs\": [\n    {\n      \"game\": \"Plinko Drop\",\n      \"cost\": \"20 credits\",\n      \"description\": \"Physics-based ball drop game with pokeball pack rewards\"\n    },\n    {\n      \"game\": \"Wheel Spin\",\n      \"cost\": \"20 credits\", \n      \"description\": \"Spinning wheel game with weighted pack outcomes\"\n    },\n    {\n      \"game\": \"Classic Packs (Black Bolt)\",\n      \"cost\": \"16 credits\",\n      \"description\": \"Direct virtual pack purchase with guaranteed 8 cards\"\n    }\n  ]\n};\n\nasync function generatePDF() {\n  const browser = await puppeteer.launch({\n    headless: true,\n    args: ['--no-sandbox', '--disable-setuid-sandbox']\n  });\n  \n  const page = await browser.newPage();\n  \n  const htmlContent = `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <meta charset=\"utf-8\">\n      <title>Drops TCG - Function Documentation</title>\n      <style>\n        body {\n          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;\n          line-height: 1.6;\n          color: #333;\n          max-width: 800px;\n          margin: 0 auto;\n          padding: 40px 20px;\n        }\n        h1 {\n          color: #1a202c;\n          border-bottom: 3px solid #4299e1;\n          padding-bottom: 10px;\n          margin-bottom: 30px;\n        }\n        h2 {\n          color: #2d3748;\n          margin-top: 40px;\n          margin-bottom: 20px;\n          font-size: 1.5em;\n        }\n        h3 {\n          color: #4a5568;\n          margin-top: 30px;\n          margin-bottom: 15px;\n          font-size: 1.2em;\n        }\n        .endpoint {\n          background: #f7fafc;\n          border-left: 4px solid #4299e1;\n          padding: 15px;\n          margin: 15px 0;\n          border-radius: 0 8px 8px 0;\n        }\n        .endpoint-title {\n          font-family: 'Courier New', monospace;\n          font-weight: bold;\n          color: #2b6cb0;\n          margin-bottom: 8px;\n        }\n        .description {\n          margin-bottom: 8px;\n        }\n        .params {\n          color: #718096;\n          font-size: 0.9em;\n        }\n        .tier {\n          background: #edf2f7;\n          border-left: 4px solid #9f7aea;\n          padding: 10px;\n          margin: 10px 0;\n          border-radius: 0 6px 6px 0;\n        }\n        .tier-name {\n          font-weight: bold;\n          color: #553c9a;\n        }\n        .cost-item {\n          background: #f0fff4;\n          border-left: 4px solid #48bb78;\n          padding: 10px;\n          margin: 10px 0;\n          border-radius: 0 6px 6px 0;\n        }\n        .cost-name {\n          font-weight: bold;\n          color: #2f855a;\n        }\n        .component {\n          background: #fffaf0;\n          border-left: 4px solid #ed8936;\n          padding: 10px;\n          margin: 10px 0;\n          border-radius: 0 6px 6px 0;\n        }\n        .component-name {\n          font-weight: bold;\n          color: #c05621;\n        }\n        .date {\n          text-align: right;\n          color: #718096;\n          font-size: 0.9em;\n          margin-top: 40px;\n        }\n      </style>\n    </head>\n    <body>\n      <h1>🎮 Drops Trading Card Game - Function Documentation</h1>\n      \n      <h2>📊 System Overview</h2>\n      <p>Drops is a modern trading card game application featuring physics-based games, virtual pack opening, and comprehensive card collection management.</p>\n      \n      <h2>🔌 API Endpoints</h2>\n      \n      ${Object.entries(functionDocumentation[\"API Endpoints\"]).map(([category, endpoints]) => `\n        <h3>${category}</h3>\n        ${endpoints.map(endpoint => `\n          <div class=\"endpoint\">\n            <div class=\"endpoint-title\">${endpoint.endpoint}</div>\n            <div class=\"description\">${endpoint.description}</div>\n            ${endpoint.authentication ? `<div class=\"params\"><strong>Auth:</strong> ${endpoint.authentication}</div>` : ''}\n            ${endpoint.parameters ? `<div class=\"params\"><strong>Parameters:</strong> ${endpoint.parameters}</div>` : ''}\n            ${endpoint.returns ? `<div class=\"params\"><strong>Returns:</strong> ${endpoint.returns}</div>` : ''}\n          </div>\n        `).join('')}\n      `).join('')}\n      \n      <h2>🎲 Game Mechanics</h2>\n      \n      <h3>💎 Card Tier System</h3>\n      ${functionDocumentation[\"Game Mechanics\"][\"Tier System\"].map(tier => `\n        <div class=\"tier\">\n          <div class=\"tier-name\">Tier ${tier.tier}</div>\n          <div class=\"description\">${tier.description}</div>\n          <div class=\"params\">${tier.probability}</div>\n        </div>\n      `).join('')}\n      \n      <h3>📦 Pack Types</h3>\n      ${functionDocumentation[\"Game Mechanics\"][\"Pack Types\"].map(pack => `\n        <div class=\"tier\">\n          <div class=\"tier-name\">${pack.type}</div>\n          <div class=\"description\">${pack.description}</div>\n          <div class=\"params\"><strong>Cost:</strong> ${pack.cost}</div>\n        </div>\n      `).join('')}\n      \n      <h2>💰 Game Costs</h2>\n      ${functionDocumentation[\"Gaming Costs\"].map(game => `\n        <div class=\"cost-item\">\n          <div class=\"cost-name\">${game.game} - ${game.cost}</div>\n          <div class=\"description\">${game.description}</div>\n        </div>\n      `).join('')}\n      \n      <h2>⚛️ Frontend Components</h2>\n      \n      ${Object.entries(functionDocumentation[\"Frontend Components\"]).map(([category, components]) => `\n        <h3>${category}</h3>\n        ${components.map(comp => `\n          <div class=\"component\">\n            <div class=\"component-name\">${comp.component}</div>\n            <div class=\"description\">${comp.description}</div>\n            <div class=\"params\"><strong>Features:</strong> ${comp.features}</div>\n          </div>\n        `).join('')}\n      `).join('')}\n      \n      <h2>🔧 Admin Functions</h2>\n      \n      ${Object.entries(functionDocumentation[\"Admin Functions\"]).map(([category, endpoints]) => `\n        <h3>${category}</h3>\n        ${endpoints.map(endpoint => `\n          <div class=\"endpoint\">\n            <div class=\"endpoint-title\">${endpoint.endpoint}</div>\n            <div class=\"description\">${endpoint.description}</div>\n            <div class=\"params\"><strong>Auth:</strong> ${endpoint.authentication}</div>\n            ${endpoint.parameters ? `<div class=\"params\"><strong>Parameters:</strong> ${endpoint.parameters}</div>` : ''}\n            ${endpoint.returns ? `<div class=\"params\"><strong>Returns:</strong> ${endpoint.returns}</div>` : ''}\n          </div>\n        `).join('')}\n      `).join('')}\n      \n      <div class=\"date\">\n        Generated on: ${new Date().toLocaleDateString()} at ${new Date().toLocaleTimeString()}\n      </div>\n    </body>\n    </html>\n  `;\n  \n  await page.setContent(htmlContent);\n  \n  const pdf = await page.pdf({\n    format: 'A4',\n    printBackground: true,\n    margin: {\n      top: '1in',\n      right: '0.5in',\n      bottom: '1in',\n      left: '0.5in'\n    }\n  });\n  \n  await browser.close();\n  \n  return pdf;\n}\n\n// Generate and save the PDF\ntry {\n  const pdfBuffer = await generatePDF();\n  const fs = await import('fs');\n  fs.writeFileSync('drops-functions-documentation.pdf', pdfBuffer);\n  console.log('✅ PDF generated successfully: drops-functions-documentation.pdf');\n} catch (error) {\n  console.error('❌ Error generating PDF:', error);\n}","size_bytes":21401},"server/index-local.ts":{"content":"import 'dotenv/config';\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport path from \"path\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Serve attached assets as static files\napp.use('/attached_assets', express.static(path.resolve(import.meta.dirname, '../attached_assets')));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  const port = parseInt(process.env.PORT || '3000', 10);\n  \n  server.listen(port, 'localhost', () => {\n    log(`serving on http://localhost:${port}`);\n  });\n})();","size_bytes":1990}},"version":1}